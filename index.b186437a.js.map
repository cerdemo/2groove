{"mappings":"ImHqCI,EK/BA,EAQA,E,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,I,E,E,Q,C,E,Q,S,C,C,C,E,O,c,C,E,O,C,W,C,I,I,E,I,A,G,E,E,W,C,E,a,C,C,GvHZJ,IAgBA,EAhBI,EAAU,IAAI,IAgBlB,EAfA,SAAkB,CAAO,CAAE,CAAQ,EACjC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAS,MAAM,CAAG,EAAG,GAAK,EAC5C,EAAQ,GAAG,CAAC,CAAQ,CAAC,EAAE,CAAE,CACvB,QAAS,EACT,KAAM,CAAQ,CAAC,EAAI,EAAE,AACvB,EAEJ,C,G,E,Q,S,C,C,C,ECVA,EAAA,OAAA,CAAiB,IAAA,IAAoB,+CAAA,YAAA,GAAA,EAAgD,QAAQ,E,G,E,Q,S,C,C,C,ECA7F,EAAA,OAAA,CAAiB,IAAA,IAAoB,+CAAA,YAAA,GAAA,EAAgD,QAAQ,E,G,E,Q,S,C,C,C,ECA7F,EAAA,OAAA,CAAiB,IAAA,IAAoB,+CAAA,YAAA,GAAA,EAAgD,QAAQ,E,G,E,Q,S,C,C,C,ECA7F,EAAA,OAAA,CAAiB,IAAA,IAAoB,+CAAA,YAAA,GAAA,EAAgD,QAAQ,E,G,E,Q,S,C,C,C,ECA7F,EAAA,OAAA,CAAiB,IAAA,IAAoB,+CAAA,YAAA,GAAA,EAAgD,QAAQ,E,G,E,Q,S,C,C,C,ECA7F,EAAA,OAAA,CAAiB,IAAA,IAAoB,+CAAA,YAAA,GAAA,EAAgD,QAAQ,E,G,E,Q,S,C,C,C,ECA7F,EAAA,OAAA,CAAiB,IAAA,IAAoB,+CAAA,YAAA,GAAA,EAAgD,QAAQ,E,G,E,Q,S,C,C,C,ECA7F,EAAA,OAAA,CAAiB,IAAA,IAAoB,+CAAA,YAAA,GAAA,EAAgD,QAAQ,E,G,E,Q,S,C,C,C,ECA7F,EAAA,OAAA,CAAiB,IAAA,IAAoB,+CAAA,YAAA,GAAA,EAAgD,QAAQ,E,G,E,Q,S,C,C,C,ECA7F,EAAA,OAAA,CAAiB,IAAA,IAAoB,gDAAA,YAAA,GAAA,EAAiD,QAAQ,E,G,E,Q,S,C,C,C,ECA9F,EAAA,OAAA,CAAiB,IAAA,IAAoB,gDAAA,YAAA,GAAA,EAAiD,QAAQ,E,G,E,Q,S,C,C,C,ECA9F,EAAA,OAAA,CAAiB,IAAA,IAAoB,gDAAA,YAAA,GAAA,EAAiD,QAAQ,E,G,E,Q,S,C,C,C,ECA9F,EAAA,OAAA,CAAiB,IAAA,IAAoB,6CAAA,YAAA,GAAA,EAA8C,QAAQ,E,G,E,Q,S,C,C,C,ECA3F,EAAA,OAAA,CAAiB,IAAA,IAAoB,6CAAA,YAAA,GAAA,EAA8C,QAAQ,E,G,E,Q,S,C,C,C,ECA3F,EAAA,OAAA,CAAiB,IAAA,IAAoB,6CAAA,YAAA,GAAA,EAA8C,QAAQ,E,G,E,Q,S,C,C,C,ECA3F,EAAA,OAAA,CAAiB,IAAA,IAAoB,6CAAA,YAAA,GAAA,EAA8C,QAAQ,E,G,E,Q,S,C,C,C,ECA3F,EAAA,OAAA,CAAiB,IAAA,IAAoB,6CAAA,YAAA,GAAA,EAA8C,QAAQ,E,G,E,Q,S,C,C,C,ECA3F,EAAA,OAAA,CAAiB,IAAA,IAAoB,6CAAA,YAAA,GAAA,EAA8C,QAAQ,E,G,E,Q,S,C,C,C,ECA3F,EAAA,OAAA,CAAiB,IAAA,IAAoB,6CAAA,YAAA,GAAA,EAA8C,QAAQ,E,G,E,Q,S,C,C,C,ECA3F,EAAA,OAAA,CAAiB,IAAA,IAAoB,6CAAA,YAAA,GAAA,EAA8C,QAAQ,E,G,E,Q,S,C,C,C,ECA3F,EAAA,OAAA,CAAiB,IAAA,IAAoB,6CAAA,YAAA,GAAA,EAA8C,QAAQ,E,G,E,Q,S,C,C,C,ECA3F,EAAA,OAAA,CAAiB,IAAA,IAAoB,8CAAA,YAAA,GAAA,EAA+C,QAAQ,E,G,E,Q,S,C,C,C,ECA5F,EAAA,OAAA,CAAiB,IAAA,IAAoB,8CAAA,YAAA,GAAA,EAA+C,QAAQ,E,G,E,Q,S,C,C,C,ECA5F,EAAA,OAAA,CAAiB,IAAA,IAAoB,8CAAA,YAAA,GAAA,EAA+C,QAAQ,E,G,E,Q,S,C,C,C,ECA5F,EAAA,OAAA,CAAiB,IAAA,IAAoB,wCAAA,YAAA,GAAA,EAAyC,QAAQ,E,G,E,Q,S,C,C,C,ECAtF,EAAA,OAAA,CAAiB,IAAA,IAAoB,wCAAA,YAAA,GAAA,EAAyC,QAAQ,E,G,E,Q,S,C,C,C,ECAtF,EAAA,OAAA,CAAiB,IAAA,IAAoB,wCAAA,YAAA,GAAA,EAAyC,QAAQ,E,G,E,Q,S,C,C,C,ECAtF,EAAA,OAAA,CAAiB,IAAA,IAAoB,wCAAA,YAAA,GAAA,EAAyC,QAAQ,E,G,E,Q,S,C,C,C,ECAtF,EAAA,OAAA,CAAiB,IAAA,IAAoB,wCAAA,YAAA,GAAA,EAAyC,QAAQ,E,G,E,Q,S,C,C,C,ECAtF,EAAA,OAAA,CAAiB,IAAA,IAAoB,wCAAA,YAAA,GAAA,EAAyC,QAAQ,E,G,E,Q,S,C,C,C,ECAtF,EAAA,OAAA,CAAiB,IAAA,IAAoB,wCAAA,YAAA,GAAA,EAAyC,QAAQ,E,G,E,Q,S,C,C,C,ECAtF,EAAA,OAAA,CAAiB,IAAA,IAAoB,wCAAA,YAAA,GAAA,EAAyC,QAAQ,E,G,E,Q,S,C,C,C,ECAtF,EAAA,OAAA,CAAiB,IAAA,IAAoB,wCAAA,YAAA,GAAA,EAAyC,QAAQ,E,G,E,Q,S,C,C,C,ECAtF,EAAA,OAAA,CAAiB,IAAA,IAAoB,yCAAA,YAAA,GAAA,EAA0C,QAAQ,E,G,E,Q,S,C,C,C,ECAvF,EAAA,OAAA,CAAiB,IAAA,IAAoB,yCAAA,YAAA,GAAA,EAA0C,QAAQ,E,G,E,Q,S,C,C,C,ECAvF,EAAA,OAAA,CAAiB,IAAA,IAAoB,yCAAA,YAAA,GAAA,EAA0C,QAAQ,E,G,E,Q,S,C,C,C,ECAvF,EAAA,OAAA,CAAiB,IAAA,IAAoB,uCAAA,YAAA,GAAA,EAAwC,QAAQ,E,G,E,Q,S,C,C,C,ECArF,EAAA,OAAA,CAAiB,IAAA,IAAoB,uCAAA,YAAA,GAAA,EAAwC,QAAQ,E,G,E,Q,S,C,C,C,ECArF,EAAA,OAAA,CAAiB,IAAA,IAAoB,uCAAA,YAAA,GAAA,EAAwC,QAAQ,E,G,E,Q,S,C,C,C,ECArF,EAAA,OAAA,CAAiB,IAAA,IAAoB,uCAAA,YAAA,GAAA,EAAwC,QAAQ,E,G,E,Q,S,C,C,C,ECArF,EAAA,OAAA,CAAiB,IAAA,IAAoB,uCAAA,YAAA,GAAA,EAAwC,QAAQ,E,G,E,Q,S,C,C,C,ECArF,EAAA,OAAA,CAAiB,IAAA,IAAoB,uCAAA,YAAA,GAAA,EAAwC,QAAQ,E,G,E,Q,S,C,C,C,ECArF,EAAA,OAAA,CAAiB,IAAA,IAAoB,uCAAA,YAAA,GAAA,EAAwC,QAAQ,E,G,E,Q,S,C,C,C,ECArF,EAAA,OAAA,CAAiB,IAAA,IAAoB,uCAAA,YAAA,GAAA,EAAwC,QAAQ,E,G,E,Q,S,C,C,C,ECArF,EAAA,OAAA,CAAiB,IAAA,IAAoB,uCAAA,YAAA,GAAA,EAAwC,QAAQ,E,G,E,Q,S,C,C,C,ECArF,EAAA,OAAA,CAAiB,IAAA,IAAoB,wCAAA,YAAA,GAAA,EAAyC,QAAQ,E,G,E,Q,S,C,C,C,ECAtF,EAAA,OAAA,CAAiB,IAAA,IAAoB,wCAAA,YAAA,GAAA,EAAyC,QAAQ,E,G,E,Q,S,C,C,C,ECAtF,EAAA,OAAA,CAAiB,IAAA,IAAoB,wCAAA,YAAA,GAAA,EAAyC,QAAQ,E,G,E,Q,S,C,C,C,ECAtF,EAAA,OAAA,CAAiB,IAAA,IAAoB,uCAAA,YAAA,GAAA,EAAwC,QAAQ,E,G,E,Q,S,C,C,C,ECArF,EAAA,OAAA,CAAiB,IAAA,IAAoB,uCAAA,YAAA,GAAA,EAAwC,QAAQ,E,G,E,Q,S,C,C,C,ECArF,EAAA,OAAA,CAAiB,IAAA,IAAoB,uCAAA,YAAA,GAAA,EAAwC,QAAQ,E,G,E,Q,S,C,C,C,ECArF,EAAA,OAAA,CAAiB,IAAA,IAAoB,uCAAA,YAAA,GAAA,EAAwC,QAAQ,E,G,E,Q,S,C,C,C,ECArF,EAAA,OAAA,CAAiB,IAAA,IAAoB,uCAAA,YAAA,GAAA,EAAwC,QAAQ,E,G,E,Q,S,C,C,C,ECArF,EAAA,OAAA,CAAiB,IAAA,IAAoB,uCAAA,YAAA,GAAA,EAAwC,QAAQ,E,G,E,Q,S,C,C,C,ECArF,EAAA,OAAA,CAAiB,IAAA,IAAoB,uCAAA,YAAA,GAAA,EAAwC,QAAQ,E,G,E,Q,S,C,C,C,ECArF,EAAA,OAAA,CAAiB,IAAA,IAAoB,uCAAA,YAAA,GAAA,EAAwC,QAAQ,E,G,E,Q,S,C,C,C,ECArF,EAAA,OAAA,CAAiB,IAAA,IAAoB,uCAAA,YAAA,GAAA,EAAwC,QAAQ,E,G,E,Q,S,C,C,C,ECArF,EAAA,OAAA,CAAiB,IAAA,IAAoB,wCAAA,YAAA,GAAA,EAAyC,QAAQ,E,G,E,Q,S,C,C,C,ECAtF,EAAA,OAAA,CAAiB,IAAA,IAAoB,wCAAA,YAAA,GAAA,EAAyC,QAAQ,E,G,E,Q,S,C,C,C,ECAtF,EAAA,OAAA,CAAiB,IAAA,IAAoB,wCAAA,YAAA,GAAA,EAAyC,QAAQ,E,G,E,Q,S,C,C,C,ECAtF,EAAA,OAAA,CAAiB,IAAA,IAAoB,wCAAA,YAAA,GAAA,EAAyC,QAAQ,E,G,E,Q,S,C,C,C,ECAtF,EAAA,OAAA,CAAiB,IAAA,IAAoB,wCAAA,YAAA,GAAA,EAAyC,QAAQ,E,G,E,Q,S,C,C,C,ECAtF,EAAA,OAAA,CAAiB,IAAA,IAAoB,wCAAA,YAAA,GAAA,EAAyC,QAAQ,E,G,E,Q,S,C,C,C,ECAtF,EAAA,OAAA,CAAiB,IAAA,IAAoB,wCAAA,YAAA,GAAA,EAAyC,QAAQ,E,G,E,Q,S,C,C,C,ECAtF,EAAA,OAAA,CAAiB,IAAA,IAAoB,wCAAA,YAAA,GAAA,EAAyC,QAAQ,E,G,E,Q,S,C,C,C,ECAtF,EAAA,OAAA,CAAiB,IAAA,IAAoB,wCAAA,YAAA,GAAA,EAAyC,QAAQ,E,G,E,Q,S,C,C,C,ECAtF,EAAA,OAAA,CAAiB,IAAA,IAAoB,wCAAA,YAAA,GAAA,EAAyC,QAAQ,E,G,E,Q,S,C,C,C,ECAtF,EAAA,OAAA,CAAiB,IAAA,IAAoB,wCAAA,YAAA,GAAA,EAAyC,QAAQ,E,G,E,Q,S,C,C,C,ECAtF,EAAA,OAAA,CAAiB,IAAA,IAAoB,wCAAA,YAAA,GAAA,EAAyC,QAAQ,E,G,E,Q,S,C,C,C,ECAtF,EAAA,OAAA,CAAiB,IAAA,IAAoB,yCAAA,YAAA,GAAA,EAA0C,QAAQ,E,G,E,Q,S,C,C,C,ECAvF,EAAA,OAAA,CAAiB,IAAA,IAAoB,yCAAA,YAAA,GAAA,EAA0C,QAAQ,E,G,E,Q,S,C,C,C,ECAvF,EAAA,OAAA,CAAiB,IAAA,IAAoB,yCAAA,YAAA,GAAA,EAA0C,QAAQ,E,G,E,Q,S,C,C,C,ECAvF,EAAA,OAAA,CAAiB,IAAA,IAAoB,yCAAA,YAAA,GAAA,EAA0C,QAAQ,E,G,E,Q,S,C,C,C,ECAvF,EAAA,OAAA,CAAiB,IAAA,IAAoB,yCAAA,YAAA,GAAA,EAA0C,QAAQ,E,G,E,Q,S,C,C,C,ECAvF,EAAA,OAAA,CAAiB,IAAA,IAAoB,yCAAA,YAAA,GAAA,EAA0C,QAAQ,E,G,E,Q,S,C,C,C,ECAvF,EAAA,OAAA,CAAiB,IAAA,IAAoB,yCAAA,YAAA,GAAA,EAA0C,QAAQ,E,G,E,Q,S,C,C,C,ECAvF,EAAA,OAAA,CAAiB,IAAA,IAAoB,yCAAA,YAAA,GAAA,EAA0C,QAAQ,E,G,E,Q,S,C,C,C,ECAvF,EAAA,OAAA,CAAiB,IAAA,IAAoB,yCAAA,YAAA,GAAA,EAA0C,QAAQ,E,G,E,Q,S,C,C,C,ECAvF,EAAA,OAAA,CAAiB,IAAA,IAAoB,yCAAA,YAAA,GAAA,EAA0C,QAAQ,E,G,E,Q,S,C,C,C,ECAvF,EAAA,OAAA,CAAiB,IAAA,IAAoB,yCAAA,YAAA,GAAA,EAA0C,QAAQ,E,G,E,Q,S,C,C,C,ECAvF,EAAA,OAAA,CAAiB,IAAA,IAAoB,yCAAA,YAAA,GAAA,EAA0C,QAAQ,E,G,E,Q,S,C,C,C,ECAvF,EAAA,OAAA,CAAiB,IAAA,IAAoB,0CAAA,YAAA,GAAA,EAA2C,QAAQ,E,G,E,Q,S,C,C,C,ECAxF,EAAA,OAAA,CAAiB,IAAA,IAAoB,0CAAA,YAAA,GAAA,EAA2C,QAAQ,E,G,E,Q,S,C,C,C,ECAxF,EAAA,OAAA,CAAiB,IAAA,IAAoB,0CAAA,YAAA,GAAA,EAA2C,QAAQ,E,G,E,Q,S,C,C,C,ECAxF,EAAA,OAAA,CAAiB,IAAA,IAAoB,0CAAA,YAAA,GAAA,EAA2C,QAAQ,E,G,E,Q,S,C,C,C,ECAxF,EAAA,OAAA,CAAiB,IAAA,IAAoB,0CAAA,YAAA,GAAA,EAA2C,QAAQ,E,G,E,Q,S,C,C,C,ECAxF,EAAA,OAAA,CAAiB,IAAA,IAAoB,0CAAA,YAAA,GAAA,EAA2C,QAAQ,E,G,E,Q,S,C,C,C,ECAxF,EAAA,OAAA,CAAiB,IAAA,IAAoB,0CAAA,YAAA,GAAA,EAA2C,QAAQ,E,G,E,Q,S,C,C,C,ECAxF,EAAA,OAAA,CAAiB,IAAA,IAAoB,0CAAA,YAAA,GAAA,EAA2C,QAAQ,E,G,E,Q,S,C,C,C,ECAxF,EAAA,OAAA,CAAiB,IAAA,IAAoB,0CAAA,YAAA,GAAA,EAA2C,QAAQ,E,G,E,Q,S,C,C,C,ECAxF,EAAA,OAAA,CAAiB,IAAA,IAAoB,0CAAA,YAAA,GAAA,EAA2C,QAAQ,E,G,E,Q,S,C,C,C,ECAxF,EAAA,OAAA,CAAiB,IAAA,IAAoB,0CAAA,YAAA,GAAA,EAA2C,QAAQ,E,G,E,Q,S,C,C,C,ECAxF,EAAA,OAAA,CAAiB,IAAA,IAAoB,0CAAA,YAAA,GAAA,EAA2C,QAAQ,E,G,E,Q,S,C,C,C,ECAxF,EAAA,OAAA,CAAiB,IAAA,IAAoB,2CAAA,YAAA,GAAA,EAA4C,QAAQ,E,G,E,Q,S,C,C,C,ECAzF,EAAA,OAAA,CAAiB,IAAA,IAAoB,2CAAA,YAAA,GAAA,EAA4C,QAAQ,E,G,E,Q,S,C,C,C,ECAzF,EAAA,OAAA,CAAiB,IAAA,IAAoB,2CAAA,YAAA,GAAA,EAA4C,QAAQ,E,G,E,Q,S,C,C,C,ECAzF,EAAA,OAAA,CAAiB,IAAA,IAAoB,4CAAA,YAAA,GAAA,EAA6C,QAAQ,E,G,E,Q,S,C,C,C,ECA1F,EAAA,OAAA,CAAiB,IAAA,IAAoB,4CAAA,YAAA,GAAA,EAA6C,QAAQ,E,G,E,Q,S,C,C,C,ECA1F,EAAA,OAAA,CAAiB,IAAA,IAAoB,4CAAA,YAAA,GAAA,EAA6C,QAAQ,E,G,E,Q,S,C,C,C,ECA1F,EAAA,OAAA,CAAiB,IAAA,IAAoB,4CAAA,YAAA,GAAA,EAA6C,QAAQ,E,G,E,Q,S,C,C,C,ECA1F,EAAA,OAAA,CAAiB,IAAA,IAAoB,4CAAA,YAAA,GAAA,EAA6C,QAAQ,E,G,E,Q,S,C,C,C,ECA1F,EAAA,OAAA,CAAiB,IAAA,IAAoB,4CAAA,YAAA,GAAA,EAA6C,QAAQ,E,G,E,Q,S,C,C,C,ECA1F,EAAA,OAAA,CAAiB,IAAA,IAAoB,4CAAA,YAAA,GAAA,EAA6C,QAAQ,E,G,E,Q,S,C,C,C,ECA1F,EAAA,OAAA,CAAiB,IAAA,IAAoB,4CAAA,YAAA,GAAA,EAA6C,QAAQ,E,G,E,Q,S,C,C,C,ECA1F,EAAA,OAAA,CAAiB,IAAA,IAAoB,4CAAA,YAAA,GAAA,EAA6C,QAAQ,E,G,E,Q,S,C,C,C,ECA1F,EAAA,OAAA,CAAiB,IAAA,IAAoB,6CAAA,YAAA,GAAA,EAA8C,QAAQ,E,G,E,Q,S,C,C,C,ECA3F,EAAA,OAAA,CAAiB,IAAA,IAAoB,6CAAA,YAAA,GAAA,EAA8C,QAAQ,E,G,E,Q,S,C,C,C,ECA3F,EAAA,OAAA,CAAiB,IAAA,IAAoB,6CAAA,YAAA,GAAA,EAA8C,QAAQ,E,GCA3F,AAAA,EAAA,SAAA,QAAA,CAA8C,IAAA,IAAoB,GAAA,YAAA,GAAA,EAAI,QAAQ,GAAG,KAAK,KAAK,CAAC,+9KCA5F,6BAA4B;AAC5B,wDAAwD;AAExD,mCAAmC;AACnC,+BAA+B;AAC/B,+BAA+B;ACL/B,4BAA4B;AAC5B,sDAAsD;AAEtD,gDAAgD;ACHzC,MAAM,EAAU,CACnB,eAAgB,CACZ,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACH,CACD,aAAc,CACV,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACH,CACD,MAAS,CACL,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACH,CACD,KAAQ,CACJ,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACH,CACD,KAAQ,CACJ,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACH,CACD,MAAS,CACL,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACH,CACD,SAAU,CACN,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACH,CACD,UAAW,CACP,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACH,CACD,YAAa,CACX,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACA,EAAA,SACD,AACH,EDvHI,EAAW,CAAC,EAClB,AAFkB,CAAC,eAAgB,aAAc,QAAS,OAAQ,OAAQ,QAAS,SAAU,UAAW,YAAY,CAE1G,OAAO,CAAC,AAAA,IACd,IAAM,EAAc,CAAC,EACrB,AAAA,CAAO,CAAC,EAAK,CAAC,OAAO,CAAC,CAAC,EAAY,KAC/B,IAAM,EAAW,KAAK,SAAS,CAAC,GAAK,EAAO,QAAQ,MAAM,EAC1D,CAAA,CAAW,CAAC,EAAS,CAAG,CAC5B,GACA,CAAQ,CAAC,EAAK,CAAG,IAAI,KAAK,OAAO,CAAC,CAC9B,KAAM,CACV,GAAG,aAAa,EACpB,EAiBE,+DAA8D;AAChE,MAAM,EAAe,CACjB,GAAO,OACP,GAAO,QACP,GAAO,YACP,GAAO,UACP,GAAO,SACP,MAAQ,QACR,MAAQ,OACR,MAAQ,eACR,MAAQ,YACZ,CA8BA,yLAAwL;AACxL,0GAA0G;AAC1G,wIAAwI;AACxI,SAAS,EAAsB,CAAO,CAAE,EAAU,CAAA,CAAK,EACnD,GAAI,EAAa,CACb,GAAM,CAAC,EAAQ,EAAY,EAAS,CAAG,EAAQ,IAAI,CAC7C,EAAW,KAAK,SAAS,CAAC,EAAW,GAAI,QAAQ,MAAM,GACvD,EAAW,CAAY,CAAC,EAAS,CAmBvC,GAlBI,IACJ,gCAAgC;AAChC,QAAQ,GAAG,CAAE,EAAY,EAAU,GACnC,QAAQ,GAAG,CAAC,aAAc,IAetB,AAAW,MAAX,GAAkB,CAAY,CAAC,EAAS,CAAE,CAC1C,2CAA2C;AAC3C,IAAM,EAzEP,KAAK,SAAS,CAFF,GAFC,KAAK,IAAI,CAAC,AA6EoB,EA/ElC,KAAK,IAAI,CAAC,qBAIY,EAEJ,QAAQ,MAAM,EAyEa,yCAAwC;AAC7F,8EAA8E;AAE9E,GAAI,EAAU,CACV,oDAAoD;AACpD,IAAM,EAAU,CAAQ,CAAC,EAAS,AAClC,sFAAqF;AACrF,EAAQ,oBAAoB,CAAC,EAAe,AArBhC,CAChB,eAAgB,KAChB,aAAc,KACd,MAAS,KACT,KAAQ,KACR,KAAQ,KACR,MAAS,KACT,SAAU,KACV,UAAW,KACX,YAAa,IACjB,CAW+D,CAAC,EAAS,CACjE,kDAAiD;AAErD,MACI,QAAQ,KAAK,CAAC,CAAC,iCAAiC,EAAE,EAAS,CAAC,CAEpE,CACJ,CACJ,CAGA,sBAAsB;AACtB,WAAW;AACX,kDAAkD;AAClD,2BAA2B;AAC3B,iCAAiC;AACjC,iFAAiF;AAGjF,oBAAoB;AACpB,yCAAyC;AACzC,oEAAoE;AAGpE,yBAAyB;AACzB,+BAA+B;AAC/B,gEAAgE;AAChE,iHAAiH;AACjH,iGAAiG;AACjG,MAAM;AACN,8DAA8D;AAC9D,wEAAwE;AACxE,aAAa;AACb,kEAAkE;AAClE,MAAM;AAMN,mBAAmB;AACnB,mDAAmD;AACnD,iFAAiF;AACjF,gEAAgE;AAChE,6CAA6C;AAE7C,+CAA+C;AAC/C,IAAI,EAAc,CAAA,CAElB,iCAAgC;AAChC,MAAM,EAA0B,SAAS,aAAa,CAAC,gDAgDvD,SAAS,EAAc,CAAC,EACtB,QAAQ,KAAK,CAAC,iCAAkC,EAClD,CAEE,SAAS;AAlDX,iBAAiB;AACjB,wCAAwC;AACxC,EAAwB,gBAAgB,CAAC,SAEzC,+BAA+B;AAC/B,WACI,EAAc,EAAwB,OAAO,AAAG,4CAA2C;AAC/F,GAEI,UAAU,iBAAiB,CAC3B,UAAU,iBAAiB,GAAG,IAAI,CAOtC,gCAAgC;AAChC,SAAS,EAAc,CAAU,EAC/B,IAAM,EAAS,EAAW,MAAM,CAAC,MAAM,GACvC,IAAK,IAAI,EAAQ,EAAO,IAAI,GAAI,GAAS,CAAC,EAAM,IAAI,CAAE,EAAQ,EAAO,IAAI,GACvE,EAAM,KAAK,CAAC,aAAa,CAAG,CAI9B,CAAA,EAAW,aAAa,CAAG,SAAS,CAAC,EAC/B,AAAiB,cAAjB,EAAE,IAAI,CAAC,KAAK,CACd,EAAE,IAAI,CAAC,aAAa,CAAG,EACG,iBAAjB,EAAE,IAAI,CAAC,KAAK,GACrB,EAAE,IAAI,CAAC,aAAa,CAAG,KACvB,sDAAsD;AACtD,WAAW,KAQX,UAAU,iBAAiB,CAC7B,UAAU,iBAAiB,GAAG,IAAI,CAAC,EAAe,GAElD,QAAQ,KAAK,CAAC,4CATZ,EAAG,KAEP,CACF,EA1BsD,GAElD,QAAQ,KAAK,CAAC,4CAuClB,oKAAmK;AACnK,8EAA8E;AAC9E,2IAA2I;AAC3I,wMAAwM;AACxM,0MAA0M;AAC1M,kOAAkO;AAClO,iIAAiI;AE5NjI,4BAA4B;AAC5B,qEAAqE;AACrE,oFAAoF;AAE7E,MAAM,EAAc,CACzB,SAAU,KACV,uBAAwB,CAAA,EAExB,YAAY,CAAI,EACZ,QAAQ,GAAG,CAAC,+BAAgC,GAC5C,IAAI,CAAC,QAAQ,CAAG,EAChB,IAAI,CAAC,sBAAsB,CAAG,CAAA,CAClC,EAEA,cACI,OAAO,IAAI,CAAC,QAAQ,AACxB,EAEA,2BACI,OAAO,IAAI,CAAC,sBAAsB,AACtC,EAEA,gBACI,IAAI,CAAC,sBAAsB,CAAG,CAAA,CAAQ,kBAAiB;AAC3D,CAEF,ECpBM,EAAe,IAAI,aAGnB,EAAc,SAAS,cAAc,CAAC,SACtC,EAAwB,SAAS,cAAc,CAAC,mBAChD,EAA0B,SAAS,aAAa,CAAC,2CAEjD,EAAe,SAAS,cAAc,CAAC,gBACvC,EAAY,SAAS,cAAc,CAAC,aACpC,EAAY,EAAE,CAapB,IAAI,EAAgB,CAAA,EAChB,EAAe,EAAE,CACjB,EAAY,CAAA,EACZ,EAAqB,EAIrB,EAAc,EACd,EAAgB,EAAE,CAElB,EAAmB,CAAA,EACnB,EAAmB,CAAA,EACnB,EAAU,GACV,EAAY,GACZ,EAAc,EACd,EAAY,IACZ,EAAmB,CAAC,SAAY,CAAC,UAAW,eAAe,CACvC,UAAa,CAAC,CAAC,IAAM,GAAK,CAAE,CAAC,GAAK,EAAI,CAAC,CACvC,YAAe,CAAC,CAAC,IAAM,IAAK,CAAE,CAAC,GAAK,GAAI,CAAC,AAAA,EAC7D,EAAwB,CAqC5B,uBAAsB;AACtB,sBAAsB;AACtB,sBAAsB;AAEtB,mBAAmB;AACnB,SAAS,EAAU,CAAM,CAAE,EAAY,GAAI,EACvC,IAAM,EAAM,EAAa,gBAAgB,GACnC,EAAW,EAAa,UAAU,EACxC,CAAA,EAAS,IAAI,CAAC,KAAK,CAAG,EACtB,EAAI,SAAS,CAAC,KAAK,CAAG,EACtB,EAAI,OAAO,CAAC,GACZ,EAAS,OAAO,CAAC,EAAa,WAAW,EACzC,EAAI,KAAK,GACT,EAAI,IAAI,CAAC,EAAa,WAAW,CAAG,IACxC,CAGO,eAAe,IACS,cAAvB,EAAa,KAAK,EAClB,MAAM,EAAa,MAAM,GAGF,YAAvB,KAAK,OAAO,CAAC,KAAK,GAClB,MAAM,KAAK,KAAK,GAChB,QAAQ,GAAG,CAAC,wBAGhB,CAAA,EAAmB,CAAC,CAApB,GAII,EAAe,EAAY,KAAK,CAMxC,CAIO,eAAe,EAAe,CAAG,EACT,YAAvB,KAAK,OAAO,CAAC,KAAK,EAClB,MAAM,KAAK,KAAK,GAGpB,KAAK,SAAS,CAAC,GAAG,CAAC,KAAK,CAAG,EACtB,GASD,AARA,CAAA,EAAgB,IAAI,KAAK,IAAI,CAAC,AAAA,IAEtB,GACA,EAAU,EAAsB,KAAK,CAAE,GAE3C,AAwBZ,WAXI,QAAQ,GAAG,CAAC,CAAC,EAAE,EAAY,EAAE,CAAC,EAI1B,EADA,AAAe,GAFnB,CAAA,EAAe,EAAc,EAAK,CAAA,EAGlB,KAEA,GAOhB,6CAA4C;AAC5C,+BAA+B;AAC/B,IAAM,EAAQ,IAAI,YAAY,gBAAiB,CAAE,OAAQ,CAAE,KAAM,CAAY,CAAE,GAC/E,OAAO,aAAa,CAAC,EAEzB,GA9BQ,EAAG,KAAA,EAEW,KAAK,CAAC,GAGxB,KAAK,SAAS,CAAC,KAAK,EACxB,EAhEA,AA5BA,uCAAuC;AACvC,YAAY;AACZ,uCAAuC;AAIvC,qDAAqD;AACrD,uBAAuB;AACvB,kFAAkF;AAClF,MAAM;AAKN,iBACI,gEAAgE;AAChE,IAAM,EAAa,EAAY,KAAK,AAEpC,0CAAyC;AACzC,EAAmB,CAAA,EAEnB,QAAQ,GAAG,CAAC,oBACZ,QAAQ,GAAG,CAAC,eAAgB,GAC5B,QAAQ,GAAG,CAAC,qBAAsB,GAClC,QAAQ,GAAG,CAAC,iBAAkB,GAC9B,QAAQ,GAAG,CAAC,qBAAsB,EAAiB,QAAW,CAAC,EAAsB,CACzF,IA0HA,eAAe;AACf,yBAAyB;AACzB,SAAS,cAAc,CAAC,QAAQ,gBAAgB,CAAC,QAAS,WACtD,IAAM,EAAQ,IAAI,CAAC,KAAK,CACxB,EAAU,EAAW,EAAO,CAAC,EAAG,EAAE,CAAE,EAAiB,SAAY,CAAC,EAAsB,EACxF,SAAS,cAAc,CAAC,cAAc,WAAW,CAAG,EACpD,qGAAqG;AACrG,QAAQ,GAAG,CAAC,WAAY,EAC5B,GAGA,cAAc;AACd,yBAAyB;AACzB,SAAS,cAAc,CAAC,aAAa,gBAAgB,CAAC,QAAS,WAC3D,IAAM,EAAQ,IAAI,CAAC,KAAK,AACxB,qDAAoD;AACpD,EAAY,EAAW,EAAO,CAAC,EAAG,EAAE,CAAE,EAAiB,WAAc,CAAC,EAAsB,EAC5F,SAAS,cAAc,CAAC,cAAc,WAAW,CAAG,EACpD,qGAAqG;AACrG,QAAQ,GAAG,CAAC,aAAc,EAC9B,G,I,E,C,E,E,C,EE1NA,EAAiB,SAAU,CAAS,CAAE,CAAM,CAAE,CAAK,EACjD,GAAI,IAAW,KAAK,QAAQ,CAAC,MAAM,CAEjC,mCAAmC;AACnC,OAAO,CAEP,oFAAmF;AACnF,IAAI,EAAS,EAAQ,UAAY,KAAK,SAAS,CAAC,GAAa,IAAM,iBAAmB,KAAK,SAAS,CAAC,GAAa,KAClH,OAAO,IAAI,eAAe,CAAC,IAAI,KAAK,CAAC,EAAO,CAAE,CAC5C,KAAM,wBACR,GAEJ,EDbA,IAAI,EAAA,IAAA,IAA0B,0CAA9B,YAAA,GAAA,EACA,EAAiB,EAAU,EAAI,QAAQ,GAAI,EAAI,MAAM,CAAE,CAAA,ED+NvD,wDAAuD;AACvD,MAAM,EAAa,IAAI,OAAvB,EAwBA,0DAAyD;AACzD,SAAS,EAAkB,CAAK,EAC5B,EAAW,WAAW,CAAC,CACnB,IAAK,YACL,MAAO,EACP,IAAK,WAAW,SAAS,cAAc,CAAC,SAAS,KAAK,EACtD,iBAAkB,EAClB,aAAc,EACd,gBAhOc,CAAA,EAiOd,OAnOM,gBAoON,UAnOQ,OAoOR,iBAAkB,EAAiB,QAAW,CAAC,EAAsB,AACzE,EACJ,CAoNA,aAAa;AAEb,0CAA0C;AAC1C,SAAS,EAAW,CAAK,CAAE,CAAI,CAAE,CAAE,EAC/B,IAAI,EAAQ,AAAC,CAAA,CAAE,CAAC,EAAE,CAAG,CAAE,CAAC,EAAE,AAAF,EAAO,CAAA,CAAI,CAAC,EAAE,CAAG,CAAI,CAAC,EAAC,AAAD,EAE9C,MAAQ,AADK,CAAA,KAAK,GAAG,CAAC,CAAI,CAAC,EAAE,CAAE,KAAK,GAAG,CAAC,CAAI,CAAC,EAAE,CAAE,IAAU,CAAI,CAAC,EAAE,AAAF,EAC/C,EAAQ,CAAE,CAAC,EAAE,AAClC,CA3PA,sCAAsC;AACtC,EAAW,gBAAgB,CAAC,UAAW,SAAS,CAAK,EACjD,IAAM,EAAO,EAAM,IAAI,CAGvB,OAFA,QAAQ,GAAG,CAAC,6BAA8B,EAAK,MAAM,EAE7C,EAAK,IAAI,EACb,IAAK,iBACD,kCAAkC;AAClC,QAAQ,GAAG,CAAC,+BAAgC,EAAK,IAAI,EACrD,AAAA,EAAY,WAAW,CAAC,EAAK,IAAI,EAkC3C,sBAAsB;AACtB,EAAc,MAAM,CAAG,EAjCb,KAEJ,KAAK,QACD,QAAQ,KAAK,CAAC,qBAAsB,EAAK,KAAK,CAEtD,CACJ,GAwEA,uCAAuC;AACvC,kBAAkB;AAClB,uCAAuC;AAEvC,mBAAmB;AACnB,oCAAoC;AACpC,0DAA0D;AAC1D,yDAAyD;AACzD,yBAAyB;AACzB,MAAM;AAEN,kBAAkB;AAClB,kEAAkE;AAClE,EAAwB,gBAAgB,CAAC,SAAU,GAQnD,+CAA+C;AAC/C,EAAY,gBAAgB,CAAC,QAAS,WAClC,IAAM,EAAM,IAAI,CAAC,KAAK,AACtB,CAAA,SAAS,cAAc,CAAC,cAAc,WAAW,CAAG,EAChD,GACA,EAAe,EAEvB,GACA,EAAsB,gBAAgB,CAAC,QAAS,WAC5C,IAAM,EAAM,IAAI,CAAC,KAAK,AACtB,CAAA,SAAS,cAAc,CAAC,cAAc,WAAW,CAAG,CAAK,yBAAwB;AACrF,GAGA,4FAA4F;AAC5F,OAAO,gBAAgB,CAAC,UAAW,AAAC,IAClC,GAAI,AAAU,MAAV,EAAE,GAAG,EAAY,CAAC,EAAW,CAC7B,EAAE,cAAc,GAChB,EAAgB,CAAA,EAChB,EAAqB,KAAK,GAAG,GAC7B,EAAa,SAAS,CAAG,UACzB,EAAa,SAAS,CAAC,GAAG,CAAC,aAE3B,IAAM,EAAa,SAlVR,GAkV+B,SAjV3B,EAiVqD,oCAAmC;AACvG,EAAe,AAAI,MAAM,GAAY,IAAI,CAAC,GAE1C,EAAY,CAAA,CAChB,CAEA,GAAI,AAAU,MAAV,EAAE,GAAG,EAAY,EAAe,CAClC,2CAA2C;AACzC,EAAU,EAAsB,KAAK,CAAE,IAAK,yDAAyD;CACrG,IAAM,EAAY,KAAK,GAAG,GAAK,EACzB,EAAM,SAAS,EAAY,KAAK,EAChC,EAAgB,SA5VP,GA8VT,EAAoB,KAAK,KAAK,CAAC,EADH,CAAA,IAAe,CAAA,EAAM,CAAA,CAAY,GAE/D,EAAoB,EAAa,MAAM,EACvC,CAAA,CAAY,CAAC,EAAkB,CAAG,CAAA,EAEtC,iBAAmB,KAAK,GAAG,EAC/B,CAEA,GAAI,AAAU,MAAV,EAAE,GAAG,CAAU,CAEjB,EAAE,cAAc,GAChB,IAAM,EAAQ,SAAS,cAAc,CAAC,YACtC,EAAM,SAAS,CAAC,MAAM,CAAC,aACvB,EAAM,SAAS,CAAC,GAAG,CAAC,WACtB,CAEA,GAAI,AAAwB,MAAxB,EAAE,GAAG,CAAC,WAAW,GAAY,CAC/B,IAAM,EAAc,IAAI,OAAO,OAAO,GAChC,EAAW,EAAc,EACzB,EAAgB,SAAS,cAAc,CAAC,iBAY9C,GAXA,EAAc,SAAS,CAAC,MAAM,CAAC,aAC/B,EAAc,SAAS,CAAC,GAAG,CAAC,YAC5B,+CAA+C;AAC/C,EAAU,EAAsB,KAAK,CAAE,MAEvC,WAAW,KACP,uCAAuC;AACvC,EAAc,SAAS,CAAC,MAAM,CAAC,YAC/B,EAAc,SAAS,CAAC,GAAG,CAAC,YAChC,EAAG,KAEC,AAAgB,IAAhB,EAAmB,CACnB,EAAU,IAAI,CAAC,GAGX,EAAU,MAAM,CAAG,GACnB,EAAU,KAAK,GAGnB,IAAM,EAAkB,EAAU,MAAM,CAAC,CAAC,EAAK,IAAQ,EAAM,EAAK,GAAK,EAAU,MAAM,CACjF,EAAM,SAAS,IAAQ,GAGvB,EAAe,SAAS,cAAc,CAAC,SACvC,EAAoB,SAAS,cAAc,CAAC,cAC5C,EAAc,SAAS,cAAc,CAAC,eAExC,GAAc,CAAA,EAAa,KAAK,CAAG,EAAI,OAAO,CAAC,EAAA,EAC/C,GAAmB,CAAA,EAAkB,SAAS,CAAG,EAAI,OAAO,CAAC,EAAjE,EACI,GAAa,CAAA,EAAY,KAAK,CAAG,EAAI,OAAO,CAAC,EAAjD,CACJ,CAEA,EAAc,CAClB,CACA,GAQA,6CAA6C;AAC7C,OAAO,gBAAgB,CAAC,QAAS,AAAC,IAmBhC,GAlBc,MAAV,EAAE,GAAG,GACL,EAAgB,CAAA,EAChB,EAAa,SAAS,CAAG,UACzB,EAAa,SAAS,CAAC,MAAM,CAAC,aAE9B,AAnQN,SAA8B,CAAK,EAC/B,IAAM,EAAK,SAAS,aAAa,CAAC,KAClC,CAAA,EAAG,WAAW,CALP,AAK8B,EALxB,GAAG,CAAC,AAAA,GAAU,AAAU,IAAV,EAAc,IAAM,KAAM,IAAI,CAAC,IAOlD,EAAU,UAAU,CAExB,EAAU,YAAY,CAAC,EAAI,EAAU,UAAU,EAG/C,EAAU,WAAW,CAAC,EAE9B,EAwP2B,GACrB,EAAkB,GAGd,IACF,2BAA2B;AAC3B,qBAAqB;AACrB,EAAmB,CAAA,EACnB,EAAwB,OAAO,CAAG,CAAA,GAEpC,EAAY,CAAA,GAGZ,AAAU,MAAV,EAAE,GAAG,CAAU,CACf,IAAM,EAAQ,SAAS,cAAc,CAAC,YACtC,EAAM,SAAS,CAAC,MAAM,CAAC,YACvB,EAAM,SAAS,CAAC,GAAG,CAAC,YAC1B,CACA,GAGA,kCAAkC;AAClC,oCAAoC;AACpC,SAAS,cAAc,CAAC,gBAAgB,gBAAgB,CAAC,QAAS,WAE9D,EADA,YAAc,AA5LlB,SAAsB,CAAG,CAAE,EAAa,CAAC,EACrC,mDAAmD;AACnD;;;;;;;;;KASC,EAED,8DAA8D;AAC9D,GAAI,CAAC,EAAI,KAAK,CAAC,AAAA,GAAO,AAAQ,IAAR,GAAa,AAAQ,IAAR,GACjC,MAAM,AAAI,MAAM,8CAGlB,oEAAmE;AACnE,IAAM,EAAY,IAAI,EAAI,CAGpB,EAAgB,EAAE,CAExB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAY,IAAK,CACnC,IAAM,EAAc,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAI,MAAM,EACzD,EAAc,IAAI,CAAC,EACrB,CAOA,OALA,4CAA4C;AAC5C,EAAc,OAAO,CAAC,AAAA,IACpB,CAAS,CAAC,EAAM,CAAG,EAAI,CAAS,CAAC,EAAM,AACzC,GAEO,EACT,EAyJ6B,EAAc,WAAa,GAE1D,GAuBA,YAAY,gBAAgB,CAAC,QAAS,KAClC,EAAU,SAAS,CAAG,EAC1B,G,I,E,C,EGhfA,EAAiB,IAAA,IAAoB,kCAAA,YAAA,GAAA,EAAmC,QAAQ,G,I,E,C,ECAhF,EAAiB,IAAA,IAAoB,kCAAA,YAAA,GAAA,EAAmC,QAAQ,GJsfhF,SAAS,gBAAgB,CAAC,mBAAoB,WAC1C,IAAM,EAAoB,SAAS,cAAc,CAAC,qBAElD,EAAkB,gBAAgB,CAAC,QAAS,WACxC,IAAM,EAAa,IAAI,CAAC,aAAa,CAAC,OAElC,EAAW,GAAG,CAAC,QAAQ,CAAC,IACxB,EAAW,GAAG,CAAG,EACjB,EAAwB,EACxB,QAAQ,GAAG,CAAC,sCAEZ,EAAW,GAAG,CAAG,EACjB,EAAwB,EACxB,QAAQ,GAAG,CAAC,iCAEpB,EACJ,GAQA,MAAM,EAAa,SAAS,cAAc,CAAC,YAC3C,EAAW,gBAAgB,CAAC,QAN5B,0BAA0B;AAC1B,WACI,OAAO,IAAI,CAAC,IAAI,GAAI,QAAS,uBAAwB,QAAQ,eACjE,CAAE,wBAAwB;CK5gB1B,6BAA4B;AAC5B,6DAA6D;AAI7D,MAAM,EAAe,GAAK,CAAA,OAAO,YAAY,EAAI,OAAO,kBAAiB,AAAjB,EAExD,IAAI,EAAY,KACZ,EAAW,EAAE,AADK,oCAAmC;AAGzD,MAAM,EAAY,EAAE,CACpB,IAAI,EAAwB,KACxB,GAAY,CAAA,CAyEhB,4DAA2D;AAC3D,SAAS,KACL,mEAAmE;AAC/D,CAAC,IAAa,EAAU,MAAM,CAAG,IACjC,EAAwB,EAAU,KAAK,GACvC,KAAK,SAAS,CAAC,KAAK,CAAC,OACrB,GAAa,GAErB,CA0JA,6IAA6I;AAC7I,sBAAsB;AACtB,eAAe,GAAa,CAAQ,EAChC,GAAY,CAAA,EA3BZ,EAAS,OAAO,CAAC,cACjB,EAAW,EAAE,CACb,iBAAmB,EACnB,EAAY,EAAa,WAAW,CACpC,YAAc,EA0Bd,GAAI,CACA,IAAM,EAAO,IAAI,KAAK,EAAW,2CAA0C;AAC3E,EAAoB,EAEpB,+BAA+B;AAC/B,EAAK,MAAM,CAAC,OAAO,CAAC,AAAA,IAChB,IAAI,EAAmB,EACvB,EAAM,KAAK,CAAC,OAAO,CAAC,AAAA,IAChB,GAAI,EAAK,KAAK,CAAG,EACb,GAAoB,EAAK,KAAK,CAC9B,EAAK,KAAK,CAAG,OACV,GAAI,EAAmB,EAAG,CAC7B,IAAM,EAAa,KAAK,GAAG,CAAC,EAAK,KAAK,CAAE,CAAC,EAAoB,qCAAoC;AACjG,EAAK,KAAK,EAAI,EACd,GAAoB,CACxB,CACJ,EACJ,GAEA,QAAQ,GAAG,CAAC,eAAgB,GAC5B,IAAM,EAAQ,EAAK,MAAM,CAAC,EAAE,CAG5B,GAFA,KAAK,SAAS,CAAC,KAAK,GAEhB,CAAC,EAAY,CACb,QAAQ,IAAI,CAAC,6BACb,MACJ,CAEA,IAAM,EAAS,EAAK,MAAM,CAAC,MAAM,EAAI,EAAK,MAAM,CAAC,MAAM,CAAC,EAAE,CAAI,EAAK,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,CAAG,IACpF,EAAe,EAAK,MAAM,CAAC,GAAG,CAC9B,EAAa,IAAY,EAAS,CAFuD,kDAAiD;AAIhJ,EAAM,KAAK,CAAC,OAAO,CAAC,CAAC,EAAM,KACvB,IAAM,EAAS,EAAK,KAAK,CAAG,CACR,CAAA,EAAK,KAAK,CAC9B,AAzDZ,kCAAkC;AAClC,uBAAuB;AACvB,SAAsB,CAAI,CAAE,CAAM,CAAE,CAAK,MA9HrB,MACZ,EA8HJ,IAAM,GA/HU,EA+HO,EAAK,QAAQ,CA9HhC,EAAQ,CAAA,EAAC,AA8HqC,CAAA,IAAH,CAAG,EA9HnB,CAAgB,EAEvC,AADK,CAAA,KAAK,GAAG,CA6HqB,EA7HX,KAAK,GAAG,CA6HA,EA7HU,IA6HV,CA7HyB,EAC/C,EA4H8B,GACzC,EAAgB,EAAY,EAAS,IAErC,EAAY,WAAW,KACzB,EAAW,IAAI,CAAC,CAAC,IAAM,EAAK,IAAI,CAAE,EAAI,EACtC,gGAAgG;AAChG,iBAAmB,EAAQ,CAC3B,6DAA4D;AAChE,EAAI,AAAA,CAAA,EAAgB,EAAa,WAAU,AAAV,EAAe,KAChD,EAAS,IAAI,CAAC,EAClB,EA4CyB,EAAM,EAAQ,EAC/B,GAEA,IAAM,EAAc,EAAM,aAAa,CAAG,CACf,CAAA,EAAM,aAAa,CAC9C,QAAQ,GAAG,CAAC,CAAC,YAAY,EAAE,EAAY,GAAG,CAAC,EAC3C,QAAQ,GAAG,CAAC,CAAC,sBAAsB,EAAE,EAAM,aAAa,CAAG,EAAY,IAAK,EAAE,CAAC,EAC/E,WAAW,KA2Cf,yBAAyB;AACzB,GAAY,CAAA,EAGR,EAAU,MAAM,CAAG,EACnB,KAGA,GAAa,EAjDb,EAAG,EAEP,CAAE,MAAO,EAAO,CACZ,QAAQ,KAAK,CAAC,8BAA+B,EAAM,OAAO,CAC9D,CACJ,CA3RA,0BAA0B;AAC1B,oBAAoB;AACpB,qEAAqE;AACrE,oDAAoD;AACpD,4BAA4B;AAC5B,sBAAsB;AACtB,sEAAsE;AACtE,iEAAiE;AACjE,eAAe;AACf,0EAA0E;AAC1E,kDAAkD;AAClD,QAAQ;AACR,MAAM;AAGN,8BAA8B;AAC9B,8CAA8C;AAC9C,OAAO,gBAAgB,CAAC,gBAExB,SAA2B,CAAK,EAC5B,iBAAiB;AACjB,iDAAiD;AACrD,GAyEA,sBAAsB;AACtB,UAAU,iBAAiB,GAAG,IAAI,CAElC,SAAuB,CAAU,EAC7B,IAAM,EAAU,MAAM,IAAI,CAAC,EAAW,OAAO,CAAC,MAAM,IACpD,GAAI,AAAmB,IAAnB,EAAQ,MAAM,CAAQ,CACtB,QAAQ,IAAI,CAAC,yBACb,MACJ,EACA,AAOJ,SAA6B,CAAO,EAChC,IAAM,EAAS,SAAS,cAAc,CAAC,eACvC,EAAQ,OAAO,CAAC,CAAC,EAAQ,KACrB,IAAM,EAAS,SAAS,aAAa,CAAC,SACtC,CAAA,EAAO,KAAK,CAAG,EACf,EAAO,IAAI,CAAG,EAAO,IAAI,CACzB,EAAO,WAAW,CAAC,EACvB,GACA,EAAO,gBAAgB,CAAC,SAAU,AAAC,IAC/B,EAAa,CAAO,CAAC,EAAM,MAAM,CAAC,KAAK,CAAC,AAC5C,GACA,EAAa,CAAO,CAAC,EAAE,AAC3B,EAnBwB,EACxB,EAEA,WACI,QAAQ,KAAK,CAAC,sCAClB,GA3B+B,cAAvB,EAAa,KAAK,EAClB,EAAa,MAAM,GA8P3B,sEAAsE;AACtE,YAAY,KACR,AA/RJ,yCAAyC;AACzC,CAAA,WACI,GAAI,AAAA,EAAY,wBAAwB,GAAI,CACxC,IAAM,EAAO,AAAA,EAAY,WAAW,GAAG,MAAM,AAAE,6CAA4C;AAC3F,EAAU,IAAI,CAAC,GACf,AAAA,EAAY,aAAa,GAGpB,IACD,IAER,CACJ,CAAA,IAoRI,IACJ,EAAG,KA8BH,MAAM,GAAiB,SAAS,cAAc,CAAC,gBAC/C,GAAe,gBAAgB,CAAC,QA9B/B,+DAA+D;AAGhE,oFAAoF;AACpF,4BAA4B;AAC5B,wEAAwE;AACxE,MAAM;AAGN,mCAAmC;AACnC,WACI,GAAI,CAAC,EAAmB,CACpB,QAAQ,KAAK,CAAC,wCACd,MACJ,CAEA,IAAM,EAAW,IAAI,KAAK,CAAC,EAAkB,CAAE,CAAE,KAAM,YAAa,GAC9D,EAAM,IAAI,eAAe,CAAC,GAE1B,EAAe,SAAS,aAAa,CAAC,IAC5C,CAAA,EAAa,IAAI,CAAG,EACpB,EAAa,QAAQ,CAAG,kBACxB,SAAS,IAAI,CAAC,WAAW,CAAC,GAC1B,EAAa,KAAK,GAClB,SAAS,IAAI,CAAC,WAAW,CAAC,GAE1B,IAAI,eAAe,CAAC,EACxB,GCxGA,kBAAkB;AAClB,IAAI,GArRW,AAAC,IACZ,gBAAgB;AAChB,EAAE,YAAY,CAAG,SAAS,CAAK,EAC3B,IAAM,EAAO,EAAM,MAAM,CAAC,KAAK,CAAC,EAAE,CAClC,GAAI,EAAM,CACN,IAAM,EAAS,IAAI,UAAe,qBAAoB;AACtD,EAAO,MAAM,CAAG,SAAS,CAAC,EACtB,IAAM,EAAc,EAAE,MAAM,CAAC,MAAM,CACnC,EAAE,SAAS,CAAC,EAAe,sCAAqC;AACpE,EACA,EAAO,iBAAiB,CAAC,EAC7B,CACJ,EAEA,2CAA2C;AAC3C,EAAE,SAAS,CAAG,SAAS,CAAW,CAAE,EAAU,CAAA,CAAK,EAC/C,+CAA+C;AAC/C,GAAI,AAAuB,UAAvB,OAAO,GAA4B,EAAY,UAAU,CAAC,QAAS,CACnE,QAAQ,KAAK,CAAC,iDACd,MAAS,uBAAsB;AACnC,CAEA,GAAI,CACA,IAAM,EAAO,IAAI,KAAK,EAAe,2DAA0D;AAE/F,+BAA+B;AAC/B,EAAK,MAAM,CAAC,OAAO,CAAC,AAAA,IAChB,IAAI,EAAmB,EACvB,EAAM,KAAK,CAAC,OAAO,CAAC,AAAA,IAChB,GAAI,EAAK,KAAK,CAAG,EACb,GAAoB,EAAK,KAAK,CAC9B,EAAK,KAAK,CAAG,OACV,GAAI,EAAmB,EAAG,CAC7B,IAAM,EAAa,KAAK,GAAG,CAAC,EAAK,KAAK,CAAE,CAAC,EAAoB,qCAAoC;AACjG,EAAK,KAAK,EAAI,EACd,GAAoB,CACxB,CACJ,EACJ,GAEA,EAAE,aAAa,CAAG,EAAK,MAAM,CAAC,GAAG,CAAC,AAAA,IAC1B,GACA,EAAM,KAAK,CAAC,OAAO,CAAC,AAAA,IAChB,QAAQ,GAAG,CAAC,EAChB,GAEG,CACH,MAAO,EAAM,KAAK,CAAC,GAAG,CAAC,AAAA,GACZ,CAAA,CACH,MAAO,EAAK,IAAI,CAChB,UAAW,EAAK,IAAI,CACpB,QAAS,EAAK,IAAI,CAAG,EAAK,QAAQ,CAClC,SAAU,EAAK,QAAQ,AAAC,sCAAsC;QAClE,CAAA,EAER,GAER,CAAE,MAAO,EAAO,CACZ,QAAQ,KAAK,CAAC,0CAA2C,EAAM,OAAO,CAC1E,CACJ,EACA,0DAA0D;AAC1D,gEAAgE;AAEhE,mDAAmD;AACnD,oDAAoD;AACpD,4BAA4B;AAC5B,gDAAgD;AAChD,yCAAyC;AACzC,wBAAwB;AACxB,uBAAuB;AACvB,oCAAoC;AACpC,wCAAwC;AACxC,sDAAsD;AACtD,iFAAiF;AACjF,iBAAiB;AACjB,eAAe;AACf,UAAU;AACV,IAAI;AAEJ,iCAAiC;AACjC,EAAE,SAAS,CAAG,GACd,EAAE,YAAY,CAAG,EACjB,EAAE,SAAS,CAAG,GACd,EAAE,gBAAgB,CAAG,GACrB,EAAE,aAAa,CACf,EAAE,aAAa,CAAG,CAAA,EAClB,EAAE,cAAc,CAAG,CAAA,EACnB,EAAE,KAAK,CAAG,IACV,EAAE,MAAM,CAAG,IACX,EAAE,cAAc,CAAG,GACnB,EAAE,QAAQ,CAAG,IACb,EAAE,QAAQ,CAAG,IAEb,EAAE,YAAY,CAAG,CACb,GAAI,qBACJ,GAAI,OACJ,GAAI,aACJ,GAAI,QACJ,GAAI,OACJ,GAAI,iBACJ,GAAI,YACJ,GAAI,eACJ,GAAI,WACJ,GAAI,cACJ,GAAI,UACJ,GAAI,aACJ,GAAI,UACJ,GAAI,SACJ,GAAI,QACJ,GAAI,WACJ,GAAI,OACJ,GAAI,gBAKR,EAGA,YAAY;AACZ,EAAE,KAAK,CAAG,WAEN,EAAE,YAAY,CAAC,EAAE,KAAK,CAAE,EAAE,MAAM,EAAE,MAAM,CAAC,qBACzC,2EAA0E;AAC1E,6CAA6C;AAC7C,6FAA6F;AAC7F,gHAAgH;AAChH,kBAAkB;AAClB,uDAAuD;AACvD,iDAAiD;AAErD,EAEA,EAAE,IAAI,CAAG,WACL,EAAE,UAAU,CAAC,QAEb,EAAE,YAAY,CNiSX,CM9RH,mCAAkC;AAClC,IAAM,EDrDH,ECsDC,GACA,EAAE,SAAS,CAAC,GAGhB,IAAI,EAAI,EAAI,EAAE,QAAQ,CAClB,EAAI,EAAI,EAAE,QAAQ,CACtB,8BAA8B;AAC9B,EAAE,gBAAgB,CAAC,EAAE,YAAY,CAAE,EAAG,EAAG,EAAE,KAAK,CAAE,EAAE,KAAK,EACrD,EAAE,aAAa,EACf,EAAE,SAAS,CAAC,EAAE,aAAa,CAAC,EAAE,CAAC,KAAK,CAAE,EAAG,EAAG,EAAE,KAAK,CAAE,EAAE,KAAK,EAEhE,EAAE,IAAI,CAAC,IAAK,IAEZ,uCAAuC;AACvC,EAAE,MAAM,CAAC,SACT,IAAM,EAAe,EAAE,KAAK,CAAI,CAAA,EAAE,SAAS,CAAG,EAAI,EAAE,YAAW,AAAX,EACpD,IAAK,IAAI,EAAI,EAAG,EAAI,EAAE,KAAK,CAAE,GAAK,EAC9B,EAAE,IAAI,CAAC,EAAI,EAAE,QAAQ,CAAE,EAAG,EAAI,EAAE,QAAQ,CAAE,EAAE,MAAM,EAEtD,gCAAgC;AAChC,EAAE,MAAM,CAAC,sBACT,EAAE,YAAY,CAAC,KACf,IAAM,EAAe,EAAE,KAAK,CAAI,CAAA,EAAE,SAAS,CAAG,CAAA,EAC9C,IAAK,IAAI,EAAI,EAAG,EAAI,EAAE,KAAK,CAAE,GAAK,EAC9B,EAAE,IAAI,CAAC,EAAI,EAAE,QAAQ,CAAE,EAAG,EAAI,EAAE,QAAQ,CAAE,EAAE,MAAM,EAEtD,+BAA+B;AAC/B,EAAE,MAAM,CAAC,gBACT,EAAE,YAAY,CAAC,IACf,IAAM,EAAc,EAAE,KAAK,CAAI,CAAA,EAAE,SAAS,CAAI,EAAA,EAC9C,IAAK,IAAI,EAAI,EAAG,EAAI,EAAE,KAAK,CAAE,GAAK,EAC9B,EAAE,IAAI,CAAC,EAAI,EAAE,QAAQ,CAAE,EAAG,EAAI,EAAE,QAAQ,CAAE,EAAE,MAAM,EAEtD,EAAE,SAAS,EACf,EAEA,6CAA6C;AAC7C,EAAE,gBAAgB,CAAG,SAAS,CAAY,CAAE,CAAC,CAAE,CAAC,CAAE,CAAK,CAAE,CAAM,EAC3D,IAAM,EAAgB,EAAa,MAAM,CAEzC,EAAE,IAAI,GACN,EAAE,SAAS,CAAC,EAAG,GACf,IAAI,EAAY,EAAQ,EACpB,EAAa,EAAS,EAAE,SAAS,CACrC,EAAa,OAAO,CAAC,SAAS,CAAG,CAAE,CAAK,EACpC,GAAI,AAAQ,IAAR,EAAW,CACX,IAAI,EAAY,EAAE,KAAK,CAAC,IAAK,IAAK,GAAI,IAAM,eAAc;AAC1D,EAAE,IAAI,CAAC,GACP,EAAE,IAAI,CAAC,EAAY,EAAO,EAAG,EAAW,EAC5C,CACJ,GACA,EAAE,GAAG,EACT,EAGA,qCAAqC;AACrC,EAAE,SAAS,CAAG,SAAS,CAAK,CAAE,CAAC,CAAE,CAAC,CAAE,CAAK,CAAE,CAAM,EAC7C,IAAM,EAAgB,EAAE,aAAa,CAAC,MAAM,CAAC,CAAC,EAAK,KAC/C,IAAM,EAAW,EAAI,KAAK,CAAC,GAAG,CAAC,AAAA,GAAQ,EAAK,OAAO,EACnD,OAAO,KAAK,GAAG,CAAC,KAAQ,EAC5B,EAAG,GAEH,EAAE,IAAI,GACN,EAAE,SAAS,CAAC,EAAG,GACf,IAAI,EAAY,EAAE,KAAK,CAAG,EACtB,EAAa,EAAE,MAAM,CAAG,EAAE,SAAS,AADE,2CAA0C;AAEnF,EAAM,OAAO,CAAC,SAAS,CAAI,EAEvB,IAAI,EAAY,EAAE,KAAK,CAAC,IAAK,EAAG,IAAK,AAAgB,IAAhB,EAAK,QAAQ,EAClD,EAAE,MAAM,CAAC,SACT,EAAE,YAAY,CAAC,IACf,EAAE,IAAI,CAAC,GACP,EAAE,IAAI,CAAC,AALe,GAKG,EAAY,EAAK,SAAS,CAAE,EAAE,MAAM,CAAG,EAAc,CAAA,EAAK,KAAK,CAAG,EAAE,gBAAe,AAAf,EACzF,EAAa,CAAA,EAAK,OAAO,CAAG,EAAK,SAAS,AAAT,EANf,GAM6C,EACvE,GACA,EAAE,GAAG,EACT,EAEA,eAAe;AACf,EAAE,YAAY,CAAG,WAET,EAAE,GAAG,CAAC,EAAE,MAAM,CAAG,EAAE,KAAK,EAAI,EAAE,cAAc,EAC5C,CAAA,EAAE,aAAa,CAAG,CAAA,CADtB,EAII,EAAE,GAAG,CAAC,EAAE,MAAM,CAAG,EAAE,MAAM,EAAI,EAAE,cAAc,EAC7C,CAAA,EAAE,cAAc,CAAG,CAAA,CADvB,CAGJ,EAEA,EAAE,YAAY,CAAG,WAET,EAAE,aAAa,EACf,CAAA,EAAE,KAAK,CAAG,EAAE,MAAM,AAAN,EAGZ,EAAE,cAAc,EAChB,CAAA,EAAE,MAAM,CAAG,EAAE,MAAM,AAAN,EAEjB,+CAA+C;AAC/C,EAAE,YAAY,CAAC,EAAE,KAAK,CAAE,EAAE,MAAM,CACpC,EAEA,EAAE,aAAa,CAAG,WACd,uBAAuB;AACvB,EAAE,aAAa,CAAG,CAAA,EAClB,EAAE,cAAc,CAAG,CAAA,CACvB,EAEA,EAAE,SAAS,CAAG,WACV,GAAI,EAAE,MAAM,CAAG,EAAE,QAAQ,EAAI,EAAE,MAAM,CAAG,EAAE,KAAK,CAAG,EAAE,QAAQ,EAAI,EAAE,MAAM,CAAG,GAAK,EAAE,MAAM,CAAG,EAAE,MAAM,CAAE,CACjG,IAAM,EAAa,EAAE,MAAM,CAAG,EAAE,SAAS,CACnC,EAAU,KAAK,KAAK,CAAC,AAAC,CAAA,EAAE,MAAM,CAAG,EAAE,MAAK,AAAL,EAAU,GAC7C,EAAW,SAAS,OAAO,IAAI,CAAC,EAAE,YAAY,CAAC,CAAC,EAAQ,EAE9D,GAAI,GAAY,EAAE,gBAAgB,EAAI,AAAY,IAAZ,EAAgB,CAClD,IAAM,EAAW,EAAE,YAAY,CAAC,EAAS,CACnC,EAAa,EAAE,SAAS,CAAC,GAAY,GAGvC,EAAS,EAAE,MAAM,CAAG,CACpB,CAAA,EAAE,MAAM,CAAI,AAAA,CAAA,EAAE,KAAK,CAAG,EAAE,QAAO,AAAP,EAAY,GACpC,CAAA,EAAS,EAAE,MAAM,CAAG,EAAa,CAAA,EAGrC,EAAE,IAAI,CAAC,KACP,EAAE,IAAI,CAAC,EAAQ,EAAE,MAAM,CAAE,EAAY,IACrC,EAAE,IAAI,CAAC,GACP,EAAE,IAAI,CAAC,EAAU,EAAS,EAAG,EAAE,MAAM,CAAG,GAC5C,CACJ,CACJ,CACJ,GC1RA,uCAAuC;AAEvC,KAAK,gBAAgB,CAAC,UAAW,SAAS,CAAK,EAC3C,IAAM,EAAO,EAAM,IAAI,AAEN,CAAA,cAAb,EAAK,GAAG,EACR,AAKR,iIAAiI;AACjI,oCAAoC;AAEpC,mEAAmE;AACnE,oDAAoD;AAEpD,wBAAwB;AACxB,0BAA0B;AAC1B,qBAAqB;AACrB,iDAAiD;AACjD,aAAa;AACb,iCAAiC;AACjC,4BAA4B;AAC5B,wBAAwB;AACxB,sCAAsC;AACtC,oCAAoC;AACpC,iDAAiD;AACjD,aAAa;AACb,SAAS;AAET,+BAA+B;AAC/B,gDAAgD;AAChD,sBAAsB;AACtB,uDAAuD;AACvD,iEAAiE;AACjE,kEAAkE;AAClE,SAAS;AACT,wBAAwB;AACxB,0CAA0C;AAC1C,2DAA2D;AAC3D,UAAU;AACV,IAAI;AAGJ,SAA2B,CAAK,CAAE,CAAG,CAAE,CAAgB,CAAE,CAAY,CAAE,CAAe,CAAE,CAAM,CAAE,CAAS,CAAE,CAAgB,EACvH,GAAI,CAAC,EAAiB,OAEtB,IAAM,EAAW,CAAC,OAAO,EAAE,EAAO,CAAC,EAAE,EAAU,WAAW,CAAC,CAC3D,QAAQ,GAAG,CAAC,sBAAuB,GAEnC,IAAM,EAAU,CACZ,OAAQ,OACR,QAAS,CACL,eAAgB,kBACpB,EACA,KAAM,KAAK,SAAS,CAAC,CACjB,MAAO,EACP,IAAK,EACL,KAAM,EACN,OAAQ,EACR,iBAAkB,CACtB,EACJ,EAEA,MAAM,EAAU,GACf,IAAI,CAAC,AAAA,GAAY,EAAS,IAAI,GAAK,wBAAwB;AAC5D,6IAA6I;AAC7I,yFAAyF;CACxF,IAAI,CAAC,AAAA,IACF,GAAI,EAAK,OAAO,CAAE,CACd,QAAQ,GAAG,CAAC,+BACZ,uFAAsF;AACtF,IAAM,EAAgB,KAAK,EAAK,IAAI,EAC9B,EAAW,IAAI,WAAW,EAAc,MAAM,EAAE,GAAG,CAAC,CAAC,EAAG,IAAM,EAAc,UAAU,CAAC,IAE7F,QAAQ,GAAG,CAAC,6BAA8B,EAAS,MAAM,EACzD,KAAK,WAAW,CAAC,CAAC,KAAM,iBAAkB,KAAM,CAAQ,EAC5D,MACI,QAAQ,IAAI,CAAC,EAAK,OAAO,EACzB,KAAK,WAAW,CAAC,CAAC,KAAM,QAAS,MAAO,AAAI,MAAM,EAAK,OAAO,CAAC,EAEvE,GACC,KAAK,CAAC,AAAA,IACH,QAAQ,KAAK,CAAC,SAAU,GACxB,KAAK,WAAW,CAAC,CAAC,KAAM,QAAS,MAAO,CAAK,EACjD,EACJ,EAjF0B,EAAK,KAAK,CAAE,EAAK,GAAG,CAAE,EAAK,gBAAgB,CAAE,EAAK,YAAY,CAAE,EAAK,eAAe,CAAE,EAAK,MAAM,CAAE,EAAK,SAAS,CAAE,EAAK,gBAAgB,CAElK,ECRA,4CAA2C;AAE3C,IAAI,GAAa,EAAE,AAAG,yCAAwC;AAE9D,KAAK,gBAAgB,CAAC,UAAW,SAAS,CAAK,EAC3C,IAAM,EAAO,EAAM,IAAI,CAEvB,OAAQ,EAAK,GAAG,EACZ,IAAK,UACD,GAAW,IAAI,CAAC,EAAK,KAAK,EAC1B,KACJ,KAAK,UACD,qDAAqD;AACrD,IAAM,EAAY,GAAW,KAAK,EAAK,sBAAqB;AAC5D,KAAK,WAAW,CAAC,CAAE,IAAK,YAAa,MAAO,CAAU,EAG9D,CACJ,EZJA,gCAA+B;AAC/B,+BAA+B;A,2D","sources":["<anon>","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-f8442e8ad63f0174.js","node_modules/@parcel/runtime-js/lib/runtime-8e1599c615bd8795.js","node_modules/@parcel/runtime-js/lib/runtime-bdde62efd4a3ccd1.js","node_modules/@parcel/runtime-js/lib/runtime-954f2bf319a3fbeb.js","node_modules/@parcel/runtime-js/lib/runtime-0cf58a6034a4c052.js","node_modules/@parcel/runtime-js/lib/runtime-ec8e94f8ff399622.js","node_modules/@parcel/runtime-js/lib/runtime-e129097766b9a75e.js","node_modules/@parcel/runtime-js/lib/runtime-d9e8900eadbd3da0.js","node_modules/@parcel/runtime-js/lib/runtime-4f245d2bad27101a.js","node_modules/@parcel/runtime-js/lib/runtime-1b180346fa9ca2a1.js","node_modules/@parcel/runtime-js/lib/runtime-d6bbf73ff723505b.js","node_modules/@parcel/runtime-js/lib/runtime-fba15397fd30df36.js","node_modules/@parcel/runtime-js/lib/runtime-7d5ed2a10f3d0d32.js","node_modules/@parcel/runtime-js/lib/runtime-7a22942484546d25.js","node_modules/@parcel/runtime-js/lib/runtime-011c0dd2b0a2ae34.js","node_modules/@parcel/runtime-js/lib/runtime-468755018eaeaf24.js","node_modules/@parcel/runtime-js/lib/runtime-13ed67e7b192d798.js","node_modules/@parcel/runtime-js/lib/runtime-bc015cc38243a969.js","node_modules/@parcel/runtime-js/lib/runtime-785619dc753b0498.js","node_modules/@parcel/runtime-js/lib/runtime-cdbebb7b0222286c.js","node_modules/@parcel/runtime-js/lib/runtime-f9389cd1d9ae5568.js","node_modules/@parcel/runtime-js/lib/runtime-45b3d636d1f6b43a.js","node_modules/@parcel/runtime-js/lib/runtime-265d8272692c6bc7.js","node_modules/@parcel/runtime-js/lib/runtime-c7edcbbb69f82e0c.js","node_modules/@parcel/runtime-js/lib/runtime-489d792bc2675efb.js","node_modules/@parcel/runtime-js/lib/runtime-b2db8591b4569737.js","node_modules/@parcel/runtime-js/lib/runtime-7fbf67fe2b90a083.js","node_modules/@parcel/runtime-js/lib/runtime-b3f68afff2bfb3f5.js","node_modules/@parcel/runtime-js/lib/runtime-2880a87097189869.js","node_modules/@parcel/runtime-js/lib/runtime-11fbe75be1990f6b.js","node_modules/@parcel/runtime-js/lib/runtime-45ad39003e2f8491.js","node_modules/@parcel/runtime-js/lib/runtime-48db69858f9b459d.js","node_modules/@parcel/runtime-js/lib/runtime-94d2cfe01ae8d5cb.js","node_modules/@parcel/runtime-js/lib/runtime-16affe5218ae52c5.js","node_modules/@parcel/runtime-js/lib/runtime-67bb74f39b9a53b8.js","node_modules/@parcel/runtime-js/lib/runtime-c22a8d23078eff7e.js","node_modules/@parcel/runtime-js/lib/runtime-cd772e40bb2bde52.js","node_modules/@parcel/runtime-js/lib/runtime-7c5d6f598c4057bb.js","node_modules/@parcel/runtime-js/lib/runtime-60e326aeae3fcd32.js","node_modules/@parcel/runtime-js/lib/runtime-a0a8d51ac8fd8a45.js","node_modules/@parcel/runtime-js/lib/runtime-be00d4c360c77bf1.js","node_modules/@parcel/runtime-js/lib/runtime-2c521b315cc57dcf.js","node_modules/@parcel/runtime-js/lib/runtime-a1fd47021d2d8442.js","node_modules/@parcel/runtime-js/lib/runtime-f785dbe57aba74d5.js","node_modules/@parcel/runtime-js/lib/runtime-90016ebbab122d94.js","node_modules/@parcel/runtime-js/lib/runtime-c3c5eec2c403b75d.js","node_modules/@parcel/runtime-js/lib/runtime-cd4cb962c9836cc2.js","node_modules/@parcel/runtime-js/lib/runtime-6530832f2851bf4b.js","node_modules/@parcel/runtime-js/lib/runtime-9637eadd5b896398.js","node_modules/@parcel/runtime-js/lib/runtime-891a00a7fcf0ede1.js","node_modules/@parcel/runtime-js/lib/runtime-e0d891c56ef01b80.js","node_modules/@parcel/runtime-js/lib/runtime-0f42001fce01ce05.js","node_modules/@parcel/runtime-js/lib/runtime-f31a5c4174892fe0.js","node_modules/@parcel/runtime-js/lib/runtime-d932536386abe993.js","node_modules/@parcel/runtime-js/lib/runtime-d6f792a5928dbaff.js","node_modules/@parcel/runtime-js/lib/runtime-ca59c2a100b5c2d4.js","node_modules/@parcel/runtime-js/lib/runtime-780c37329a8779d6.js","node_modules/@parcel/runtime-js/lib/runtime-72bbb3d6e9a7afdc.js","node_modules/@parcel/runtime-js/lib/runtime-508fe97441c55a9f.js","node_modules/@parcel/runtime-js/lib/runtime-639a79b5617efdd1.js","node_modules/@parcel/runtime-js/lib/runtime-b51748e3cd21e397.js","node_modules/@parcel/runtime-js/lib/runtime-e765a673dcfd2c22.js","node_modules/@parcel/runtime-js/lib/runtime-97e981c2ebe2ab8e.js","node_modules/@parcel/runtime-js/lib/runtime-bcb7a3191429c451.js","node_modules/@parcel/runtime-js/lib/runtime-ad18cc79a70aee5f.js","node_modules/@parcel/runtime-js/lib/runtime-292e849b76ea457c.js","node_modules/@parcel/runtime-js/lib/runtime-2dddcf19637d8a11.js","node_modules/@parcel/runtime-js/lib/runtime-8c3878fedc25928a.js","node_modules/@parcel/runtime-js/lib/runtime-7eaf185c46c1d89f.js","node_modules/@parcel/runtime-js/lib/runtime-1ae50b08b2867e47.js","node_modules/@parcel/runtime-js/lib/runtime-f8dc226e70119bc3.js","node_modules/@parcel/runtime-js/lib/runtime-8c95ec38764be8fc.js","node_modules/@parcel/runtime-js/lib/runtime-80c9177ccbe12c09.js","node_modules/@parcel/runtime-js/lib/runtime-cc93f750a04dceaf.js","node_modules/@parcel/runtime-js/lib/runtime-ff9a9ee5fb62ebc8.js","node_modules/@parcel/runtime-js/lib/runtime-5b830c03af96cb13.js","node_modules/@parcel/runtime-js/lib/runtime-ed09545f7eee9a1c.js","node_modules/@parcel/runtime-js/lib/runtime-97f979c27e25fddb.js","node_modules/@parcel/runtime-js/lib/runtime-64aa2f8e321c2cce.js","node_modules/@parcel/runtime-js/lib/runtime-87588ba9a06a89ec.js","node_modules/@parcel/runtime-js/lib/runtime-dbc91585fa749cfd.js","node_modules/@parcel/runtime-js/lib/runtime-6d9779bd31bb5b7a.js","node_modules/@parcel/runtime-js/lib/runtime-bd4a3d65ae573f37.js","node_modules/@parcel/runtime-js/lib/runtime-8dfe472cdaa06081.js","node_modules/@parcel/runtime-js/lib/runtime-9663ea334afa40a6.js","node_modules/@parcel/runtime-js/lib/runtime-87c5868c16cc1906.js","node_modules/@parcel/runtime-js/lib/runtime-5b0346dff595bb46.js","node_modules/@parcel/runtime-js/lib/runtime-9891826cc3d508e1.js","node_modules/@parcel/runtime-js/lib/runtime-a14c46ecf68338a5.js","node_modules/@parcel/runtime-js/lib/runtime-bc850529ad0dc229.js","node_modules/@parcel/runtime-js/lib/runtime-a7629c2a50e500dc.js","node_modules/@parcel/runtime-js/lib/runtime-121b053279817734.js","node_modules/@parcel/runtime-js/lib/runtime-3e9fe6b072c60ee7.js","node_modules/@parcel/runtime-js/lib/runtime-f728e3734e718803.js","node_modules/@parcel/runtime-js/lib/runtime-5213ea37dfd7fd14.js","node_modules/@parcel/runtime-js/lib/runtime-9917aad08273cf49.js","node_modules/@parcel/runtime-js/lib/runtime-c6522d7a4747e2d9.js","node_modules/@parcel/runtime-js/lib/runtime-8b10d6cdd0ca73e0.js","node_modules/@parcel/runtime-js/lib/runtime-942d3f7ae7aaa1fe.js","node_modules/@parcel/runtime-js/lib/runtime-ff5faf3b745da2a5.js","node_modules/@parcel/runtime-js/lib/runtime-5e7c40c2ca6f6e38.js","node_modules/@parcel/runtime-js/lib/runtime-318ae7991db20831.js","node_modules/@parcel/runtime-js/lib/runtime-374d43d1c705df55.js","node_modules/@parcel/runtime-js/lib/runtime-42a488f7ae36779a.js","node_modules/@parcel/runtime-js/lib/runtime-3fce77fe584ab1fb.js","node_modules/@parcel/runtime-js/lib/runtime-eb4679052e7f26d4.js","node_modules/@parcel/runtime-js/lib/runtime-80cd2812df9ba063.js","node_modules/@parcel/runtime-js/lib/runtime-33bb23627ddb0d64.js","node_modules/@parcel/runtime-js/lib/runtime-6d4029b1d69fe9e6.js","src/js/main.js","src/js/drSampler.js","src/js/samples.js","src/js/globalFetch.js","src/js/interface.js","node_modules/@parcel/runtime-js/lib/runtime-572bbb054a3c0584.js","node_modules/@parcel/runtime-js/lib/helpers/get-worker-url.js","node_modules/@parcel/runtime-js/lib/runtime-0728af3b7ea8b0fc.js","node_modules/@parcel/runtime-js/lib/runtime-3e3b85fd1644aff2.js","src/js/midiBroadcast.js","src/js/pRoll.js","src/js/workers/workerAjax.js","src/js/workers/workerQueue.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequirefc44\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequirefc44\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"27Lyk\", function(module, exports) {\n\n$parcel$export(module.exports, \"register\", () => $18c11f3350a906ea$export$6503ec6e8aabbaf, (v) => $18c11f3350a906ea$export$6503ec6e8aabbaf = v);\nvar $18c11f3350a906ea$export$6503ec6e8aabbaf;\nvar $18c11f3350a906ea$export$f7ad0328861e2f03;\n\"use strict\";\nvar $18c11f3350a906ea$var$mapping = new Map();\nfunction $18c11f3350a906ea$var$register(baseUrl, manifest) {\n    for(var i = 0; i < manifest.length - 1; i += 2)$18c11f3350a906ea$var$mapping.set(manifest[i], {\n        baseUrl: baseUrl,\n        path: manifest[i + 1]\n    });\n}\nfunction $18c11f3350a906ea$var$resolve(id) {\n    var resolved = $18c11f3350a906ea$var$mapping.get(id);\n    if (resolved == null) throw new Error(\"Could not resolve bundle with id \" + id);\n    return new URL(resolved.path, resolved.baseUrl).toString();\n}\n$18c11f3350a906ea$export$6503ec6e8aabbaf = $18c11f3350a906ea$var$register;\n$18c11f3350a906ea$export$f7ad0328861e2f03 = $18c11f3350a906ea$var$resolve;\n\n});\n\nparcelRegister(\"lw8Mu\", function(module, exports) {\nmodule.exports = new URL(\"closed-hihat_1.c3598e64.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"1NuFb\", function(module, exports) {\nmodule.exports = new URL(\"closed-hihat_2.df9c6d68.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"e3CPn\", function(module, exports) {\nmodule.exports = new URL(\"closed-hihat_3.2e25a9fb.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"j8xcP\", function(module, exports) {\nmodule.exports = new URL(\"closed-hihat_4.546f9296.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"dfk0E\", function(module, exports) {\nmodule.exports = new URL(\"closed-hihat_5.84f49b25.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"1WnZU\", function(module, exports) {\nmodule.exports = new URL(\"closed-hihat_6.583c3a3d.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"1ITJB\", function(module, exports) {\nmodule.exports = new URL(\"closed-hihat_7.769c6d06.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"570Mo\", function(module, exports) {\nmodule.exports = new URL(\"closed-hihat_8.6911f924.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"amPri\", function(module, exports) {\nmodule.exports = new URL(\"closed-hihat_9.8e0b0ab6.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"fAaYz\", function(module, exports) {\nmodule.exports = new URL(\"closed-hihat_10.51d068e3.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"fPRLW\", function(module, exports) {\nmodule.exports = new URL(\"closed-hihat_11.8cabb786.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"kwhgF\", function(module, exports) {\nmodule.exports = new URL(\"closed-hihat_12.b1e4a2bf.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"e0iWv\", function(module, exports) {\nmodule.exports = new URL(\"open-hihat_1.1fa9c461.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"l6Y43\", function(module, exports) {\nmodule.exports = new URL(\"open-hihat_2.2f935a0f.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"fBSj4\", function(module, exports) {\nmodule.exports = new URL(\"open-hihat_3.ed4ec909.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"ajKwd\", function(module, exports) {\nmodule.exports = new URL(\"open-hihat_4.5364cb46.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"ck7JE\", function(module, exports) {\nmodule.exports = new URL(\"open-hihat_5.14edd338.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"hnHVd\", function(module, exports) {\nmodule.exports = new URL(\"open-hihat_6.0efdc832.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"aA3m4\", function(module, exports) {\nmodule.exports = new URL(\"open-hihat_7.f7c80852.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"8a69x\", function(module, exports) {\nmodule.exports = new URL(\"open-hihat_8.e6bbdeff.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"dqHjm\", function(module, exports) {\nmodule.exports = new URL(\"open-hihat_9.ce51d058.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"jnTsG\", function(module, exports) {\nmodule.exports = new URL(\"open-hihat_10.4ec7a4eb.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"c1zb3\", function(module, exports) {\nmodule.exports = new URL(\"open-hihat_11.0bc90e96.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"26IF6\", function(module, exports) {\nmodule.exports = new URL(\"open-hihat_12.a95c984b.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"lbiIu\", function(module, exports) {\nmodule.exports = new URL(\"crash_1.6aa3010b.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"2NGyf\", function(module, exports) {\nmodule.exports = new URL(\"crash_2.ad19f12b.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"lABIk\", function(module, exports) {\nmodule.exports = new URL(\"crash_3.8ba5b29e.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"3iUw5\", function(module, exports) {\nmodule.exports = new URL(\"crash_4.a17a8a67.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"274PA\", function(module, exports) {\nmodule.exports = new URL(\"crash_5.8b1d5604.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"7ehjG\", function(module, exports) {\nmodule.exports = new URL(\"crash_6.9dcf9ed6.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"9N1z7\", function(module, exports) {\nmodule.exports = new URL(\"crash_7.6a40b51c.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"71k2j\", function(module, exports) {\nmodule.exports = new URL(\"crash_8.99d0fd8d.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"5Pvi2\", function(module, exports) {\nmodule.exports = new URL(\"crash_9.4b8594d9.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"2RFd4\", function(module, exports) {\nmodule.exports = new URL(\"crash_10.0d7efbff.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"1eKy2\", function(module, exports) {\nmodule.exports = new URL(\"crash_11.cd2e80a9.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"8YECZ\", function(module, exports) {\nmodule.exports = new URL(\"crash_12.4ad8210f.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"5SxuK\", function(module, exports) {\nmodule.exports = new URL(\"ride_1.b04f8857.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"ldQTA\", function(module, exports) {\nmodule.exports = new URL(\"ride_2.1e254981.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"f6Cx3\", function(module, exports) {\nmodule.exports = new URL(\"ride_3.506fe573.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"dWpbb\", function(module, exports) {\nmodule.exports = new URL(\"ride_4.f8c46940.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"hhn9f\", function(module, exports) {\nmodule.exports = new URL(\"ride_5.9eedc3c5.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"ZdGiJ\", function(module, exports) {\nmodule.exports = new URL(\"ride_6.6119b558.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"j9z4h\", function(module, exports) {\nmodule.exports = new URL(\"ride_7.05f04bb8.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"kiJCK\", function(module, exports) {\nmodule.exports = new URL(\"ride_8.e0a39ea5.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"272cE\", function(module, exports) {\nmodule.exports = new URL(\"ride_9.b606a5a3.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"bTlbG\", function(module, exports) {\nmodule.exports = new URL(\"ride_10.c4914e82.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"6CR9H\", function(module, exports) {\nmodule.exports = new URL(\"ride_11.657bdea3.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"1Ltew\", function(module, exports) {\nmodule.exports = new URL(\"ride_12.b86f4115.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"6bXMG\", function(module, exports) {\nmodule.exports = new URL(\"kick_1.6d75be8e.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"1v8uQ\", function(module, exports) {\nmodule.exports = new URL(\"kick_2.eef489eb.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"1gWYQ\", function(module, exports) {\nmodule.exports = new URL(\"kick_3.d59afb9a.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"7GIzt\", function(module, exports) {\nmodule.exports = new URL(\"kick_4.b6aa1d5a.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"46MCu\", function(module, exports) {\nmodule.exports = new URL(\"kick_5.5a4a1577.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"56E5k\", function(module, exports) {\nmodule.exports = new URL(\"kick_6.1b1aa317.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"2nfIT\", function(module, exports) {\nmodule.exports = new URL(\"kick_7.0e6a60bd.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"1vINS\", function(module, exports) {\nmodule.exports = new URL(\"kick_8.a6e6cb22.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"feiA7\", function(module, exports) {\nmodule.exports = new URL(\"kick_9.e90f0f7b.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"aQbil\", function(module, exports) {\nmodule.exports = new URL(\"kick_10.2508647b.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"624Hq\", function(module, exports) {\nmodule.exports = new URL(\"kick_11.ca60b639.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"fYSwK\", function(module, exports) {\nmodule.exports = new URL(\"kick_12.183b69d7.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"awcGy\", function(module, exports) {\nmodule.exports = new URL(\"snare_1.5e9b43b5.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"3sfcn\", function(module, exports) {\nmodule.exports = new URL(\"snare_2.673c28c6.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"9KbLN\", function(module, exports) {\nmodule.exports = new URL(\"snare_3.3b5c10f7.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"bSyUS\", function(module, exports) {\nmodule.exports = new URL(\"snare_4.54b1f023.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"8KIwk\", function(module, exports) {\nmodule.exports = new URL(\"snare_5.81e6e076.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"kdpRC\", function(module, exports) {\nmodule.exports = new URL(\"snare_6.109bef8f.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"hjY08\", function(module, exports) {\nmodule.exports = new URL(\"snare_7.a258b319.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"eM6M7\", function(module, exports) {\nmodule.exports = new URL(\"snare_8.57c5e497.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"1SKcy\", function(module, exports) {\nmodule.exports = new URL(\"snare_9.3d8c9482.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"j9hxR\", function(module, exports) {\nmodule.exports = new URL(\"snare_10.b2b762b9.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"2NXPr\", function(module, exports) {\nmodule.exports = new URL(\"snare_11.64dc3f03.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"gAz4G\", function(module, exports) {\nmodule.exports = new URL(\"snare_12.7da1f5d8.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"aD9Um\", function(module, exports) {\nmodule.exports = new URL(\"hi-tom_1.ded5f514.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"7IHL8\", function(module, exports) {\nmodule.exports = new URL(\"hi-tom_2.8574ea96.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"lhP3B\", function(module, exports) {\nmodule.exports = new URL(\"hi-tom_3.9438c9df.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"kqdlv\", function(module, exports) {\nmodule.exports = new URL(\"hi-tom_4.928d7f59.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"5YpTq\", function(module, exports) {\nmodule.exports = new URL(\"hi-tom_5.a339ccb1.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"9d0yB\", function(module, exports) {\nmodule.exports = new URL(\"hi-tom_6.94994fbe.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"d38YH\", function(module, exports) {\nmodule.exports = new URL(\"hi-tom_7.ee3ea907.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"hF6rJ\", function(module, exports) {\nmodule.exports = new URL(\"hi-tom_8.38b2f80d.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"iQi5z\", function(module, exports) {\nmodule.exports = new URL(\"hi-tom_9.5a2cd443.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"ifCLN\", function(module, exports) {\nmodule.exports = new URL(\"hi-tom_10.dba10a8d.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"iRvZv\", function(module, exports) {\nmodule.exports = new URL(\"hi-tom_11.de67cef1.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"75iiO\", function(module, exports) {\nmodule.exports = new URL(\"hi-tom_12.f5d60938.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"6kBfN\", function(module, exports) {\nmodule.exports = new URL(\"mid-tom_1.3fc809be.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"8hpbe\", function(module, exports) {\nmodule.exports = new URL(\"mid-tom_2.6b59b8f0.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"iuitn\", function(module, exports) {\nmodule.exports = new URL(\"mid-tom_3.17f1cc7f.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"ekqSg\", function(module, exports) {\nmodule.exports = new URL(\"mid-tom_4.72bb4506.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"iULhj\", function(module, exports) {\nmodule.exports = new URL(\"mid-tom_5.c1baf999.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"5iX8l\", function(module, exports) {\nmodule.exports = new URL(\"mid-tom_6.f2fc805f.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"8itDX\", function(module, exports) {\nmodule.exports = new URL(\"mid-tom_7.970248d0.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"2eaI0\", function(module, exports) {\nmodule.exports = new URL(\"mid-tom_8.73bfd563.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"ls98q\", function(module, exports) {\nmodule.exports = new URL(\"mid-tom_9.211b9f20.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"euiK4\", function(module, exports) {\nmodule.exports = new URL(\"mid-tom_10.6a403e17.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"9HaM0\", function(module, exports) {\nmodule.exports = new URL(\"mid-tom_11.58388abe.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"ge5lW\", function(module, exports) {\nmodule.exports = new URL(\"mid-tom_12.bcd70088.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"4OwOj\", function(module, exports) {\nmodule.exports = new URL(\"floor-tom_1.12e2e635.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"c29E2\", function(module, exports) {\nmodule.exports = new URL(\"floor-tom_2.e6e78471.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"aq3tN\", function(module, exports) {\nmodule.exports = new URL(\"floor-tom_3.49806c39.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"brntc\", function(module, exports) {\nmodule.exports = new URL(\"floor-tom_4.a291815e.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"gUGe5\", function(module, exports) {\nmodule.exports = new URL(\"floor-tom_5.090c6c58.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"awWFT\", function(module, exports) {\nmodule.exports = new URL(\"floor-tom_6.e90de229.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"ftxH4\", function(module, exports) {\nmodule.exports = new URL(\"floor-tom_7.68418ad4.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"3yq6D\", function(module, exports) {\nmodule.exports = new URL(\"floor-tom_8.20433cf0.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"cwkqo\", function(module, exports) {\nmodule.exports = new URL(\"floor-tom_9.f95e6621.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"7lfO5\", function(module, exports) {\nmodule.exports = new URL(\"floor-tom_10.8525c2e8.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"8ab0Q\", function(module, exports) {\nmodule.exports = new URL(\"floor-tom_11.58d9143f.mp3\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"6sqLW\", function(module, exports) {\nmodule.exports = new URL(\"floor-tom_12.24ed6b48.mp3\", import.meta.url).toString();\n\n});\n\nvar $f49fc4e2ed0b83fb$exports = {};\n\n(parcelRequire(\"27Lyk\")).register(new URL(\"\", import.meta.url).toString(), JSON.parse('[\"g3LtT\",\"index.b186437a.js\",\"27RPn\",\"closed-hihat_1.c3598e64.mp3\",\"cpxBE\",\"closed-hihat_2.df9c6d68.mp3\",\"bEf6y\",\"closed-hihat_3.2e25a9fb.mp3\",\"hz2D1\",\"closed-hihat_4.546f9296.mp3\",\"lxeZx\",\"closed-hihat_5.84f49b25.mp3\",\"kFLJw\",\"closed-hihat_6.583c3a3d.mp3\",\"72vaF\",\"closed-hihat_7.769c6d06.mp3\",\"CMLMa\",\"closed-hihat_8.6911f924.mp3\",\"lzUbx\",\"closed-hihat_9.8e0b0ab6.mp3\",\"lXL2N\",\"closed-hihat_10.51d068e3.mp3\",\"amCq5\",\"closed-hihat_11.8cabb786.mp3\",\"2HUd2\",\"closed-hihat_12.b1e4a2bf.mp3\",\"3ClXy\",\"open-hihat_1.1fa9c461.mp3\",\"iQW2c\",\"open-hihat_2.2f935a0f.mp3\",\"d7oFT\",\"open-hihat_3.ed4ec909.mp3\",\"jcetE\",\"open-hihat_4.5364cb46.mp3\",\"7Gdj8\",\"open-hihat_5.14edd338.mp3\",\"95skG\",\"open-hihat_6.0efdc832.mp3\",\"kpaVg\",\"open-hihat_7.f7c80852.mp3\",\"ao88n\",\"open-hihat_8.e6bbdeff.mp3\",\"j1LpH\",\"open-hihat_9.ce51d058.mp3\",\"QNB9J\",\"open-hihat_10.4ec7a4eb.mp3\",\"489CK\",\"open-hihat_11.0bc90e96.mp3\",\"7LvUx\",\"open-hihat_12.a95c984b.mp3\",\"gXdak\",\"crash_1.6aa3010b.mp3\",\"9DcNa\",\"crash_2.ad19f12b.mp3\",\"k0tsl\",\"crash_3.8ba5b29e.mp3\",\"c0MhK\",\"crash_4.a17a8a67.mp3\",\"jVnI3\",\"crash_5.8b1d5604.mp3\",\"kxhjp\",\"crash_6.9dcf9ed6.mp3\",\"fwWtj\",\"crash_7.6a40b51c.mp3\",\"fRnJB\",\"crash_8.99d0fd8d.mp3\",\"5fY2q\",\"crash_9.4b8594d9.mp3\",\"1MKxR\",\"crash_10.0d7efbff.mp3\",\"k2oUc\",\"crash_11.cd2e80a9.mp3\",\"bC5AX\",\"crash_12.4ad8210f.mp3\",\"13aa4\",\"ride_1.b04f8857.mp3\",\"cZBN5\",\"ride_2.1e254981.mp3\",\"i6TIL\",\"ride_3.506fe573.mp3\",\"59ldi\",\"ride_4.f8c46940.mp3\",\"621AQ\",\"ride_5.9eedc3c5.mp3\",\"e6gYE\",\"ride_6.6119b558.mp3\",\"eFwVf\",\"ride_7.05f04bb8.mp3\",\"ceeRN\",\"ride_8.e0a39ea5.mp3\",\"9ftJd\",\"ride_9.b606a5a3.mp3\",\"fdrjq\",\"ride_10.c4914e82.mp3\",\"72TSA\",\"ride_11.657bdea3.mp3\",\"3KOWW\",\"ride_12.b86f4115.mp3\",\"2699t\",\"kick_1.6d75be8e.mp3\",\"6gWGR\",\"kick_2.eef489eb.mp3\",\"ke6mk\",\"kick_3.d59afb9a.mp3\",\"aUWlm\",\"kick_4.b6aa1d5a.mp3\",\"3G3Wu\",\"kick_5.5a4a1577.mp3\",\"ilWQC\",\"kick_6.1b1aa317.mp3\",\"7CUwr\",\"kick_7.0e6a60bd.mp3\",\"5gQbC\",\"kick_8.a6e6cb22.mp3\",\"i137T\",\"kick_9.e90f0f7b.mp3\",\"aFEUV\",\"kick_10.2508647b.mp3\",\"8OaP8\",\"kick_11.ca60b639.mp3\",\"1sn3b\",\"kick_12.183b69d7.mp3\",\"4sBJH\",\"snare_1.5e9b43b5.mp3\",\"6zKvu\",\"snare_2.673c28c6.mp3\",\"2FDGo\",\"snare_3.3b5c10f7.mp3\",\"9XPce\",\"snare_4.54b1f023.mp3\",\"iv9W4\",\"snare_5.81e6e076.mp3\",\"jVsDc\",\"snare_6.109bef8f.mp3\",\"aRTsm\",\"snare_7.a258b319.mp3\",\"epW8J\",\"snare_8.57c5e497.mp3\",\"dWtN8\",\"snare_9.3d8c9482.mp3\",\"appk9\",\"snare_10.b2b762b9.mp3\",\"jtGfM\",\"snare_11.64dc3f03.mp3\",\"5ZTYV\",\"snare_12.7da1f5d8.mp3\",\"3t4ZY\",\"hi-tom_1.ded5f514.mp3\",\"cGpkD\",\"hi-tom_2.8574ea96.mp3\",\"p88ov\",\"hi-tom_3.9438c9df.mp3\",\"huESR\",\"hi-tom_4.928d7f59.mp3\",\"lNGPD\",\"hi-tom_5.a339ccb1.mp3\",\"7F98S\",\"hi-tom_6.94994fbe.mp3\",\"5MZk0\",\"hi-tom_7.ee3ea907.mp3\",\"g425Q\",\"hi-tom_8.38b2f80d.mp3\",\"7ZXIl\",\"hi-tom_9.5a2cd443.mp3\",\"ioQxK\",\"hi-tom_10.dba10a8d.mp3\",\"ezG6N\",\"hi-tom_11.de67cef1.mp3\",\"1OK0v\",\"hi-tom_12.f5d60938.mp3\",\"1TINM\",\"mid-tom_1.3fc809be.mp3\",\"cnbHY\",\"mid-tom_2.6b59b8f0.mp3\",\"j8i6x\",\"mid-tom_3.17f1cc7f.mp3\",\"hGK9k\",\"mid-tom_4.72bb4506.mp3\",\"99LZb\",\"mid-tom_5.c1baf999.mp3\",\"ckMI1\",\"mid-tom_6.f2fc805f.mp3\",\"3fSyH\",\"mid-tom_7.970248d0.mp3\",\"5X6dl\",\"mid-tom_8.73bfd563.mp3\",\"lV4UW\",\"mid-tom_9.211b9f20.mp3\",\"1WsAw\",\"mid-tom_10.6a403e17.mp3\",\"jYoji\",\"mid-tom_11.58388abe.mp3\",\"c8zf2\",\"mid-tom_12.bcd70088.mp3\",\"cOCNL\",\"floor-tom_1.12e2e635.mp3\",\"20vWf\",\"floor-tom_2.e6e78471.mp3\",\"8Jp44\",\"floor-tom_3.49806c39.mp3\",\"9BfCB\",\"floor-tom_4.a291815e.mp3\",\"9jrRf\",\"floor-tom_5.090c6c58.mp3\",\"4xrKq\",\"floor-tom_6.e90de229.mp3\",\"25ZoB\",\"floor-tom_7.68418ad4.mp3\",\"3am9S\",\"floor-tom_8.20433cf0.mp3\",\"7Q71Z\",\"floor-tom_9.f95e6621.mp3\",\"aFjLJ\",\"floor-tom_10.8525c2e8.mp3\",\"9glTC\",\"floor-tom_11.58d9143f.mp3\",\"wU6WE\",\"floor-tom_12.24ed6b48.mp3\",\"csRZ8\",\"workerAjax.6b1dfd8f.js\",\"lsp70\",\"A.1bc05b06.png\",\"abxMS\",\"B.873f0259.png\"]'));\n\n// Author: Çağrı Erdem, 2023\n// Description: Main bundler script for 2groove web app.\n// import \"./../styles/mainUI.css\";\n// ----------------------------\n// ----------------------------\n// Author: Çağrı Erdem, 2023\n// Description: MIDI Drum Sampler for 2groove web app.\n// import { delay, eq, reverb } from \"./efx.js\";\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst $e2fd133faaf57a8f$export$5f20c3cdf3b5e8be = {\n    \"closed-hihat\": [\n        (parcelRequire(\"lw8Mu\")),\n        (parcelRequire(\"1NuFb\")),\n        (parcelRequire(\"e3CPn\")),\n        (parcelRequire(\"j8xcP\")),\n        (parcelRequire(\"dfk0E\")),\n        (parcelRequire(\"1WnZU\")),\n        (parcelRequire(\"1ITJB\")),\n        (parcelRequire(\"570Mo\")),\n        (parcelRequire(\"amPri\")),\n        (parcelRequire(\"fAaYz\")),\n        (parcelRequire(\"fPRLW\")),\n        (parcelRequire(\"kwhgF\"))\n    ],\n    \"open-hihat\": [\n        (parcelRequire(\"e0iWv\")),\n        (parcelRequire(\"l6Y43\")),\n        (parcelRequire(\"fBSj4\")),\n        (parcelRequire(\"ajKwd\")),\n        (parcelRequire(\"ck7JE\")),\n        (parcelRequire(\"hnHVd\")),\n        (parcelRequire(\"aA3m4\")),\n        (parcelRequire(\"8a69x\")),\n        (parcelRequire(\"dqHjm\")),\n        (parcelRequire(\"jnTsG\")),\n        (parcelRequire(\"c1zb3\")),\n        (parcelRequire(\"26IF6\"))\n    ],\n    \"crash\": [\n        (parcelRequire(\"lbiIu\")),\n        (parcelRequire(\"2NGyf\")),\n        (parcelRequire(\"lABIk\")),\n        (parcelRequire(\"3iUw5\")),\n        (parcelRequire(\"274PA\")),\n        (parcelRequire(\"7ehjG\")),\n        (parcelRequire(\"9N1z7\")),\n        (parcelRequire(\"71k2j\")),\n        (parcelRequire(\"5Pvi2\")),\n        (parcelRequire(\"2RFd4\")),\n        (parcelRequire(\"1eKy2\")),\n        (parcelRequire(\"8YECZ\"))\n    ],\n    \"ride\": [\n        (parcelRequire(\"5SxuK\")),\n        (parcelRequire(\"ldQTA\")),\n        (parcelRequire(\"f6Cx3\")),\n        (parcelRequire(\"dWpbb\")),\n        (parcelRequire(\"hhn9f\")),\n        (parcelRequire(\"ZdGiJ\")),\n        (parcelRequire(\"j9z4h\")),\n        (parcelRequire(\"kiJCK\")),\n        (parcelRequire(\"272cE\")),\n        (parcelRequire(\"bTlbG\")),\n        (parcelRequire(\"6CR9H\")),\n        (parcelRequire(\"1Ltew\"))\n    ],\n    \"kick\": [\n        (parcelRequire(\"6bXMG\")),\n        (parcelRequire(\"1v8uQ\")),\n        (parcelRequire(\"1gWYQ\")),\n        (parcelRequire(\"7GIzt\")),\n        (parcelRequire(\"46MCu\")),\n        (parcelRequire(\"56E5k\")),\n        (parcelRequire(\"2nfIT\")),\n        (parcelRequire(\"1vINS\")),\n        (parcelRequire(\"feiA7\")),\n        (parcelRequire(\"aQbil\")),\n        (parcelRequire(\"624Hq\")),\n        (parcelRequire(\"fYSwK\"))\n    ],\n    \"snare\": [\n        (parcelRequire(\"awcGy\")),\n        (parcelRequire(\"3sfcn\")),\n        (parcelRequire(\"9KbLN\")),\n        (parcelRequire(\"bSyUS\")),\n        (parcelRequire(\"8KIwk\")),\n        (parcelRequire(\"kdpRC\")),\n        (parcelRequire(\"hjY08\")),\n        (parcelRequire(\"eM6M7\")),\n        (parcelRequire(\"1SKcy\")),\n        (parcelRequire(\"j9hxR\")),\n        (parcelRequire(\"2NXPr\")),\n        (parcelRequire(\"gAz4G\"))\n    ],\n    \"hi-tom\": [\n        (parcelRequire(\"aD9Um\")),\n        (parcelRequire(\"7IHL8\")),\n        (parcelRequire(\"lhP3B\")),\n        (parcelRequire(\"kqdlv\")),\n        (parcelRequire(\"5YpTq\")),\n        (parcelRequire(\"9d0yB\")),\n        (parcelRequire(\"d38YH\")),\n        (parcelRequire(\"hF6rJ\")),\n        (parcelRequire(\"iQi5z\")),\n        (parcelRequire(\"ifCLN\")),\n        (parcelRequire(\"iRvZv\")),\n        (parcelRequire(\"75iiO\"))\n    ],\n    \"mid-tom\": [\n        (parcelRequire(\"6kBfN\")),\n        (parcelRequire(\"8hpbe\")),\n        (parcelRequire(\"iuitn\")),\n        (parcelRequire(\"ekqSg\")),\n        (parcelRequire(\"iULhj\")),\n        (parcelRequire(\"5iX8l\")),\n        (parcelRequire(\"8itDX\")),\n        (parcelRequire(\"2eaI0\")),\n        (parcelRequire(\"ls98q\")),\n        (parcelRequire(\"euiK4\")),\n        (parcelRequire(\"9HaM0\")),\n        (parcelRequire(\"ge5lW\"))\n    ],\n    \"floor-tom\": [\n        (parcelRequire(\"4OwOj\")),\n        (parcelRequire(\"c29E2\")),\n        (parcelRequire(\"aq3tN\")),\n        (parcelRequire(\"brntc\")),\n        (parcelRequire(\"gUGe5\")),\n        (parcelRequire(\"awWFT\")),\n        (parcelRequire(\"ftxH4\")),\n        (parcelRequire(\"3yq6D\")),\n        (parcelRequire(\"cwkqo\")),\n        (parcelRequire(\"7lfO5\")),\n        (parcelRequire(\"8ab0Q\")),\n        (parcelRequire(\"6sqLW\"))\n    ]\n};\n\n\nconst $e3b7b843e8e8227f$var$drumParts = [\n    \"closed-hihat\",\n    \"open-hihat\",\n    \"crash\",\n    \"ride\",\n    \"kick\",\n    \"snare\",\n    \"hi-tom\",\n    \"mid-tom\",\n    \"floor-tom\"\n];\nconst $e3b7b843e8e8227f$var$samplers = {};\n$e3b7b843e8e8227f$var$drumParts.forEach((drum)=>{\n    const drumSamples = {};\n    (0, $e2fd133faaf57a8f$export$5f20c3cdf3b5e8be)[drum].forEach((samplePath, index)=>{\n        const noteName = Tone.Frequency(60 + index, \"midi\").toNote();\n        drumSamples[noteName] = samplePath;\n    });\n    $e3b7b843e8e8227f$var$samplers[drum] = new Tone.Sampler({\n        urls: drumSamples\n    }).toDestination();\n});\n// Function to map MIDI velocity to the appropriate sample note\nfunction $e3b7b843e8e8227f$var$mapVelocityToSample(velocity) {\n    const numberOfSamples = 12;\n    // 0–127 divided into 12 segments\n    const segment = Math.ceil(128 / numberOfSamples);\n    // Calculate the sample index (1–12) based on the velocity\n    const sampleIndex = Math.ceil(velocity / segment);\n    // Calculate the MIDI note number (60 is C3, 71 is B3)\n    const noteNumber = 60 + sampleIndex - 1;\n    // Convert the MIDI note number to note name (C3, C#3, D3, ...)\n    return Tone.Frequency(noteNumber, \"midi\").toNote();\n}\n// Dict to map MIDI note number to the appropriate sample note\nconst $e3b7b843e8e8227f$var$drumMappings = {\n    \"C1\": \"kick\",\n    \"D1\": \"snare\",\n    \"F1\": \"floor-tom\",\n    \"B1\": \"mid-tom\",\n    \"C2\": \"hi-tom\",\n    \"C#2\": \"crash\",\n    \"D#2\": \"ride\",\n    \"F#1\": \"closed-hihat\",\n    \"A#1\": \"open-hihat\"\n};\n// TODO: helper function to apply the envelope to a given sampler\nconst $e3b7b843e8e8227f$var$drumADSR = {\n    \"closed-hihat\": {\n        attack: 0.01,\n        decay: 0.1,\n        sustain: 0.8,\n        release: 0.1\n    },\n    \"open-hihat\": {\n        attack: 0.02,\n        decay: 0.2,\n        sustain: 0.5,\n        release: 0.3\n    },\n    \"crash\": {\n        attack: 0.01,\n        decay: 0.2,\n        sustain: 0.5,\n        release: 0.3\n    },\n    \"ride\": {\n        attack: 0.01,\n        decay: 0.2,\n        sustain: 0.5,\n        release: 0.3\n    },\n    \"kick\": {\n        attack: 0.01,\n        decay: 0.2,\n        sustain: 0.5,\n        release: 0.3\n    },\n    \"snare\": {\n        attack: 0.01,\n        decay: 0.2,\n        sustain: 0.5,\n        release: 0.3\n    },\n    \"hi-tom\": {\n        attack: 0.01,\n        decay: 0.2,\n        sustain: 0.5,\n        release: 0.3\n    },\n    \"mid-tom\": {\n        attack: 0.01,\n        decay: 0.2,\n        sustain: 0.5,\n        release: 0.3\n    },\n    \"floor-tom\": {\n        attack: 0.01,\n        decay: 0.2,\n        sustain: 0.5,\n        release: 0.3\n    }\n};\nfunction $e3b7b843e8e8227f$var$applyEnvelope(envParams, duration) {\n    // Duration defaults to 0.5 if not provided TODO: Calculate the duration for each beat\n    // duration = duration || 0.5;\n    // Create the envelope with the provided parameters\n    const env = new Tone.Envelope(envParams).toDestination();\n    // Connect the envelope to the sampler\n    // sampler.connect(env);\n    // Trigger the envelope\n    env.triggerAttackRelease(duration);\n}\n// When processing MIDI data in software, developers often use conditional statements like if (status === 144) to check the type of MIDI message received and to handle it accordingly. \n// In this particular case, the software would execute specific logic for \"Note On\" messages on channel 1.\n// The MIDI message is an array of integers. The first integer is the status byte, which contains the message type and the MIDI channel.\nfunction $e3b7b843e8e8227f$var$onMIDIMessageReceived(message, verbose = false) {\n    if ($e3b7b843e8e8227f$var$isListening) {\n        const [status, noteNumber, velocity] = message.data;\n        const noteName = Tone.Frequency(noteNumber - 12, \"midi\").toNote();\n        const drumType = $e3b7b843e8e8227f$var$drumMappings[noteName];\n        if (verbose) {\n            // console.log(typeof noteName);\n            console.log(noteNumber, noteName, velocity); // buraya kadar tamam.\n            console.log(\"drumType: \", drumType);\n        }\n        // AR for each drum part\n        const hitDuration = {\n            \"closed-hihat\": \"1n\",\n            \"open-hihat\": \"2n\",\n            \"crash\": \"1n\",\n            \"ride\": \"1n\",\n            \"kick\": \"8n\",\n            \"snare\": \"2n\",\n            \"hi-tom\": \"4n\",\n            \"mid-tom\": \"4n\",\n            \"floor-tom\": \"4n\"\n        };\n        if (status === 144 && $e3b7b843e8e8227f$var$drumMappings[noteName]) {\n            // const drumType = drumMappings[noteName];\n            const noteToTrigger = $e3b7b843e8e8227f$var$mapVelocityToSample(velocity); // assume `velocity` is provided by MIDI\n            // console.log(`Drum type and note to trigger: ${drumType} ${noteToTrigger}`);\n            if (drumType) {\n                // Lookup the appropriate sampler using the drumType\n                const sampler = $e3b7b843e8e8227f$var$samplers[drumType];\n                // Trigger the sound w/ a simple Attack-Release envelope TODO: Make better envelopes!\n                sampler.triggerAttackRelease(noteToTrigger, hitDuration[drumType]);\n            // sampler.chain(eq, delay, reverb); // EFX chain\n            } else console.error(`No mappings found for drum type: ${drumType}`);\n        }\n    }\n}\n// // WITH THE OLD UI:\n//VARIABLES\n// // Variable to keep track of the playback state\n// let isListening = false;\n// // Grab the button from the UI\n// const toggleListeningButton = document.getElementById('togglePlaybackButton');\n// //EVENT LISTENERS\n// // Add an event listener to the button\n// toggleListeningButton.addEventListener('click', toggleListening);\n// // Handle button click\n// function toggleListening() {\n//     isListening = !isListening; // Toggle the listening state\n//     // Update button text based on the current state // Note that we are not doing it anymore with the new GUI\n//     // toggleListeningButton.textContent = isListening ? 'Stop Listening' : 'Start Listening';\n//   }\n//   if (navigator.requestMIDIAccess) { // request MIDI access\n//     navigator.requestMIDIAccess().then(onMIDISuccess, onMIDIFailure);\n//   } else {\n//     console.error('WebMIDI is not supported in this browser.');\n//   }\n// WITH THE NEW UI:\n// Instead of using the click event on the button, \n// we will use the change event on the checkbox (since that's what you have now).\n// Instead of toggling button text (since there's no text now), \n// we'll toggle the checkbox's checked state.\n// Variable to keep track of the playback state\nlet $e3b7b843e8e8227f$var$isListening = false;\n// Grab the checkbox from the UI\nconst $e3b7b843e8e8227f$var$toggleListeningCheckbox = document.querySelector('#togglePlaybackButton input[type=\"checkbox\"]');\n//EVENT LISTENERS\n// Add an event listener to the checkbox\n$e3b7b843e8e8227f$var$toggleListeningCheckbox.addEventListener(\"change\", $e3b7b843e8e8227f$var$toggleListening);\n// Handle checkbox state change\nfunction $e3b7b843e8e8227f$var$toggleListening() {\n    $e3b7b843e8e8227f$var$isListening = $e3b7b843e8e8227f$var$toggleListeningCheckbox.checked; // Update listening state based on checkbox\n}\nif (navigator.requestMIDIAccess) navigator.requestMIDIAccess().then($e3b7b843e8e8227f$var$onMIDISuccess, $e3b7b843e8e8227f$var$onMIDIFailure);\nelse console.error(\"WebMIDI is not supported in this browser.\");\n// Handle successful MIDI access\nfunction $e3b7b843e8e8227f$var$onMIDISuccess(midiAccess) {\n    const inputs = midiAccess.inputs.values();\n    for(let input = inputs.next(); input && !input.done; input = inputs.next())input.value.onmidimessage = $e3b7b843e8e8227f$var$onMIDIMessageReceived;\n    midiAccess.onstatechange = function(e) {\n        if (e.port.state === \"connected\") e.port.onmidimessage = $e3b7b843e8e8227f$var$onMIDIMessageReceived;\n        else if (e.port.state === \"disconnected\") {\n            e.port.onmidimessage = null;\n            // Try to refresh MIDI connections after a short delay\n            setTimeout(()=>{\n                $e3b7b843e8e8227f$var$refreshMIDIAccess();\n            }, 1000);\n        }\n    };\n}\nfunction $e3b7b843e8e8227f$var$refreshMIDIAccess() {\n    if (navigator.requestMIDIAccess) navigator.requestMIDIAccess().then($e3b7b843e8e8227f$var$onMIDISuccess, $e3b7b843e8e8227f$var$onMIDIFailure);\n    else console.error(\"WebMIDI is not supported in this browser.\");\n}\nfunction $e3b7b843e8e8227f$var$onMIDIFailure(e) {\n    console.error(\"Could not access MIDI devices:\", e);\n} // NOTES:\n // Uint8Array(3): This indicates the array contains three elements. MIDI messages typically consist of 1-3 bytes, so this is consistent with typical MIDI behavior.\n // [128, 36, 0]: These are the actual values (in decimal) of the MIDI message:\n // 128: This is the status byte. In MIDI, a value of 128 (0x80 in hexadecimal) typically corresponds to a \"Note Off\" message for channel 1.\n // 36: This is the first data byte. For \"Note On\" and \"Note Off\" messages, this represents the MIDI note number. In this case, it's 36 which might correspond to a kick drum in a typical MIDI drum map.\n // 0: This is the second data byte. For \"Note On\" and \"Note Off\" messages, this represents the velocity (or volume) of the note. A velocity of 0 for a \"Note On\" message is often treated as a \"Note Off\".\n // buffer, byteLength, byteOffset, etc.: These are properties of the Uint8Array and provide information about the underlying buffer storage and the array's size. For most MIDI applications, you won't need to worry about these.\n // For example, a MIDI message (128, 36, 0) can be interpreted as: \"Note Off\" for MIDI note 36 on channel 1 with a velocity of 0.\n\n\n// Author: Çağrı Erdem, 2023\n// Description: Defining a global state module to fetch MIDI (bytes) \n// data from the server and make it available to all modules of the 2groove web app.\nconst $affef116f20f7e03$export$3b6dd1a438fa9298 = {\n    midiData: null,\n    midiReadyForProcessing: false,\n    setMidiData (data) {\n        console.log(\"MIDI data received in bytes!\", data);\n        this.midiData = data;\n        this.midiReadyForProcessing = true; // Open the gate\n    },\n    getMidiData () {\n        return this.midiData;\n    },\n    isMidiReadyForProcessing () {\n        return this.midiReadyForProcessing;\n    },\n    midiProcessed () {\n        this.midiReadyForProcessing = false; // Close the gate\n    }\n};\n\n\n// Author: Çağrı Erdem, 2023\n// Description: User interface for 2groove web app.\n\n// Initialize Web Audio API\nconst $57d1b30337fe6afc$var$audioContext = new AudioContext();\n// UI Elements\nconst $57d1b30337fe6afc$var$tempoSlider = document.getElementById(\"tempo\");\nconst $57d1b30337fe6afc$var$metronomeVolumeSlider = document.getElementById(\"metronomeVolume\");\nconst $57d1b30337fe6afc$var$toggleMetronomeCheckbox = document.querySelector('#toggleMetronome input[type=\"checkbox\"]');\nconst $57d1b30337fe6afc$var$recIndicator = document.getElementById(\"recIndicator\");\nconst $57d1b30337fe6afc$var$arrayList = document.getElementById(\"arrayList\");\nconst $57d1b30337fe6afc$var$intervals = []; // for tap tempo\n// const startButton = document.getElementById('startButton'); \n// const portInput = document.getElementById('serverPort')\n// const httpIp = document.getElementById('httpIpAddress')\n// const beatsInput = document.getElementById('beats');\n// const quantizeSelect = document.getElementById('quantize');\n// Variables\nlet $57d1b30337fe6afc$var$beatsInput = 8; // 8 beats (2 bars)\nlet $57d1b30337fe6afc$var$quantizeSelect = 4; // 1/16\nlet $57d1b30337fe6afc$var$gateKeyActive = false;\nlet $57d1b30337fe6afc$var$currentArray = [];\nlet $57d1b30337fe6afc$var$recording = false;\nlet $57d1b30337fe6afc$var$recordingStartedAt = 0;\nlet $57d1b30337fe6afc$var$httpIp = [\n    `158.39.200.82`,\n    `127.0.0.1`\n];\nlet $57d1b30337fe6afc$var$httpPort = [\n    `5002`,\n    `5003`\n];\nlet $57d1b30337fe6afc$var$isHttpConnected = true; // we keep it true with the new UI\nlet $57d1b30337fe6afc$var$lastTapTime = 0; // for tap tempo\nlet $57d1b30337fe6afc$var$tappedRhythms = [];\nlet $57d1b30337fe6afc$var$metronomeLoop;\nlet $57d1b30337fe6afc$var$metronomeRunning = true; // The metronome loop and transport is always running\nlet $57d1b30337fe6afc$var$metronomeSoundOn = false; // The metronome sound is off by default\nlet $57d1b30337fe6afc$var$tempVal = 0.2;\nlet $57d1b30337fe6afc$var$threshVal = 0.3;\nlet $57d1b30337fe6afc$var$currentTick = 1;\nlet $57d1b30337fe6afc$var$clickTone = 1000;\nlet $57d1b30337fe6afc$var$samplingStrategy = {\n    \"strategy\": [\n        \"epsilon\",\n        \"softmax_temp\"\n    ],\n    \"tempRange\": [\n        [\n            0.01,\n            10.0\n        ],\n        [\n            0.1,\n            2.0\n        ]\n    ],\n    \"threshRange\": [\n        [\n            0.15,\n            0.35\n        ],\n        [\n            0.1,\n            0.2\n        ]\n    ]\n};\nlet $57d1b30337fe6afc$var$samplingStrategyIndex = 0;\n//-------------------------------------\n// Functions\n//-------------------------------------\n// startButton.addEventListener('click', function() {\n//     initializeApp();\n//     startButton.style.display = 'none'; // Hide the button after initialization\n// });\nasync function $57d1b30337fe6afc$var$initializeApp() {\n    // Set default BPM or retrieve it from a saved setting or slider\n    const defaultBPM = $57d1b30337fe6afc$var$tempoSlider.value;\n    // Indicate that the metronome is running\n    $57d1b30337fe6afc$var$metronomeRunning = true;\n    console.log(\"App initialized!\");\n    console.log(\"Default BPM:\", defaultBPM);\n    console.log(\"Temperature value:\", $57d1b30337fe6afc$var$tempVal);\n    console.log(\"Hit tolerance:\", $57d1b30337fe6afc$var$threshVal);\n    console.log(\"Sampling strategy:\", $57d1b30337fe6afc$var$samplingStrategy[\"strategy\"][$57d1b30337fe6afc$var$samplingStrategyIndex]);\n}\n$57d1b30337fe6afc$var$initializeApp();\n//////////////////////\n// GLOBAL METRONOME //\n//////////////////////\n// Play click sound\nfunction $57d1b30337fe6afc$var$playClick(volume, frequency = 1000) {\n    const osc = $57d1b30337fe6afc$var$audioContext.createOscillator();\n    const gainNode = $57d1b30337fe6afc$var$audioContext.createGain();\n    gainNode.gain.value = volume;\n    osc.frequency.value = frequency;\n    osc.connect(gainNode);\n    gainNode.connect($57d1b30337fe6afc$var$audioContext.destination);\n    osc.start();\n    osc.stop($57d1b30337fe6afc$var$audioContext.currentTime + 0.05);\n}\nasync function $57d1b30337fe6afc$export$f470dc9fddb12380() {\n    if ($57d1b30337fe6afc$var$audioContext.state === \"suspended\") await $57d1b30337fe6afc$var$audioContext.resume();\n    if (Tone.context.state !== \"running\") {\n        await Tone.start();\n        console.log(\"Tone.js has started\");\n    }\n    $57d1b30337fe6afc$var$metronomeSoundOn = !$57d1b30337fe6afc$var$metronomeSoundOn;\n    if ($57d1b30337fe6afc$var$metronomeSoundOn) // start the metronome sound here if it's not already running\n    $57d1b30337fe6afc$export$6f2de5699a574d20($57d1b30337fe6afc$var$tempoSlider.value); // Assuming you want to use the current value of the tempo slider\n}\nasync function $57d1b30337fe6afc$export$6f2de5699a574d20(bpm) {\n    if (Tone.context.state !== \"running\") await Tone.start();\n    Tone.Transport.bpm.value = bpm; // Set the transport's BPM\n    if (!$57d1b30337fe6afc$var$metronomeLoop) {\n        $57d1b30337fe6afc$var$metronomeLoop = new Tone.Loop((time)=>{\n            // Only play the click if the audibleClick flag is true\n            if ($57d1b30337fe6afc$var$metronomeSoundOn) $57d1b30337fe6afc$var$playClick($57d1b30337fe6afc$var$metronomeVolumeSlider.value, $57d1b30337fe6afc$var$clickTone);\n            $57d1b30337fe6afc$var$emitTickEvent(); // Emit a tick event to be used by other modules\n        }, \"4n\"); // \"4n\" stands for a quarter note\n        $57d1b30337fe6afc$var$metronomeLoop.start(0); // Start the loop immediately\n    }\n    Tone.Transport.start(); // Start the transport\n}\n// Func to count between 1-4\nfunction $57d1b30337fe6afc$var$count4() {\n    console.log(`${$57d1b30337fe6afc$var$currentTick}/4`);\n    $57d1b30337fe6afc$var$currentTick = $57d1b30337fe6afc$var$currentTick % 4 + 1;\n    if ($57d1b30337fe6afc$var$currentTick == 1) $57d1b30337fe6afc$var$clickTone = 1500;\n    else $57d1b30337fe6afc$var$clickTone = 1000;\n}\nfunction $57d1b30337fe6afc$var$emitTickEvent() {\n    $57d1b30337fe6afc$var$count4();\n    // const event = new Event('metronomeTick');\n    // window.dispatchEvent(event);\n    const event = new CustomEvent(\"metronomeTick\", {\n        detail: {\n            tick: $57d1b30337fe6afc$var$currentTick\n        }\n    });\n    window.dispatchEvent(event);\n}\nfunction $57d1b30337fe6afc$export$db9eb2abe83c2c32(bpm) {\n    Tone.Transport.bpm.value = bpm;\n}\nfunction $57d1b30337fe6afc$export$a298a7e074bda1f7() {\n    return Tone.Transport.bpm.value;\n}\nfunction $57d1b30337fe6afc$export$8f953293ce7143c() {\n    return $57d1b30337fe6afc$var$metronomeRunning;\n}\nfunction $57d1b30337fe6afc$var$arrayToBinaryString(array) {\n    return array.map((value)=>value !== 0 ? \"1\" : \"0\").join(\"\");\n}\nfunction $57d1b30337fe6afc$var$storeAndDisplayArray(array) {\n    const li = document.createElement(\"li\");\n    li.textContent = $57d1b30337fe6afc$var$arrayToBinaryString(array);\n    // If the list has any items\n    if ($57d1b30337fe6afc$var$arrayList.firstChild) // Insert 'li' before the first item, to the top of the list\n    $57d1b30337fe6afc$var$arrayList.insertBefore(li, $57d1b30337fe6afc$var$arrayList.firstChild);\n    else // If the list is empty, just append the 'li' as usual\n    $57d1b30337fe6afc$var$arrayList.appendChild(li);\n}\n// Variety knob\n// TODO: WOrk on it more!\ndocument.getElementById(\"temp\").addEventListener(\"input\", function() {\n    const value = this.value;\n    $57d1b30337fe6afc$var$tempVal = $57d1b30337fe6afc$var$scaleValue(value, [\n        0,\n        1\n    ], $57d1b30337fe6afc$var$samplingStrategy[\"tempRange\"][$57d1b30337fe6afc$var$samplingStrategyIndex]); //Exponential curve?\n    document.getElementById(\"knob3Value\").textContent = value;\n    // TODO: Check if it's a good idea to combine the two values. If yes, check better ways of combining.\n    console.log(\"tempVal:\", $57d1b30337fe6afc$var$tempVal);\n});\n// Thresh knob\n// TODO: WOrk on it more!\ndocument.getElementById(\"tolerance\").addEventListener(\"input\", function() {\n    const value = this.value;\n    // tempVal = scaleValue(value, [0, 1], [0.01, 100]);\n    $57d1b30337fe6afc$var$threshVal = $57d1b30337fe6afc$var$scaleValue(value, [\n        0,\n        1\n    ], $57d1b30337fe6afc$var$samplingStrategy[\"threshRange\"][$57d1b30337fe6afc$var$samplingStrategyIndex]);\n    document.getElementById(\"knob4Value\").textContent = value;\n    // TODO: Check if it's a good idea to combine the two values. If yes, check better ways of combining.\n    console.log(\"threshVal:\", $57d1b30337fe6afc$var$threshVal);\n});\nvar $763984d12099414d$exports = {};\nvar $56b621a6dd25b2cb$exports = {};\n\"use strict\";\n$56b621a6dd25b2cb$exports = function(workerUrl, origin, isESM) {\n    if (origin === self.location.origin) // If the worker bundle's url is on the same origin as the document,\n    // use the worker bundle's own url.\n    return workerUrl;\n    else {\n        // Otherwise, create a blob URL which loads the worker bundle with `importScripts`.\n        var source = isESM ? \"import \" + JSON.stringify(workerUrl) + \";\" : \"importScripts(\" + JSON.stringify(workerUrl) + \");\";\n        return URL.createObjectURL(new Blob([\n            source\n        ], {\n            type: \"application/javascript\"\n        }));\n    }\n};\n\n\nlet $763984d12099414d$var$url = new URL(\"workerAjax.6b1dfd8f.js\", import.meta.url);\n$763984d12099414d$exports = $56b621a6dd25b2cb$exports($763984d12099414d$var$url.toString(), $763984d12099414d$var$url.origin, true);\n\n\n// New Web Worker setup for client-server communication\nconst $57d1b30337fe6afc$var$ajaxWorker = new Worker($763984d12099414d$exports);\n// Listen to messages from the worker:\n$57d1b30337fe6afc$var$ajaxWorker.addEventListener(\"message\", function(event) {\n    const data = event.data;\n    console.log(\"Setting MIDI data, length:\", data.length);\n    switch(data.type){\n        case \"arrayProcessed\":\n            // process the MIDI data as needed\n            console.log(\"MIDI data received in bytes!\", data.data);\n            (0, $affef116f20f7e03$export$3b6dd1a438fa9298).setMidiData(data.data);\n            $57d1b30337fe6afc$var$resetTappedRhythms();\n            break;\n        case \"error\":\n            console.error(\"Error from worker:\", data.error);\n            break;\n    }\n});\n// Modify `sendArrayToServer` to post data to the worker:\nfunction $57d1b30337fe6afc$var$sendArrayToServer(array) {\n    $57d1b30337fe6afc$var$ajaxWorker.postMessage({\n        cmd: \"sendArray\",\n        array: array,\n        bpm: parseFloat(document.getElementById(\"tempo\").value),\n        temperatureValue: $57d1b30337fe6afc$var$tempVal,\n        hitTolerance: $57d1b30337fe6afc$var$threshVal,\n        isHttpConnected: $57d1b30337fe6afc$var$isHttpConnected,\n        httpIp: $57d1b30337fe6afc$var$httpIp[0],\n        portInput: $57d1b30337fe6afc$var$httpPort[0],\n        samplingStrategy: $57d1b30337fe6afc$var$samplingStrategy[\"strategy\"][$57d1b30337fe6afc$var$samplingStrategyIndex]\n    });\n}\n// TODO: Connect this to `midiBroadcast.js`\n// function sendBroadcastParameters(){\n//     const loop_amount = parseInt(loopsInput.value);\n// }\nfunction $57d1b30337fe6afc$var$resetTappedRhythms() {\n    // tappedRhythms = [];\n    $57d1b30337fe6afc$var$tappedRhythms.length = 0; // This empties the array without re-declaring it\n// ... any other necessary resets or UI updates ...\n}\nfunction $57d1b30337fe6afc$var$toggleValues(arr, numIndices1 = 1) {\n    // TODO: Implement this function to `change` action\n    /**\n     * Toggle values in the input array at random indices.\n     *\n     * Parameters:\n     * - arr (array-like): The input array containing only 0s and 1s.\n     * - numIndices (int): The number of random indices to toggle (default is 1).\n     *\n     * Returns:\n     * - Edited array with toggled values.\n     */ // Check if the input array is valid (contains only 0s and 1s)\n    if (!arr.every((val)=>val === 0 || val === 1)) throw new Error(\"Input array must consist of only 0s and 1s.\");\n    // Create a copy of the input array to avoid modifying the original\n    const editedArr = [\n        ...arr\n    ];\n    // Generate random indices to toggle\n    const toggleIndices = [];\n    for(let i = 0; i < numIndices1; i++){\n        const randomIndex = Math.floor(Math.random() * arr.length);\n        toggleIndices.push(randomIndex);\n    }\n    // Toggle the values at the selected indices\n    toggleIndices.forEach((index)=>{\n        editedArr[index] = 1 - editedArr[index];\n    });\n    return editedArr;\n}\n//-------------------------------------\n// Event Listeners\n//-------------------------------------\n// WITH THE OLD UI:\n// Event listeners for the metronome\n// toggleMetronomeButton.addEventListener('click', () => {\n//     toggleMetronomeButton.classList.toggle('toggled');\n//     toggleMetronome();\n// });\n// WITH THE NEW UI\n// TODO: Fix it because it doesn't work properly while generating \n$57d1b30337fe6afc$var$toggleMetronomeCheckbox.addEventListener(\"change\", $57d1b30337fe6afc$export$f470dc9fddb12380);\n// Function to turn off the switch\nfunction $57d1b30337fe6afc$var$turnOffSwitch() {\n    $57d1b30337fe6afc$var$toggleMetronomeCheckbox.checked = false;\n}\n// Event listener for the tempo and vol sliders\n$57d1b30337fe6afc$var$tempoSlider.addEventListener(\"input\", function() {\n    const bpm = this.value;\n    document.getElementById(\"knob1Value\").textContent = bpm; // Update the knob value\n    if ($57d1b30337fe6afc$var$metronomeRunning) $57d1b30337fe6afc$export$6f2de5699a574d20(bpm);\n});\n$57d1b30337fe6afc$var$metronomeVolumeSlider.addEventListener(\"input\", function() {\n    const vol = this.value;\n    document.getElementById(\"knob2Value\").textContent = vol; // Update the knob value\n});\n// Record tapped rhythm -- event listener for when the key \"A\" is pressed to start recording\nwindow.addEventListener(\"keydown\", (e)=>{\n    if (e.key === \"a\" && !$57d1b30337fe6afc$var$recording) {\n        e.preventDefault();\n        $57d1b30337fe6afc$var$gateKeyActive = true;\n        $57d1b30337fe6afc$var$recordingStartedAt = Date.now();\n        $57d1b30337fe6afc$var$recIndicator.innerText = \"REC ON!\";\n        $57d1b30337fe6afc$var$recIndicator.classList.add(\"recording\");\n        const totalSteps = parseInt($57d1b30337fe6afc$var$beatsInput) * parseInt($57d1b30337fe6afc$var$quantizeSelect); //.value methods removed for new UI\n        $57d1b30337fe6afc$var$currentArray = new Array(totalSteps).fill(0); // Initialize array with zeros\n        $57d1b30337fe6afc$var$recording = true;\n    }\n    if (e.key === \" \" && $57d1b30337fe6afc$var$gateKeyActive) {\n        //   playClick(tapVolumeSlider.value, 300);\n        $57d1b30337fe6afc$var$playClick($57d1b30337fe6afc$var$metronomeVolumeSlider.value, 300) // If same knob is used for both metronome and tap volume\n        ;\n        const elapsedMs = Date.now() - $57d1b30337fe6afc$var$recordingStartedAt;\n        const bpm = parseInt($57d1b30337fe6afc$var$tempoSlider.value);\n        const quantizeValue = parseInt($57d1b30337fe6afc$var$quantizeSelect);\n        const singleSubdivisionDuration = 60000 / (bpm * quantizeValue);\n        const tappedSubdivision = Math.round(elapsedMs / singleSubdivisionDuration);\n        if (tappedSubdivision < $57d1b30337fe6afc$var$currentArray.length) $57d1b30337fe6afc$var$currentArray[tappedSubdivision] = 1;\n        lastTapTimestamp = Date.now();\n    }\n    if (e.key === \" \") {\n        e.preventDefault(); //To prevent the browser from scrolling when the spacebar is pressed\n        const light = document.getElementById(\"tapLight\");\n        light.classList.remove(\"light-off\");\n        light.classList.add(\"light-on\");\n    }\n    if (e.key.toUpperCase() === \"T\") {\n        const currentTime = new Date().getTime();\n        const interval = currentTime - $57d1b30337fe6afc$var$lastTapTime; // in milliseconds\n        const tapTempoLight = document.getElementById(\"tapTempoLight\"); // Visual feedback for tap\n        tapTempoLight.classList.remove(\"light-off\");\n        tapTempoLight.classList.add(\"light-on\");\n        // tapTempoLight.style.backgroundColor = 'red';\n        $57d1b30337fe6afc$var$playClick($57d1b30337fe6afc$var$metronomeVolumeSlider.value, 1500);\n        setTimeout(()=>{\n            // tapLight.style.backgroundColor = '';\n            tapTempoLight.classList.remove(\"light-on\");\n            tapTempoLight.classList.add(\"light-off\");\n        }, 100); // light stays red for 100 milliseconds\n        if ($57d1b30337fe6afc$var$lastTapTime !== 0) {\n            $57d1b30337fe6afc$var$intervals.push(interval);\n            // Consider only the last few taps to get a more accurate/current BPM\n            if ($57d1b30337fe6afc$var$intervals.length > 4) $57d1b30337fe6afc$var$intervals.shift();\n            const averageInterval = $57d1b30337fe6afc$var$intervals.reduce((acc, val)=>acc + val, 0) / $57d1b30337fe6afc$var$intervals.length;\n            const bpm = parseInt(60000 / averageInterval); // 60,000 ms in a minute\n            // Update the tempo UI elements\n            const tempoElement = document.getElementById(\"tempo\");\n            const bpmDisplayElement = document.getElementById(\"knob1Value\");\n            const tempoSlider = document.getElementById(\"tempoSlider\");\n            if (tempoElement) tempoElement.value = bpm.toFixed(2); // toFixed(2) to limit to 2 decimal points\n            if (bpmDisplayElement) bpmDisplayElement.innerText = bpm.toFixed(0);\n            if (tempoSlider) tempoSlider.value = bpm.toFixed(0);\n        }\n        $57d1b30337fe6afc$var$lastTapTime = currentTime;\n    }\n});\nfunction $57d1b30337fe6afc$export$ffd9cee7b4d9db2f() {\n    return $57d1b30337fe6afc$var$currentArray;\n}\n// evet listener for when key \"A\" is released\nwindow.addEventListener(\"keyup\", (e)=>{\n    if (e.key === \"a\") {\n        $57d1b30337fe6afc$var$gateKeyActive = false;\n        $57d1b30337fe6afc$var$recIndicator.innerText = \"REC OFF\";\n        $57d1b30337fe6afc$var$recIndicator.classList.remove(\"recording\");\n        $57d1b30337fe6afc$var$storeAndDisplayArray($57d1b30337fe6afc$var$currentArray); // To display the array\n        $57d1b30337fe6afc$var$sendArrayToServer($57d1b30337fe6afc$var$currentArray); // To send the array via fetch (to server\n        // Check if the metronome is currently active/on\n        if ($57d1b30337fe6afc$var$metronomeRunning) {\n            // Toggle the metronome off\n            // toggleMetronome();\n            $57d1b30337fe6afc$var$metronomeSoundOn = false;\n            $57d1b30337fe6afc$var$toggleMetronomeCheckbox.checked = false; // TODO: fix this!\n        }\n        $57d1b30337fe6afc$var$recording = false;\n    }\n    if (e.key === \" \") {\n        const light = document.getElementById(\"tapLight\");\n        light.classList.remove(\"light-on\");\n        light.classList.add(\"light-off\");\n    }\n});\n// Incorporate the `change` action\n// TODO: Make sure it works properly\ndocument.getElementById(\"changeButton\").addEventListener(\"click\", function() {\n    editedArray = $57d1b30337fe6afc$var$toggleValues($57d1b30337fe6afc$var$currentArray, numIndices = 1);\n    $57d1b30337fe6afc$var$sendArrayToServer(editedArray);\n});\n/// UTILS ///\n// Scale a value from one range to another\nfunction $57d1b30337fe6afc$var$scaleValue(value, from, to) {\n    let scale = (to[1] - to[0]) / (from[1] - from[0]);\n    let capped = Math.min(from[1], Math.max(from[0], value)) - from[0];\n    return capped * scale + to[0];\n}\nfunction $57d1b30337fe6afc$var$limitDecimalPoints(number, n) {\n    // Check if the input is a valid number\n    if (typeof number !== \"number\" || isNaN(number)) throw new Error(\"Input must be a valid number.\");\n    // Use toFixed() to limit to n decimal points and convert back to a number\n    return parseFloat(number.toFixed(n));\n}\nresetButton.addEventListener(\"click\", ()=>{\n    $57d1b30337fe6afc$var$arrayList.innerHTML = \"\";\n});\nvar $71b2b71ec27873f8$exports = {};\n$71b2b71ec27873f8$exports = new URL(\"A.1bc05b06.png\", import.meta.url).toString();\n\n\nvar $c4f90bd834ee2783$exports = {};\n$c4f90bd834ee2783$exports = new URL(\"B.873f0259.png\", import.meta.url).toString();\n\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    const modelChangeButton = document.getElementById(\"modelChangeButton\");\n    modelChangeButton.addEventListener(\"click\", function() {\n        const imgElement = this.querySelector(\"img\");\n        if (imgElement.src.includes($71b2b71ec27873f8$exports)) {\n            imgElement.src = $c4f90bd834ee2783$exports;\n            $57d1b30337fe6afc$var$samplingStrategyIndex = 1;\n            console.log(\"Sampling changed to (B) Softmax!\");\n        } else {\n            imgElement.src = $71b2b71ec27873f8$exports;\n            $57d1b30337fe6afc$var$samplingStrategyIndex = 0;\n            console.log(\"Model changed to (A) Epsilon!\");\n        }\n    });\n});\n// Open the MIDI I/O popup\nfunction $57d1b30337fe6afc$var$openMidiPopup() {\n    window.open(src = \"\", \"popup\", \"width=450,height=450\", sandbox = \"allow-popups\");\n} //./../html/midi-io.html\nconst $57d1b30337fe6afc$var$midiButton = document.getElementById(\"midi-btn\");\n$57d1b30337fe6afc$var$midiButton.addEventListener(\"click\", $57d1b30337fe6afc$var$openMidiPopup);\n\n\n// Author: Çağrı Erdem, 2023\n// Description: MIDI broadcasting script for 2groove web app.\n\nconst $63d35791daec472d$var$audioContext = new (window.AudioContext || window.webkitAudioContext)();\nlet $63d35791daec472d$var$midiOutput; // MIDI output device\nlet $63d35791daec472d$var$startTime = null; // Start time for the MIDI playback\nlet $63d35791daec472d$var$timeouts = []; // Store timeout IDs for scheduled notes\nconst $63d35791daec472d$var$midiQueue = [];\nlet $63d35791daec472d$var$currentMidiForVisuals = null;\nlet $63d35791daec472d$var$isPlaying = false; // to track the playback status\n// let currentTick = 0;  // to track the current tick for the metronome\nlet $63d35791daec472d$var$processedMidiData; // Global variable to store the processed MIDI data for download\n// TODO: play/pause button\n// isPaused = false;\n// const playPauseButton = document.getElementById('play-pause-btn');\n// playPauseButton.addEventListener('click', () => {\n//     isPaused = !isPaused;\n//     if (isPaused) {\n//         // If paused, clear all timeouts (stop all scheduled notes)\n//         // timeouts.forEach(timeout => clearTimeout(timeout));\n//     } else {\n//         // When resumed, restart the MIDI playback from where we paused\n//         // loadMidiData(currentMidiForVisuals);\n//     }\n// });\n// TODO: Set up the main clock\n// Set up an event listener for the tick event\nwindow.addEventListener(\"metronomeTick\", $63d35791daec472d$var$handleMidiForTick);\nfunction $63d35791daec472d$var$handleMidiForTick(event) {\n// currentTick++;\n// console.log(`\\rClick ${(currentTick%4)+1}/4`);\n}\n// const tickToMidiEventsMap = {};\n// function handleMidiForTick(event) {\n//     if (event && event.detail && typeof event.detail.tick !== 'undefined') {\n//         const currentTick = event.detail.tick;\n//         if (tickToMidiEventsMap[currentTick]) {\n//             tickToMidiEventsMap[currentTick].forEach((note) => {\n//                 scheduleNote(note, Tone.Time(Tone.Transport.position).toMilliseconds());\n//             });\n//         }\n//     } else {\n//         console.warn('Received an unexpected event structure:', event);\n//     }\n//     currentTick++;\n//     console.log(`\\rClick ${(currentTick%4)+1}/4`);\n// }\n// Convert ticks to time in seconds\nfunction $63d35791daec472d$var$ticksToTime(ticks, ticksPerBeat, bpm) {\n    const secondsPerTick = 60 / (bpm * ticksPerBeat);\n    return ticks * secondsPerTick;\n}\n// Check for new MIDI data and enqueue it\nfunction $63d35791daec472d$var$checkAndEnqueueMidi() {\n    if ((0, $affef116f20f7e03$export$3b6dd1a438fa9298).isMidiReadyForProcessing()) {\n        const midi = (0, $affef116f20f7e03$export$3b6dd1a438fa9298).getMidiData().buffer; // convert to ArrayBuffer when fetching JSON\n        $63d35791daec472d$var$midiQueue.push(midi);\n        (0, $affef116f20f7e03$export$3b6dd1a438fa9298).midiProcessed();\n        // If nothing is currently playing, start the next MIDI\n        if (!$63d35791daec472d$var$isPlaying) $63d35791daec472d$var$playNextMidi();\n    }\n}\n// Play next MIDI in the queue and set it for visualization\nfunction $63d35791daec472d$var$playNextMidi() {\n    // Only start playing the next MIDI if the current one has finished\n    if (!$63d35791daec472d$var$isPlaying && $63d35791daec472d$var$midiQueue.length > 0) {\n        $63d35791daec472d$var$currentMidiForVisuals = $63d35791daec472d$var$midiQueue.shift();\n        Tone.Transport.start(\"@1m\"); // Ensure playback starts at the beginning of a measure //TODO: Check if this is necessary or useful\n        $63d35791daec472d$var$loadMidiData($63d35791daec472d$var$currentMidiForVisuals);\n    }\n}\nfunction $63d35791daec472d$export$247c826938a8d2eb() {\n    return $63d35791daec472d$var$currentMidiForVisuals;\n}\n// Initialize the audio context\nfunction $63d35791daec472d$var$startAudioContext() {\n    if ($63d35791daec472d$var$audioContext.state === \"suspended\") $63d35791daec472d$var$audioContext.resume();\n}\n// Scale a value from one range to another\nfunction $63d35791daec472d$var$scaleValue(value, from, to) {\n    let scale = (to[1] - to[0]) / (from[1] - from[0]);\n    let capped = Math.min(from[1], Math.max(from[0], value)) - from[0];\n    return capped * scale + to[0];\n}\n// MIDI initialization\nnavigator.requestMIDIAccess().then($63d35791daec472d$var$onMIDISuccess, $63d35791daec472d$var$onMIDIFailure);\nfunction $63d35791daec472d$var$onMIDISuccess(midiAccess) {\n    const outputs = Array.from(midiAccess.outputs.values());\n    if (outputs.length === 0) {\n        console.warn(\"No MIDI outputs found\");\n        return;\n    }\n    $63d35791daec472d$var$populateMidiOutputs(outputs);\n}\nfunction $63d35791daec472d$var$onMIDIFailure() {\n    console.error(\"Could not access your MIDI devices.\");\n}\nfunction $63d35791daec472d$var$populateMidiOutputs(outputs) {\n    const select = document.getElementById(\"midiOutputs\");\n    outputs.forEach((output, index)=>{\n        const option = document.createElement(\"option\");\n        option.value = index;\n        option.text = output.name;\n        select.appendChild(option);\n    });\n    select.addEventListener(\"change\", (event)=>{\n        $63d35791daec472d$var$midiOutput = outputs[event.target.value];\n    });\n    $63d35791daec472d$var$midiOutput = outputs[0]; // Default to the first output\n}\n// TODO: check if this working properly\n// function populateMidiOutputs(outputs) {\n//     const select = document.getElementById('midiOutputs');\n//     if (!select) return;  // Exit if the element doesn't exist\n//     outputs.forEach((output, index) => {\n//         const option = document.createElement('option');\n//         option.value = index;\n//         option.text = output.name;\n//         select.appendChild(option);\n//     });\n//     select.addEventListener('change', (event) => {\n//         midiOutput = outputs[event.target.value];\n//     });\n//     midiOutput = outputs[0]; // Default to the first output\n// }\n/////////////////////////////////////////\n/// TESTS FOR METRO-LOCKED SCHEDULING ///\n/////////////////////////////////////////\n// function scheduleNote(note, timeMs) {\n//     const vel = scaleValue(note.velocity, [0, 1], [0, 127]);\n//     const delay = timeMs - Tone.Time(Tone.Transport.position).toMilliseconds();\n//     const timeoutId = setTimeout(() => {\n//         midiOutput.send([0x90, note.midi, vel]);\n//     }, delay);\n//     timeouts.push(timeoutId);\n// }\n// async function loadMidiData(midiData) {\n//     isPlaying = true;  // Set the flag indicating that a MIDI is currently playing\n//     resetPlayback(); // Reset playback when a new file is chosen\n//     const midi = new Midi(midiData); // Convert the raw data into a Midi object\n//     console.log(\"Parsed MIDI:\", midi);\n//     const track = midi.tracks[0];\n//     Tone.Transport.start(); // Start the transport\n//     if (!midiOutput) {\n//         console.warn(\"MIDI output not available\");\n//         return;\n//     }\n//     const tempo = (midi.header.tempos && midi.header.tempos[0]) ? midi.header.tempos[0].bpm : 120; // Fallback to a default tempo if not defined ???\n//     const ticksPerBeat = midi.header.ppq;\n//     const msPerTick = (60 * 1000 / tempo) / ticksPerBeat;\n//     track.notes.forEach((note) => {\n//         if (!tickToMidiEventsMap[note.ticks]) {\n//             tickToMidiEventsMap[note.ticks] = [];\n//         }\n//         tickToMidiEventsMap[note.ticks].push(note);\n//     });\n//     const totalTimeMs = track.durationTicks * msPerTick;\n//     console.log(`Total time: ${totalTimeMs} ms`);\n//     console.log(`Total transport time: ${track.durationTicks * msPerTick / 1000} s`);\n//     setTimeout(() => {\n//         loopPlayback();\n//     }, totalTimeMs);\n// }\n/////////////////////////\n// Working stuff below //\n/////////////////////////\n// Reset playback\nfunction $63d35791daec472d$var$resetPlayback() {\n    $63d35791daec472d$var$timeouts.forEach(clearTimeout); // Clear all scheduled notes\n    $63d35791daec472d$var$timeouts = [];\n    currentNoteIndex = 0;\n    $63d35791daec472d$var$startTime = $63d35791daec472d$var$audioContext.currentTime;\n    currentTick = 0; // Reset to the first tick\n}\n// // Schedule a note to be played\n// // without Transport\nfunction $63d35791daec472d$var$scheduleNote(note, timeMs, index) {\n    const vel = $63d35791daec472d$var$scaleValue(note.velocity, [\n        0,\n        1\n    ], [\n        0,\n        127\n    ]);\n    const scheduledTime = $63d35791daec472d$var$startTime + timeMs / 1000;\n    const timeoutId = setTimeout(()=>{\n        $63d35791daec472d$var$midiOutput.send([\n            0x90,\n            note.midi,\n            vel\n        ]);\n        // console.log(`Note Number: ${note.midi}, Velocity: ${vel}, Scheduled Time: ${scheduledTime}`);\n        currentNoteIndex = index + 1;\n    // console.log(`${currentNoteIndex}: ${note.midi}, ${vel}`);\n    }, (scheduledTime - $63d35791daec472d$var$audioContext.currentTime) * 1000);\n    $63d35791daec472d$var$timeouts.push(timeoutId);\n}\n// //Main function that is responsible of retrieving the MIDI bytes, converting them into a MIDI object, parsing it, and scheduling the notes\n// //without Transport\nasync function $63d35791daec472d$var$loadMidiData(midiData) {\n    $63d35791daec472d$var$isPlaying = true; // Set the flag indicating that a MIDI is currently playing\n    $63d35791daec472d$var$resetPlayback(); // Reset playback when a new file is chosen\n    try {\n        const midi = new Midi(midiData); // Convert the raw data into a Midi object\n        $63d35791daec472d$var$processedMidiData = midiData; // Store the processed data in the global variable\n        // Adjust negative delta values\n        midi.tracks.forEach((track)=>{\n            let accumulatedDelta = 0;\n            track.notes.forEach((note)=>{\n                if (note.ticks < 0) {\n                    accumulatedDelta += note.ticks; // Accumulate the negative delta\n                    note.ticks = 0; // Reset the current note's ticks to 0\n                } else if (accumulatedDelta < 0) {\n                    const adjustment = Math.min(note.ticks, -accumulatedDelta); // Calculate the possible adjustment\n                    note.ticks -= adjustment; // Deduct the adjustment from the current note's ticks\n                    accumulatedDelta += adjustment; // Adjust the accumulated delta\n                }\n            });\n        });\n        console.log(\"Parsed MIDI:\", midi);\n        const track = midi.tracks[0];\n        Tone.Transport.start(); // Start the transport\n        if (!$63d35791daec472d$var$midiOutput) {\n            console.warn(\"MIDI output not available\");\n            return;\n        }\n        const tempo = midi.header.tempos && midi.header.tempos[0] ? midi.header.tempos[0].bpm : 120; // Fallback to a default tempo if not defined ???\n        const ticksPerBeat = midi.header.ppq;\n        const msPerTick = 60000 / tempo / ticksPerBeat;\n        track.notes.forEach((note, index)=>{\n            const timeMs = note.ticks * msPerTick;\n            const timeInTicks = note.ticks; // TODO: for transport\n            $63d35791daec472d$var$scheduleNote(note, timeMs, index);\n        });\n        const totalTimeMs = track.durationTicks * msPerTick;\n        const totalTransportTime = track.durationTicks * msPerTick / 1000;\n        console.log(`Total time: ${totalTimeMs} ms`);\n        console.log(`Total transport time: ${track.durationTicks * msPerTick / 1000} s`);\n        setTimeout(()=>{\n            $63d35791daec472d$var$loopPlayback();\n        }, totalTimeMs);\n    } catch (error) {\n        console.error(\"Error processing MIDI data:\", error.message);\n    }\n}\n// async function loadMidiData(midiData) {\n//     isPlaying = true;  // Set the flag indicating that a MIDI is currently playing\n//     resetPlayback(); // Reset playback when a new file is chosen\n//     const midi = new Midi(midiData); // Convert the raw data into a Midi object\n//     console.log(\"Parsed MIDI:\", midi);\n//     const track = midi.tracks[0];\n//     Tone.Transport.start(); // Start the transport\n//     if (!midiOutput) {\n//         console.warn(\"MIDI output not available\");\n//         return;\n//     }\n//     const tempo = (midi.header.tempos && midi.header.tempos[0]) ? midi.header.tempos[0].bpm : 120; // Fallback to a default tempo if not defined ???\n//     const ticksPerBeat = midi.header.ppq;\n//     const msPerTick = (60 * 1000 / tempo) / ticksPerBeat;\n//     track.notes.forEach((note, index) => {\n//         const timeMs = note.ticks * msPerTick;\n//         const timeInTicks = note.ticks; // TODO: for transport\n//         scheduleNote(note, timeMs, index);\n//     });\n//     const totalTimeMs = track.durationTicks * msPerTick;\n//     console.log(`Total time: ${totalTimeMs} ms`);\n//     console.log(`Total transport time: ${track.durationTicks * msPerTick / 1000} s`);\n//     setTimeout(() => {\n//         loopPlayback();\n//     }, totalTimeMs);\n// }\n// Loop the MIDI playback\nfunction $63d35791daec472d$var$loopPlayback() {\n    // Tone.Transport.stop();\n    $63d35791daec472d$var$isPlaying = false; // Reset the flag once the playback finishes\n    // Check if there's another MIDI in the queue and play it\n    if ($63d35791daec472d$var$midiQueue.length > 0) $63d35791daec472d$var$playNextMidi();\n    else // If there's no new MIDI in the queue, replay the current one\n    $63d35791daec472d$var$loadMidiData($63d35791daec472d$var$currentMidiForVisuals);\n}\n// Initialize the audio context on page load\n$63d35791daec472d$var$startAudioContext();\n// polling mechanism to regularly check globalFetch for new MIDI data:\nsetInterval(()=>{\n    $63d35791daec472d$var$checkAndEnqueueMidi();\n    $63d35791daec472d$var$playNextMidi();\n}, 500);\n// Check every 500 milliseconds. Adjust this value as necessary\n//  document.getElementById('play-pause-btn').addEventListener('click', function() {\n//     /// play pause button\n//     console.log(\"Play/pause button clicked but not working yet :))\");\n// });\n// Download the processed MIDI data\nfunction $63d35791daec472d$var$downloadMidi() {\n    if (!$63d35791daec472d$var$processedMidiData) {\n        console.error(\"No MIDI data available for download.\");\n        return;\n    }\n    const midiBlob = new Blob([\n        $63d35791daec472d$var$processedMidiData\n    ], {\n        type: \"audio/midi\"\n    });\n    const url = URL.createObjectURL(midiBlob);\n    const downloadLink = document.createElement(\"a\");\n    downloadLink.href = url;\n    downloadLink.download = \"2groove_gen.mid\";\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    document.body.removeChild(downloadLink);\n    URL.revokeObjectURL(url);\n}\nconst $63d35791daec472d$var$downloadButton = document.getElementById(\"download-btn\");\n$63d35791daec472d$var$downloadButton.addEventListener(\"click\", $63d35791daec472d$var$downloadMidi); ////////////////////////////\n ////////////////////////////\n ////////////////////////////\n // // w Transport\n // function scheduleNote(note, ticks, ticksPerBeat, bpm) {\n //     const vel = scaleValue(note.velocity, [0, 1], [0, 127]);\n //     const timeInSeconds = ticksToTime(ticks, ticksPerBeat, bpm);\n //     Tone.Transport.schedule(time => {\n //         midiOutput.send([0x90, note.midi, vel]);\n //         console.log(`Note Number: ${note.midi}, Velocity: ${vel}, Scheduled Time: ${time}`);\n //     }, timeInSeconds);\n // }\n // function scheduleNoteWithTone(note, timeInTicks, index, msPerTick) {\n //     const timeInSeconds = timeInTicks * msPerTick / 1000;\n //     const vel = scaleValue(note.velocity, [0, 1], [0, 127]);\n //     Tone.Transport.schedule(time => {\n //         midiOutput.send([0x90, note.midi, vel]);\n //         console.log(`Note Number: ${note.midi}, Velocity: ${vel}`);\n //     }, `+${timeInSeconds}`);\n // }\n // // w Transport\n // async function loadMidiData(midiData) {\n //     isPlaying = true;\n //     const midi = new Midi(midiData);\n //     const track = midi.tracks[0];\n //     if (!midiOutput) {\n //         console.warn(\"MIDI output not available\");\n //         return;\n //     }\n //     const tempo = (midi.header.tempos && midi.header.tempos[0]) ? midi.header.tempos[0].bpm : 120;\n //     const ticksPerBeat = midi.header.ppq;\n //     const msPerTick = (60 * 1000 / tempo) / ticksPerBeat;\n //     // Reset any previous schedules on Tone.Transport\n //     Tone.Transport.cancel();\n //     track.notes.forEach((note, index) => {\n //         const timeInTicks = note.ticks;\n //         scheduleNoteWithTone(note, timeInTicks, index, msPerTick);\n //     });\n //     // Since you want it to loop indefinitely, let's schedule the re-loading of the MIDI data \n //     // at the end of its duration.\n //     const totalTimeInTicks = track.durationTicks;\n //     Tone.Transport.scheduleOnce(() => {\n //         loopPlayback();\n //     }, `+${totalTimeInTicks * msPerTick / 1000}`);\n // }\n\n\n// Author: Çağrı Erdem, 2023\n// Description: Interactive \"piano roll\" visualization for 2groove web app.\n\n\n// Wrap entire sketch inside a function and use p5 instance mode to adapt it for module-based bundling \n// (functions become methods of the instance)\nconst $dfc31c5a77d3d4e0$var$sketch = (s)=>{\n    // MIDI Handling\n    s.loadMidiFile = function(event) {\n        const file = event.target.files[0];\n        if (file) {\n            const reader = new FileReader(); // Removed s. prefix\n            reader.onload = function(e) {\n                const arrayBuffer = e.target.result;\n                s.parseMidi(arrayBuffer); // Removed s. prefix from arrayBuffer\n            };\n            reader.readAsArrayBuffer(file);\n        }\n    };\n    // MIDI parse function without quantization\n    s.parseMidi = function(arrayBuffer, verbose = false) {\n        // Preliminary check for unexpected data format\n        if (typeof arrayBuffer === \"string\" && arrayBuffer.startsWith(\"<!do\")) {\n            console.error(\"Received unexpected HTML data instead of MIDI\");\n            return; // exit function early\n        }\n        try {\n            const midi = new Midi(arrayBuffer); // Assuming that `new Midi` can handle the raw arrayBuffer\n            // Adjust negative delta values\n            midi.tracks.forEach((track)=>{\n                let accumulatedDelta = 0;\n                track.notes.forEach((note)=>{\n                    if (note.ticks < 0) {\n                        accumulatedDelta += note.ticks; // Accumulate the negative delta\n                        note.ticks = 0; // Reset the current note's ticks to 0\n                    } else if (accumulatedDelta < 0) {\n                        const adjustment = Math.min(note.ticks, -accumulatedDelta); // Calculate the possible adjustment\n                        note.ticks -= adjustment; // Deduct the adjustment from the current note's ticks\n                        accumulatedDelta += adjustment; // Adjust the accumulated delta\n                    }\n                });\n            });\n            s.noteSequences = midi.tracks.map((track)=>{\n                if (verbose) track.notes.forEach((note)=>{\n                    console.log(note);\n                });\n                return {\n                    notes: track.notes.map((note)=>{\n                        return {\n                            pitch: note.midi,\n                            startTime: note.time,\n                            endTime: note.time + note.duration,\n                            velocity: note.velocity // Include velocity in the note object\n                        };\n                    })\n                };\n            });\n        } catch (error) {\n            console.error(\"Error processing MIDI data in pRoll.js:\", error.message);\n        }\n    };\n    // s.parseMidi = function(arrayBuffer, verbose = false) { \n    //     const midi = new Midi(arrayBuffer);  // Removed s. prefix\n    //     s.noteSequences = midi.tracks.map(track => {\n    //         return { notes: track.notes.map(note => {\n    //             if (verbose){\n    //                 track.notes.forEach(note => {\n    //                     console.log(note);\n    //                 })}; \n    //             return {\n    //                 pitch: note.midi,\n    //                 startTime: note.time,\n    //                 endTime: note.time + note.duration,\n    //                 velocity: note.velocity // Include velocity in the note object\n    //             };\n    //         })};\n    //     });\n    // }\n    // Constants and global variables\n    s.NUM_STEPS = 32; // Number of quantized steps; this must be equal to the length of the array\n    s.SUBDIVISIONS = 4; // quarter note = 1, eighth note = 2, etc.\n    s.NUM_NOTES = 20; // total number of notes of the piano roll\n    s.LOWEST_MIDI_NOTE = 34; // -1 worked better on the canvas\n    s.noteSequences;\n    s.resizingWidth = false;\n    s.resizingHeight = false;\n    s.WIDTH = 550;\n    s.HEIGHT = 250;\n    s.EDGE_THRESHOLD = 10; // Distance from edge to enable resizing\n    s.offset_x = 1.3; // offset for the vertical lines and/or notes (if necessary)\n    s.offset_y = 1.5;\n    s.drumMappings = {\n        35: \"acoustic bass drum\",\n        36: \"kick\",\n        37: \"side-stick\",\n        38: \"snare\",\n        39: \"clap\",\n        40: \"electric snare\",\n        41: \"floor-tom\",\n        42: \"closed-hihat\",\n        43: \"high-tom\",\n        44: \"pedal-hihat\",\n        45: \"low-tom\",\n        46: \"open-hihat\",\n        47: \"mid-tom\",\n        48: \"hi-tom\",\n        49: \"crash\",\n        50: \"high-tom\",\n        51: \"ride\",\n        52: \"chinese cymbal\"\n    };\n    // Functions\n    s.setup = function() {\n        s.createCanvas(s.WIDTH, s.HEIGHT).parent(\"pianoRollContainer\");\n    // pRollCanvas.parent('pianoRollContainer'); // attach to the specific div\n    // file input //no file input with the new UI\n    // const midiInput = document.getElementById('fileInput'); // Get the input element by its ID\n    // midiInput.addEventListener('change', s.loadMidiFile); // Add an event listener for when a user selects a file\n    // // fetch button\n    // let fetchButton = s.createButton('Fetch MIDI Data');\n    // fetchButton.mousePressed(s.triggerMidiFetch); \n    };\n    s.draw = function() {\n        s.background(\"#fae\"); // Set the background color of the entire canvas\n        s.tappedRhythm = (0, $57d1b30337fe6afc$export$ffd9cee7b4d9db2f)(); // Get the tapped rhythms from the interface module\n        // Fetch MIDI data from the server\n        const midi = (0, $63d35791daec472d$export$247c826938a8d2eb)();\n        if (midi) s.parseMidi(midi);\n        var x = 0 + s.offset_x;\n        var y = 0 + s.offset_y;\n        // var y = s.HEIGHT - s.WIDTH;\n        s.drawTappedRhythm(s.tappedRhythm, x, y, s.WIDTH, s.WIDTH);\n        if (s.noteSequences) s.drawNotes(s.noteSequences[0].notes, x, y, s.WIDTH, s.WIDTH);\n        s.fill(255, 64);\n        // Draw vertical lines for subdivisions\n        s.stroke(\"white\"); // Set line color to black\n        const lineInterval = s.WIDTH / (s.NUM_STEPS / 4 * s.SUBDIVISIONS);\n        for(let i = 0; i < s.WIDTH; i += lineInterval)s.line(i + s.offset_x, 0, i + s.offset_x, s.HEIGHT);\n        // Draw vertical lines for beats\n        s.stroke(\"rgba(0,255,0,0.25)\");\n        s.strokeWeight(1.2);\n        const beatInterval = s.WIDTH / (s.NUM_STEPS / 4);\n        for(let i = 0; i < s.WIDTH; i += beatInterval)s.line(i + s.offset_x, 0, i + s.offset_x, s.HEIGHT);\n        // Draw vertical lines for bars\n        s.stroke(\"rgb(0,255,0)\");\n        s.strokeWeight(0.8);\n        const barInterval = s.WIDTH / (s.NUM_STEPS / 16);\n        for(let i = 0; i < s.WIDTH; i += barInterval)s.line(i + s.offset_x, 0, i + s.offset_x, s.HEIGHT);\n        s.showPopup(); // Show popup when mouse is near the edge of the note cell-sections\n    };\n    // Draw function for quantized tapped rhythm \n    s.drawTappedRhythm = function(tappedRhythm, x, y, width, height) {\n        const totalDuration = tappedRhythm.length;\n        s.push();\n        s.translate(x, y);\n        var cellWidth = width / totalDuration;\n        var cellHeight = height / s.NUM_NOTES; // Assuming each tap corresponds to a note\n        tappedRhythm.forEach(function(tap, index) {\n            if (tap === 1) {\n                var noteColor = s.color(219, 247, 19, 120); // Less opaque\n                s.fill(noteColor);\n                s.rect(cellWidth * index, 0, cellWidth, cellHeight);\n            }\n        });\n        s.pop();\n    };\n    // Draw function without quantization\n    s.drawNotes = function(notes, x, y, width, height) {\n        const totalDuration = s.noteSequences.reduce((max, seq)=>{\n            const endTimes = seq.notes.map((note)=>note.endTime);\n            return Math.max(max, ...endTimes);\n        }, 0);\n        s.push();\n        s.translate(x, y);\n        var cellWidth = s.WIDTH / totalDuration; // Update cellWidth based on the new width\n        var cellHeight = s.HEIGHT / s.NUM_NOTES; // Update cellHeight based on the new height\n        notes.forEach(function(note) {\n            var emptyNoteSpacer = 10;\n            var noteColor = s.color(255, 0, 191, note.velocity * 255);\n            s.stroke(\"black\"); // strokes for the notes\n            s.strokeWeight(0.6);\n            s.fill(noteColor);\n            s.rect(emptyNoteSpacer + cellWidth * note.startTime, s.HEIGHT - cellHeight * (note.pitch - s.LOWEST_MIDI_NOTE), cellWidth * (note.endTime - note.startTime) - emptyNoteSpacer, cellHeight);\n        });\n        s.pop();\n    };\n    // For example:\n    s.mousePressed = function() {\n        // Check if mouse is near the right edge of the canvas\n        if (s.abs(s.mouseX - s.WIDTH) < s.EDGE_THRESHOLD) s.resizingWidth = true;\n        // Check if mouse is near the bottom edge of the canvas\n        if (s.abs(s.mouseY - s.HEIGHT) < s.EDGE_THRESHOLD) s.resizingHeight = true;\n    };\n    s.mouseDragged = function() {\n        // If resizing width, update WIDTH based on mouseX\n        if (s.resizingWidth) s.WIDTH = s.mouseX;\n        // If resizing height, update HEIGHT based on mouseY\n        if (s.resizingHeight) s.HEIGHT = s.mouseY;\n        // Apply the new width and height to the canvas\n        s.resizeCanvas(s.WIDTH, s.HEIGHT);\n    };\n    s.mouseReleased = function() {\n        // Reset resizing flags\n        s.resizingWidth = false;\n        s.resizingHeight = false;\n    };\n    s.showPopup = function() {\n        if (s.mouseX > s.offset_x && s.mouseX < s.WIDTH + s.offset_x && s.mouseY > 0 && s.mouseY < s.HEIGHT) {\n            const cellHeight = s.HEIGHT / s.NUM_NOTES;\n            const section = Math.floor((s.HEIGHT - s.mouseY) / cellHeight);\n            const midiNote = parseInt(Object.keys(s.drumMappings)[section]);\n            if (midiNote >= s.LOWEST_MIDI_NOTE && midiNote != 35) {\n                const drumPart = s.drumMappings[midiNote];\n                const popupWidth = s.textWidth(drumPart) + 10;\n                // Decide the x position of the popup based on mouseX\n                let popupX = s.mouseX + 5;\n                if (s.mouseX > (s.WIDTH + s.offset_x) / 2) popupX = s.mouseX - popupWidth - 5;\n                s.fill(255);\n                s.rect(popupX, s.mouseY, popupWidth, 20);\n                s.fill(0);\n                s.text(drumPart, popupX + 5, s.mouseY + 15);\n            }\n        }\n    };\n};\n// Run the sketch:\nnew p5($dfc31c5a77d3d4e0$var$sketch);\n\n\n// worker for client-side ajax requests\nself.addEventListener(\"message\", function(event) {\n    const data = event.data;\n    if (data.cmd === \"sendArray\") $e4758edede27b98a$var$sendArrayToServer(data.array, data.bpm, data.temperatureValue, data.hitTolerance, data.isHttpConnected, data.httpIp, data.portInput, data.samplingStrategy);\n});\n// function sendArrayToServer(array, bpm, temperatureValue, hitTolerance, isHttpConnected, httpIp, portInput, samplingStrategy) {\n//     if (!isHttpConnected) return;\n//     const data_url = `http://${httpIp}:${portInput}/send_array`;\n//     console.log(\"Sending request to:\", data_url);\n//     const payload = {\n//         method: 'POST',\n//         headers: {\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify({\n//             array: array,\n//             bpm: bpm,\n//             temp: temperatureValue,\n//             thresh: hitTolerance,\n//             samplingStrategy: samplingStrategy\n//         })\n//     };\n//     fetch(data_url, payload)\n//     .then(response => response.arrayBuffer())\n//     .then(data => {\n//         console.log(\"Processing tapped rhythms...\");\n//         // send a message back to the main thread if necessary\n//         self.postMessage({type: 'arrayProcessed', data: data});\n//     })\n//     .catch(error => {\n//         console.error(\"Error:\", error);\n//         self.postMessage({type: 'error', error: error});\n//     });\n// }\nfunction $e4758edede27b98a$var$sendArrayToServer(array, bpm, temperatureValue, hitTolerance, isHttpConnected, httpIp, portInput, samplingStrategy) {\n    if (!isHttpConnected) return;\n    const data_url = `http://${httpIp}:${portInput}/send_array`;\n    console.log(\"Sending request to:\", data_url);\n    const payload = {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            array: array,\n            bpm: bpm,\n            temp: temperatureValue,\n            thresh: hitTolerance,\n            samplingStrategy: samplingStrategy\n        })\n    };\n    fetch(data_url, payload).then((response)=>response.json()) // Process as JSON first\n    // checking the success field of the response, and if it's true, you're converting the data field (base64 encoded string of the MIDI binary) \n    // back to a byte array, and then you're posting this byte array back to the main thread:\n    .then((data)=>{\n        if (data.success) {\n            console.log(\"Processing tapped rhythms...\");\n            // const midiData = new Uint8Array(data.data);  // Convert base64 string to byte array\n            const base64decoded = atob(data.data);\n            const midiData = new Uint8Array(base64decoded.length).map((_, i)=>base64decoded.charCodeAt(i));\n            console.log(\"Received MIDI data length:\", midiData.length);\n            self.postMessage({\n                type: \"arrayProcessed\",\n                data: midiData\n            });\n        } else {\n            console.warn(data.message);\n            self.postMessage({\n                type: \"error\",\n                error: new Error(data.message)\n            });\n        }\n    }).catch((error)=>{\n        console.error(\"Error:\", error);\n        self.postMessage({\n            type: \"error\",\n            error: error\n        });\n    });\n}\n\n\n// dedicated thread for queueing up rhythms\nlet $55223a1de456471a$var$midiEvents = []; // This will hold the queued MIDI events\nself.addEventListener(\"message\", function(event) {\n    const data = event.data;\n    switch(data.cmd){\n        case \"enqueue\":\n            $55223a1de456471a$var$midiEvents.push(data.event);\n            break;\n        case \"dequeue\":\n            // Logic to decide which event(s) should be sent next\n            const nextEvent = $55223a1de456471a$var$midiEvents.shift(); // Simplified example\n            self.postMessage({\n                cmd: \"broadcast\",\n                event: nextEvent\n            });\n            break;\n    }\n});\n\n\n // ----------------------------\n // ----------------------------\n\n\n//# sourceMappingURL=index.b186437a.js.map\n","\"use strict\";\n\nvar mapping = new Map();\nfunction register(baseUrl, manifest) {\n  for (var i = 0; i < manifest.length - 1; i += 2) {\n    mapping.set(manifest[i], {\n      baseUrl: baseUrl,\n      path: manifest[i + 1]\n    });\n  }\n}\nfunction resolve(id) {\n  var resolved = mapping.get(id);\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n  return new URL(resolved.path, resolved.baseUrl).toString();\n}\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","module.exports = new __parcel__URL__(\"closed-hihat_1.c3598e64.mp3\").toString();","module.exports = new __parcel__URL__(\"closed-hihat_2.df9c6d68.mp3\").toString();","module.exports = new __parcel__URL__(\"closed-hihat_3.2e25a9fb.mp3\").toString();","module.exports = new __parcel__URL__(\"closed-hihat_4.546f9296.mp3\").toString();","module.exports = new __parcel__URL__(\"closed-hihat_5.84f49b25.mp3\").toString();","module.exports = new __parcel__URL__(\"closed-hihat_6.583c3a3d.mp3\").toString();","module.exports = new __parcel__URL__(\"closed-hihat_7.769c6d06.mp3\").toString();","module.exports = new __parcel__URL__(\"closed-hihat_8.6911f924.mp3\").toString();","module.exports = new __parcel__URL__(\"closed-hihat_9.8e0b0ab6.mp3\").toString();","module.exports = new __parcel__URL__(\"closed-hihat_10.51d068e3.mp3\").toString();","module.exports = new __parcel__URL__(\"closed-hihat_11.8cabb786.mp3\").toString();","module.exports = new __parcel__URL__(\"closed-hihat_12.b1e4a2bf.mp3\").toString();","module.exports = new __parcel__URL__(\"open-hihat_1.1fa9c461.mp3\").toString();","module.exports = new __parcel__URL__(\"open-hihat_2.2f935a0f.mp3\").toString();","module.exports = new __parcel__URL__(\"open-hihat_3.ed4ec909.mp3\").toString();","module.exports = new __parcel__URL__(\"open-hihat_4.5364cb46.mp3\").toString();","module.exports = new __parcel__URL__(\"open-hihat_5.14edd338.mp3\").toString();","module.exports = new __parcel__URL__(\"open-hihat_6.0efdc832.mp3\").toString();","module.exports = new __parcel__URL__(\"open-hihat_7.f7c80852.mp3\").toString();","module.exports = new __parcel__URL__(\"open-hihat_8.e6bbdeff.mp3\").toString();","module.exports = new __parcel__URL__(\"open-hihat_9.ce51d058.mp3\").toString();","module.exports = new __parcel__URL__(\"open-hihat_10.4ec7a4eb.mp3\").toString();","module.exports = new __parcel__URL__(\"open-hihat_11.0bc90e96.mp3\").toString();","module.exports = new __parcel__URL__(\"open-hihat_12.a95c984b.mp3\").toString();","module.exports = new __parcel__URL__(\"crash_1.6aa3010b.mp3\").toString();","module.exports = new __parcel__URL__(\"crash_2.ad19f12b.mp3\").toString();","module.exports = new __parcel__URL__(\"crash_3.8ba5b29e.mp3\").toString();","module.exports = new __parcel__URL__(\"crash_4.a17a8a67.mp3\").toString();","module.exports = new __parcel__URL__(\"crash_5.8b1d5604.mp3\").toString();","module.exports = new __parcel__URL__(\"crash_6.9dcf9ed6.mp3\").toString();","module.exports = new __parcel__URL__(\"crash_7.6a40b51c.mp3\").toString();","module.exports = new __parcel__URL__(\"crash_8.99d0fd8d.mp3\").toString();","module.exports = new __parcel__URL__(\"crash_9.4b8594d9.mp3\").toString();","module.exports = new __parcel__URL__(\"crash_10.0d7efbff.mp3\").toString();","module.exports = new __parcel__URL__(\"crash_11.cd2e80a9.mp3\").toString();","module.exports = new __parcel__URL__(\"crash_12.4ad8210f.mp3\").toString();","module.exports = new __parcel__URL__(\"ride_1.b04f8857.mp3\").toString();","module.exports = new __parcel__URL__(\"ride_2.1e254981.mp3\").toString();","module.exports = new __parcel__URL__(\"ride_3.506fe573.mp3\").toString();","module.exports = new __parcel__URL__(\"ride_4.f8c46940.mp3\").toString();","module.exports = new __parcel__URL__(\"ride_5.9eedc3c5.mp3\").toString();","module.exports = new __parcel__URL__(\"ride_6.6119b558.mp3\").toString();","module.exports = new __parcel__URL__(\"ride_7.05f04bb8.mp3\").toString();","module.exports = new __parcel__URL__(\"ride_8.e0a39ea5.mp3\").toString();","module.exports = new __parcel__URL__(\"ride_9.b606a5a3.mp3\").toString();","module.exports = new __parcel__URL__(\"ride_10.c4914e82.mp3\").toString();","module.exports = new __parcel__URL__(\"ride_11.657bdea3.mp3\").toString();","module.exports = new __parcel__URL__(\"ride_12.b86f4115.mp3\").toString();","module.exports = new __parcel__URL__(\"kick_1.6d75be8e.mp3\").toString();","module.exports = new __parcel__URL__(\"kick_2.eef489eb.mp3\").toString();","module.exports = new __parcel__URL__(\"kick_3.d59afb9a.mp3\").toString();","module.exports = new __parcel__URL__(\"kick_4.b6aa1d5a.mp3\").toString();","module.exports = new __parcel__URL__(\"kick_5.5a4a1577.mp3\").toString();","module.exports = new __parcel__URL__(\"kick_6.1b1aa317.mp3\").toString();","module.exports = new __parcel__URL__(\"kick_7.0e6a60bd.mp3\").toString();","module.exports = new __parcel__URL__(\"kick_8.a6e6cb22.mp3\").toString();","module.exports = new __parcel__URL__(\"kick_9.e90f0f7b.mp3\").toString();","module.exports = new __parcel__URL__(\"kick_10.2508647b.mp3\").toString();","module.exports = new __parcel__URL__(\"kick_11.ca60b639.mp3\").toString();","module.exports = new __parcel__URL__(\"kick_12.183b69d7.mp3\").toString();","module.exports = new __parcel__URL__(\"snare_1.5e9b43b5.mp3\").toString();","module.exports = new __parcel__URL__(\"snare_2.673c28c6.mp3\").toString();","module.exports = new __parcel__URL__(\"snare_3.3b5c10f7.mp3\").toString();","module.exports = new __parcel__URL__(\"snare_4.54b1f023.mp3\").toString();","module.exports = new __parcel__URL__(\"snare_5.81e6e076.mp3\").toString();","module.exports = new __parcel__URL__(\"snare_6.109bef8f.mp3\").toString();","module.exports = new __parcel__URL__(\"snare_7.a258b319.mp3\").toString();","module.exports = new __parcel__URL__(\"snare_8.57c5e497.mp3\").toString();","module.exports = new __parcel__URL__(\"snare_9.3d8c9482.mp3\").toString();","module.exports = new __parcel__URL__(\"snare_10.b2b762b9.mp3\").toString();","module.exports = new __parcel__URL__(\"snare_11.64dc3f03.mp3\").toString();","module.exports = new __parcel__URL__(\"snare_12.7da1f5d8.mp3\").toString();","module.exports = new __parcel__URL__(\"hi-tom_1.ded5f514.mp3\").toString();","module.exports = new __parcel__URL__(\"hi-tom_2.8574ea96.mp3\").toString();","module.exports = new __parcel__URL__(\"hi-tom_3.9438c9df.mp3\").toString();","module.exports = new __parcel__URL__(\"hi-tom_4.928d7f59.mp3\").toString();","module.exports = new __parcel__URL__(\"hi-tom_5.a339ccb1.mp3\").toString();","module.exports = new __parcel__URL__(\"hi-tom_6.94994fbe.mp3\").toString();","module.exports = new __parcel__URL__(\"hi-tom_7.ee3ea907.mp3\").toString();","module.exports = new __parcel__URL__(\"hi-tom_8.38b2f80d.mp3\").toString();","module.exports = new __parcel__URL__(\"hi-tom_9.5a2cd443.mp3\").toString();","module.exports = new __parcel__URL__(\"hi-tom_10.dba10a8d.mp3\").toString();","module.exports = new __parcel__URL__(\"hi-tom_11.de67cef1.mp3\").toString();","module.exports = new __parcel__URL__(\"hi-tom_12.f5d60938.mp3\").toString();","module.exports = new __parcel__URL__(\"mid-tom_1.3fc809be.mp3\").toString();","module.exports = new __parcel__URL__(\"mid-tom_2.6b59b8f0.mp3\").toString();","module.exports = new __parcel__URL__(\"mid-tom_3.17f1cc7f.mp3\").toString();","module.exports = new __parcel__URL__(\"mid-tom_4.72bb4506.mp3\").toString();","module.exports = new __parcel__URL__(\"mid-tom_5.c1baf999.mp3\").toString();","module.exports = new __parcel__URL__(\"mid-tom_6.f2fc805f.mp3\").toString();","module.exports = new __parcel__URL__(\"mid-tom_7.970248d0.mp3\").toString();","module.exports = new __parcel__URL__(\"mid-tom_8.73bfd563.mp3\").toString();","module.exports = new __parcel__URL__(\"mid-tom_9.211b9f20.mp3\").toString();","module.exports = new __parcel__URL__(\"mid-tom_10.6a403e17.mp3\").toString();","module.exports = new __parcel__URL__(\"mid-tom_11.58388abe.mp3\").toString();","module.exports = new __parcel__URL__(\"mid-tom_12.bcd70088.mp3\").toString();","module.exports = new __parcel__URL__(\"floor-tom_1.12e2e635.mp3\").toString();","module.exports = new __parcel__URL__(\"floor-tom_2.e6e78471.mp3\").toString();","module.exports = new __parcel__URL__(\"floor-tom_3.49806c39.mp3\").toString();","module.exports = new __parcel__URL__(\"floor-tom_4.a291815e.mp3\").toString();","module.exports = new __parcel__URL__(\"floor-tom_5.090c6c58.mp3\").toString();","module.exports = new __parcel__URL__(\"floor-tom_6.e90de229.mp3\").toString();","module.exports = new __parcel__URL__(\"floor-tom_7.68418ad4.mp3\").toString();","module.exports = new __parcel__URL__(\"floor-tom_8.20433cf0.mp3\").toString();","module.exports = new __parcel__URL__(\"floor-tom_9.f95e6621.mp3\").toString();","module.exports = new __parcel__URL__(\"floor-tom_10.8525c2e8.mp3\").toString();","module.exports = new __parcel__URL__(\"floor-tom_11.58d9143f.mp3\").toString();","module.exports = new __parcel__URL__(\"floor-tom_12.24ed6b48.mp3\").toString();","require('./helpers/bundle-manifest').register(new __parcel__URL__(\"\").toString(),JSON.parse(\"[\\\"g3LtT\\\",\\\"index.b186437a.js\\\",\\\"27RPn\\\",\\\"closed-hihat_1.c3598e64.mp3\\\",\\\"cpxBE\\\",\\\"closed-hihat_2.df9c6d68.mp3\\\",\\\"bEf6y\\\",\\\"closed-hihat_3.2e25a9fb.mp3\\\",\\\"hz2D1\\\",\\\"closed-hihat_4.546f9296.mp3\\\",\\\"lxeZx\\\",\\\"closed-hihat_5.84f49b25.mp3\\\",\\\"kFLJw\\\",\\\"closed-hihat_6.583c3a3d.mp3\\\",\\\"72vaF\\\",\\\"closed-hihat_7.769c6d06.mp3\\\",\\\"CMLMa\\\",\\\"closed-hihat_8.6911f924.mp3\\\",\\\"lzUbx\\\",\\\"closed-hihat_9.8e0b0ab6.mp3\\\",\\\"lXL2N\\\",\\\"closed-hihat_10.51d068e3.mp3\\\",\\\"amCq5\\\",\\\"closed-hihat_11.8cabb786.mp3\\\",\\\"2HUd2\\\",\\\"closed-hihat_12.b1e4a2bf.mp3\\\",\\\"3ClXy\\\",\\\"open-hihat_1.1fa9c461.mp3\\\",\\\"iQW2c\\\",\\\"open-hihat_2.2f935a0f.mp3\\\",\\\"d7oFT\\\",\\\"open-hihat_3.ed4ec909.mp3\\\",\\\"jcetE\\\",\\\"open-hihat_4.5364cb46.mp3\\\",\\\"7Gdj8\\\",\\\"open-hihat_5.14edd338.mp3\\\",\\\"95skG\\\",\\\"open-hihat_6.0efdc832.mp3\\\",\\\"kpaVg\\\",\\\"open-hihat_7.f7c80852.mp3\\\",\\\"ao88n\\\",\\\"open-hihat_8.e6bbdeff.mp3\\\",\\\"j1LpH\\\",\\\"open-hihat_9.ce51d058.mp3\\\",\\\"QNB9J\\\",\\\"open-hihat_10.4ec7a4eb.mp3\\\",\\\"489CK\\\",\\\"open-hihat_11.0bc90e96.mp3\\\",\\\"7LvUx\\\",\\\"open-hihat_12.a95c984b.mp3\\\",\\\"gXdak\\\",\\\"crash_1.6aa3010b.mp3\\\",\\\"9DcNa\\\",\\\"crash_2.ad19f12b.mp3\\\",\\\"k0tsl\\\",\\\"crash_3.8ba5b29e.mp3\\\",\\\"c0MhK\\\",\\\"crash_4.a17a8a67.mp3\\\",\\\"jVnI3\\\",\\\"crash_5.8b1d5604.mp3\\\",\\\"kxhjp\\\",\\\"crash_6.9dcf9ed6.mp3\\\",\\\"fwWtj\\\",\\\"crash_7.6a40b51c.mp3\\\",\\\"fRnJB\\\",\\\"crash_8.99d0fd8d.mp3\\\",\\\"5fY2q\\\",\\\"crash_9.4b8594d9.mp3\\\",\\\"1MKxR\\\",\\\"crash_10.0d7efbff.mp3\\\",\\\"k2oUc\\\",\\\"crash_11.cd2e80a9.mp3\\\",\\\"bC5AX\\\",\\\"crash_12.4ad8210f.mp3\\\",\\\"13aa4\\\",\\\"ride_1.b04f8857.mp3\\\",\\\"cZBN5\\\",\\\"ride_2.1e254981.mp3\\\",\\\"i6TIL\\\",\\\"ride_3.506fe573.mp3\\\",\\\"59ldi\\\",\\\"ride_4.f8c46940.mp3\\\",\\\"621AQ\\\",\\\"ride_5.9eedc3c5.mp3\\\",\\\"e6gYE\\\",\\\"ride_6.6119b558.mp3\\\",\\\"eFwVf\\\",\\\"ride_7.05f04bb8.mp3\\\",\\\"ceeRN\\\",\\\"ride_8.e0a39ea5.mp3\\\",\\\"9ftJd\\\",\\\"ride_9.b606a5a3.mp3\\\",\\\"fdrjq\\\",\\\"ride_10.c4914e82.mp3\\\",\\\"72TSA\\\",\\\"ride_11.657bdea3.mp3\\\",\\\"3KOWW\\\",\\\"ride_12.b86f4115.mp3\\\",\\\"2699t\\\",\\\"kick_1.6d75be8e.mp3\\\",\\\"6gWGR\\\",\\\"kick_2.eef489eb.mp3\\\",\\\"ke6mk\\\",\\\"kick_3.d59afb9a.mp3\\\",\\\"aUWlm\\\",\\\"kick_4.b6aa1d5a.mp3\\\",\\\"3G3Wu\\\",\\\"kick_5.5a4a1577.mp3\\\",\\\"ilWQC\\\",\\\"kick_6.1b1aa317.mp3\\\",\\\"7CUwr\\\",\\\"kick_7.0e6a60bd.mp3\\\",\\\"5gQbC\\\",\\\"kick_8.a6e6cb22.mp3\\\",\\\"i137T\\\",\\\"kick_9.e90f0f7b.mp3\\\",\\\"aFEUV\\\",\\\"kick_10.2508647b.mp3\\\",\\\"8OaP8\\\",\\\"kick_11.ca60b639.mp3\\\",\\\"1sn3b\\\",\\\"kick_12.183b69d7.mp3\\\",\\\"4sBJH\\\",\\\"snare_1.5e9b43b5.mp3\\\",\\\"6zKvu\\\",\\\"snare_2.673c28c6.mp3\\\",\\\"2FDGo\\\",\\\"snare_3.3b5c10f7.mp3\\\",\\\"9XPce\\\",\\\"snare_4.54b1f023.mp3\\\",\\\"iv9W4\\\",\\\"snare_5.81e6e076.mp3\\\",\\\"jVsDc\\\",\\\"snare_6.109bef8f.mp3\\\",\\\"aRTsm\\\",\\\"snare_7.a258b319.mp3\\\",\\\"epW8J\\\",\\\"snare_8.57c5e497.mp3\\\",\\\"dWtN8\\\",\\\"snare_9.3d8c9482.mp3\\\",\\\"appk9\\\",\\\"snare_10.b2b762b9.mp3\\\",\\\"jtGfM\\\",\\\"snare_11.64dc3f03.mp3\\\",\\\"5ZTYV\\\",\\\"snare_12.7da1f5d8.mp3\\\",\\\"3t4ZY\\\",\\\"hi-tom_1.ded5f514.mp3\\\",\\\"cGpkD\\\",\\\"hi-tom_2.8574ea96.mp3\\\",\\\"p88ov\\\",\\\"hi-tom_3.9438c9df.mp3\\\",\\\"huESR\\\",\\\"hi-tom_4.928d7f59.mp3\\\",\\\"lNGPD\\\",\\\"hi-tom_5.a339ccb1.mp3\\\",\\\"7F98S\\\",\\\"hi-tom_6.94994fbe.mp3\\\",\\\"5MZk0\\\",\\\"hi-tom_7.ee3ea907.mp3\\\",\\\"g425Q\\\",\\\"hi-tom_8.38b2f80d.mp3\\\",\\\"7ZXIl\\\",\\\"hi-tom_9.5a2cd443.mp3\\\",\\\"ioQxK\\\",\\\"hi-tom_10.dba10a8d.mp3\\\",\\\"ezG6N\\\",\\\"hi-tom_11.de67cef1.mp3\\\",\\\"1OK0v\\\",\\\"hi-tom_12.f5d60938.mp3\\\",\\\"1TINM\\\",\\\"mid-tom_1.3fc809be.mp3\\\",\\\"cnbHY\\\",\\\"mid-tom_2.6b59b8f0.mp3\\\",\\\"j8i6x\\\",\\\"mid-tom_3.17f1cc7f.mp3\\\",\\\"hGK9k\\\",\\\"mid-tom_4.72bb4506.mp3\\\",\\\"99LZb\\\",\\\"mid-tom_5.c1baf999.mp3\\\",\\\"ckMI1\\\",\\\"mid-tom_6.f2fc805f.mp3\\\",\\\"3fSyH\\\",\\\"mid-tom_7.970248d0.mp3\\\",\\\"5X6dl\\\",\\\"mid-tom_8.73bfd563.mp3\\\",\\\"lV4UW\\\",\\\"mid-tom_9.211b9f20.mp3\\\",\\\"1WsAw\\\",\\\"mid-tom_10.6a403e17.mp3\\\",\\\"jYoji\\\",\\\"mid-tom_11.58388abe.mp3\\\",\\\"c8zf2\\\",\\\"mid-tom_12.bcd70088.mp3\\\",\\\"cOCNL\\\",\\\"floor-tom_1.12e2e635.mp3\\\",\\\"20vWf\\\",\\\"floor-tom_2.e6e78471.mp3\\\",\\\"8Jp44\\\",\\\"floor-tom_3.49806c39.mp3\\\",\\\"9BfCB\\\",\\\"floor-tom_4.a291815e.mp3\\\",\\\"9jrRf\\\",\\\"floor-tom_5.090c6c58.mp3\\\",\\\"4xrKq\\\",\\\"floor-tom_6.e90de229.mp3\\\",\\\"25ZoB\\\",\\\"floor-tom_7.68418ad4.mp3\\\",\\\"3am9S\\\",\\\"floor-tom_8.20433cf0.mp3\\\",\\\"7Q71Z\\\",\\\"floor-tom_9.f95e6621.mp3\\\",\\\"aFjLJ\\\",\\\"floor-tom_10.8525c2e8.mp3\\\",\\\"9glTC\\\",\\\"floor-tom_11.58d9143f.mp3\\\",\\\"wU6WE\\\",\\\"floor-tom_12.24ed6b48.mp3\\\",\\\"csRZ8\\\",\\\"workerAjax.6b1dfd8f.js\\\",\\\"lsp70\\\",\\\"A.1bc05b06.png\\\",\\\"abxMS\\\",\\\"B.873f0259.png\\\"]\"));","// Author: Çağrı Erdem, 2023\n// Description: Main bundler script for 2groove web app.\n\n// import \"./../styles/mainUI.css\";\n// ----------------------------\n// ----------------------------\nimport \"./drSampler.js\";\n// import \"./efx.js\";\nimport \"./globalFetch.js\";\nimport \"./interface.js\";\nimport \"./midiBroadcast.js\";\nimport \"./pRoll.js\";\nimport \"./workers/workerAjax.js\";\nimport \"./workers/workerQueue.js\";\n// ----------------------------\n// ----------------------------\n","// Author: Çağrı Erdem, 2023\n// Description: MIDI Drum Sampler for 2groove web app.\n\n// import { delay, eq, reverb } from \"./efx.js\";\nimport { samples } from './samples.js';\n\n\nconst drumParts = ['closed-hihat', 'open-hihat', 'crash', 'ride', 'kick', 'snare', 'hi-tom', 'mid-tom', 'floor-tom'];\nconst samplers = {};\ndrumParts.forEach(drum => {\n    const drumSamples = {};\n    samples[drum].forEach((samplePath, index) => {\n        const noteName = Tone.Frequency(60 + index, \"midi\").toNote();\n        drumSamples[noteName] = samplePath;\n    });\n    samplers[drum] = new Tone.Sampler({\n        urls: drumSamples\n    }).toDestination();\n});\n\n\n// Function to map MIDI velocity to the appropriate sample note\nfunction mapVelocityToSample(velocity) {\n    const numberOfSamples = 12;\n    // 0–127 divided into 12 segments\n    const segment = Math.ceil(128 / numberOfSamples);\n    // Calculate the sample index (1–12) based on the velocity\n    const sampleIndex = Math.ceil(velocity / segment);\n    // Calculate the MIDI note number (60 is C3, 71 is B3)\n    const noteNumber = 60 + sampleIndex - 1;\n    // Convert the MIDI note number to note name (C3, C#3, D3, ...)\n    return Tone.Frequency(noteNumber, \"midi\").toNote();\n}\n\n\n  // Dict to map MIDI note number to the appropriate sample note\nconst drumMappings = { // TODO: String or Int?\n    'C1' : \"kick\",\n    'D1' : \"snare\",\n    'F1' : \"floor-tom\",\n    'B1' : \"mid-tom\",\n    'C2' : \"hi-tom\",\n    'C#2' : \"crash\",\n    'D#2' : \"ride\",\n    'F#1' : \"closed-hihat\",\n    'A#1' : \"open-hihat\",\n};\n\n\n// TODO: helper function to apply the envelope to a given sampler\nconst drumADSR = {\n    \"closed-hihat\": { attack: 0.01, decay: 0.1, sustain: 0.8, release: 0.1,},\n    \"open-hihat\": { attack: 0.02, decay: 0.2, sustain: 0.5, release: 0.3,},\n    \"crash\": { attack: 0.01, decay: 0.2, sustain: 0.5, release: 0.3,},\n    \"ride\": { attack: 0.01, decay: 0.2, sustain: 0.5, release: 0.3,},\n    \"kick\": { attack: 0.01, decay: 0.2, sustain: 0.5, release: 0.3,},\n    \"snare\": { attack: 0.01, decay: 0.2, sustain: 0.5, release: 0.3,},\n    \"hi-tom\": { attack: 0.01, decay: 0.2, sustain: 0.5, release: 0.3,},\n    \"mid-tom\": { attack: 0.01, decay: 0.2, sustain: 0.5, release: 0.3,},\n    \"floor-tom\": { attack: 0.01, decay: 0.2, sustain: 0.5, release: 0.3,},\n};\nfunction applyEnvelope(envParams, duration) {\n    // Duration defaults to 0.5 if not provided TODO: Calculate the duration for each beat\n    // duration = duration || 0.5;\n    \n    // Create the envelope with the provided parameters\n    const env = new Tone.Envelope(envParams).toDestination();\n    \n    // Connect the envelope to the sampler\n    // sampler.connect(env);\n\n    // Trigger the envelope\n    env.triggerAttackRelease(duration);\n}\n\n\n// When processing MIDI data in software, developers often use conditional statements like if (status === 144) to check the type of MIDI message received and to handle it accordingly. \n// In this particular case, the software would execute specific logic for \"Note On\" messages on channel 1.\n// The MIDI message is an array of integers. The first integer is the status byte, which contains the message type and the MIDI channel.\nfunction onMIDIMessageReceived(message, verbose = false) {\n    if (isListening) {\n        const [status, noteNumber, velocity] = message.data;\n        const noteName = Tone.Frequency(noteNumber-12, \"midi\").toNote();\n        const drumType = drumMappings[noteName];\n        if (verbose) {\n        // console.log(typeof noteName);\n        console.log( noteNumber, noteName, velocity); // buraya kadar tamam.\n        console.log(\"drumType: \", drumType);\n        }\n        // AR for each drum part\n        const hitDuration = {\n            \"closed-hihat\": \"1n\",\n            \"open-hihat\": \"2n\",\n            \"crash\": \"1n\",\n            \"ride\": \"1n\",\n            \"kick\": \"8n\",\n            \"snare\": \"2n\",\n            \"hi-tom\": \"4n\",\n            \"mid-tom\": \"4n\",\n            \"floor-tom\": \"4n\",\n        };\n    \n        if (status === 144 && drumMappings[noteName]) {\n            // const drumType = drumMappings[noteName];\n            const noteToTrigger = mapVelocityToSample(velocity); // assume `velocity` is provided by MIDI\n            // console.log(`Drum type and note to trigger: ${drumType} ${noteToTrigger}`);\n    \n            if (drumType) {\n                // Lookup the appropriate sampler using the drumType\n                const sampler = samplers[drumType]; \n                // Trigger the sound w/ a simple Attack-Release envelope TODO: Make better envelopes!\n                sampler.triggerAttackRelease(noteToTrigger, hitDuration[drumType]);\n                // sampler.chain(eq, delay, reverb); // EFX chain\n\n            } else {\n                console.error(`No mappings found for drum type: ${drumType}`);\n            }\n        }\n    }\n}\n\n\n// // WITH THE OLD UI:\n//VARIABLES\n// // Variable to keep track of the playback state\n// let isListening = false;\n// // Grab the button from the UI\n// const toggleListeningButton = document.getElementById('togglePlaybackButton');\n\n\n// //EVENT LISTENERS\n// // Add an event listener to the button\n// toggleListeningButton.addEventListener('click', toggleListening);\n\n\n// // Handle button click\n// function toggleListening() {\n//     isListening = !isListening; // Toggle the listening state\n//     // Update button text based on the current state // Note that we are not doing it anymore with the new GUI\n//     // toggleListeningButton.textContent = isListening ? 'Stop Listening' : 'Start Listening';\n//   }\n//   if (navigator.requestMIDIAccess) { // request MIDI access\n//     navigator.requestMIDIAccess().then(onMIDISuccess, onMIDIFailure);\n//   } else {\n//     console.error('WebMIDI is not supported in this browser.');\n//   }\n\n\n\n\n\n// WITH THE NEW UI:\n// Instead of using the click event on the button, \n// we will use the change event on the checkbox (since that's what you have now).\n// Instead of toggling button text (since there's no text now), \n// we'll toggle the checkbox's checked state.\n\n// Variable to keep track of the playback state\nlet isListening = false;\n\n// Grab the checkbox from the UI\nconst toggleListeningCheckbox = document.querySelector('#togglePlaybackButton input[type=\"checkbox\"]');\n\n//EVENT LISTENERS\n// Add an event listener to the checkbox\ntoggleListeningCheckbox.addEventListener('change', toggleListening);\n\n// Handle checkbox state change\nfunction toggleListening() {\n    isListening = toggleListeningCheckbox.checked;  // Update listening state based on checkbox\n}\n\nif (navigator.requestMIDIAccess) { // request MIDI access\n    navigator.requestMIDIAccess().then(onMIDISuccess, onMIDIFailure);\n} else {\n    console.error('WebMIDI is not supported in this browser.');\n}\n\n  \n  \n// Handle successful MIDI access\nfunction onMIDISuccess(midiAccess) {\n  const inputs = midiAccess.inputs.values();\n  for (let input = inputs.next(); input && !input.done; input = inputs.next()) {\n    input.value.onmidimessage = onMIDIMessageReceived;\n  //   console.log(\"Input value: \", input.value);\n  }\n\n  midiAccess.onstatechange = function(e) {\n    if (e.port.state === 'connected') {\n      e.port.onmidimessage = onMIDIMessageReceived;\n    } else if (e.port.state === 'disconnected') {\n      e.port.onmidimessage = null;\n      // Try to refresh MIDI connections after a short delay\n      setTimeout(() => {\n        refreshMIDIAccess();\n      }, 1000);\n    }\n  };\n}\n\nfunction refreshMIDIAccess() {\n  if (navigator.requestMIDIAccess) {\n    navigator.requestMIDIAccess().then(onMIDISuccess, onMIDIFailure);\n  } else {\n    console.error('WebMIDI is not supported in this browser.');\n  }\n}\n\nfunction onMIDIFailure(e) {\n  console.error('Could not access MIDI devices:', e);\n}\n\n  // NOTES:\n// Uint8Array(3): This indicates the array contains three elements. MIDI messages typically consist of 1-3 bytes, so this is consistent with typical MIDI behavior.\n// [128, 36, 0]: These are the actual values (in decimal) of the MIDI message:\n// 128: This is the status byte. In MIDI, a value of 128 (0x80 in hexadecimal) typically corresponds to a \"Note Off\" message for channel 1.\n// 36: This is the first data byte. For \"Note On\" and \"Note Off\" messages, this represents the MIDI note number. In this case, it's 36 which might correspond to a kick drum in a typical MIDI drum map.\n// 0: This is the second data byte. For \"Note On\" and \"Note Off\" messages, this represents the velocity (or volume) of the note. A velocity of 0 for a \"Note On\" message is often treated as a \"Note Off\".\n// buffer, byteLength, byteOffset, etc.: These are properties of the Uint8Array and provide information about the underlying buffer storage and the array's size. For most MIDI applications, you won't need to worry about these.\n// For example, a MIDI message (128, 36, 0) can be interpreted as: \"Note Off\" for MIDI note 36 on channel 1 with a velocity of 0.\n","export const samples = {\n    'closed-hihat': [\n        require('url:./../../assets/sounds/drum_samples/closed-hihat_1.mp3'),\n        require('url:./../../assets/sounds/drum_samples/closed-hihat_2.mp3'),\n        require('url:./../../assets/sounds/drum_samples/closed-hihat_3.mp3'),\n        require('url:./../../assets/sounds/drum_samples/closed-hihat_4.mp3'),\n        require('url:./../../assets/sounds/drum_samples/closed-hihat_5.mp3'),\n        require('url:./../../assets/sounds/drum_samples/closed-hihat_6.mp3'),\n        require('url:./../../assets/sounds/drum_samples/closed-hihat_7.mp3'),\n        require('url:./../../assets/sounds/drum_samples/closed-hihat_8.mp3'),\n        require('url:./../../assets/sounds/drum_samples/closed-hihat_9.mp3'),\n        require('url:./../../assets/sounds/drum_samples/closed-hihat_10.mp3'),\n        require('url:./../../assets/sounds/drum_samples/closed-hihat_11.mp3'),\n        require('url:./../../assets/sounds/drum_samples/closed-hihat_12.mp3'),\n    ],\n    'open-hihat': [\n        require('url:./../../assets/sounds/drum_samples/open-hihat_1.mp3'),\n        require('url:./../../assets/sounds/drum_samples/open-hihat_2.mp3'),\n        require('url:./../../assets/sounds/drum_samples/open-hihat_3.mp3'),\n        require('url:./../../assets/sounds/drum_samples/open-hihat_4.mp3'),\n        require('url:./../../assets/sounds/drum_samples/open-hihat_5.mp3'),\n        require('url:./../../assets/sounds/drum_samples/open-hihat_6.mp3'),\n        require('url:./../../assets/sounds/drum_samples/open-hihat_7.mp3'),\n        require('url:./../../assets/sounds/drum_samples/open-hihat_8.mp3'),\n        require('url:./../../assets/sounds/drum_samples/open-hihat_9.mp3'),\n        require('url:./../../assets/sounds/drum_samples/open-hihat_10.mp3'),\n        require('url:./../../assets/sounds/drum_samples/open-hihat_11.mp3'),\n        require('url:./../../assets/sounds/drum_samples/open-hihat_12.mp3'),\n    ],\n    'crash': [\n        require('url:./../../assets/sounds/drum_samples/crash_1.mp3'),\n        require('url:./../../assets/sounds/drum_samples/crash_2.mp3'),\n        require('url:./../../assets/sounds/drum_samples/crash_3.mp3'),\n        require('url:./../../assets/sounds/drum_samples/crash_4.mp3'),\n        require('url:./../../assets/sounds/drum_samples/crash_5.mp3'),\n        require('url:./../../assets/sounds/drum_samples/crash_6.mp3'),\n        require('url:./../../assets/sounds/drum_samples/crash_7.mp3'),\n        require('url:./../../assets/sounds/drum_samples/crash_8.mp3'),\n        require('url:./../../assets/sounds/drum_samples/crash_9.mp3'),\n        require('url:./../../assets/sounds/drum_samples/crash_10.mp3'),\n        require('url:./../../assets/sounds/drum_samples/crash_11.mp3'),\n        require('url:./../../assets/sounds/drum_samples/crash_12.mp3'),\n    ],\n    'ride': [\n        require('url:./../../assets/sounds/drum_samples/ride_1.mp3'),\n        require('url:./../../assets/sounds/drum_samples/ride_2.mp3'),\n        require('url:./../../assets/sounds/drum_samples/ride_3.mp3'),\n        require('url:./../../assets/sounds/drum_samples/ride_4.mp3'),\n        require('url:./../../assets/sounds/drum_samples/ride_5.mp3'),\n        require('url:./../../assets/sounds/drum_samples/ride_6.mp3'),\n        require('url:./../../assets/sounds/drum_samples/ride_7.mp3'),\n        require('url:./../../assets/sounds/drum_samples/ride_8.mp3'),\n        require('url:./../../assets/sounds/drum_samples/ride_9.mp3'),\n        require('url:./../../assets/sounds/drum_samples/ride_10.mp3'),\n        require('url:./../../assets/sounds/drum_samples/ride_11.mp3'),\n        require('url:./../../assets/sounds/drum_samples/ride_12.mp3'),\n    ],\n    'kick': [\n        require('url:./../../assets/sounds/drum_samples/kick_1.mp3'),\n        require('url:./../../assets/sounds/drum_samples/kick_2.mp3'),\n        require('url:./../../assets/sounds/drum_samples/kick_3.mp3'),\n        require('url:./../../assets/sounds/drum_samples/kick_4.mp3'),\n        require('url:./../../assets/sounds/drum_samples/kick_5.mp3'),\n        require('url:./../../assets/sounds/drum_samples/kick_6.mp3'),\n        require('url:./../../assets/sounds/drum_samples/kick_7.mp3'),\n        require('url:./../../assets/sounds/drum_samples/kick_8.mp3'),\n        require('url:./../../assets/sounds/drum_samples/kick_9.mp3'),\n        require('url:./../../assets/sounds/drum_samples/kick_10.mp3'),\n        require('url:./../../assets/sounds/drum_samples/kick_11.mp3'),\n        require('url:./../../assets/sounds/drum_samples/kick_12.mp3'),\n    ],\n    'snare': [\n        require('url:./../../assets/sounds/drum_samples/snare_1.mp3'),\n        require('url:./../../assets/sounds/drum_samples/snare_2.mp3'),\n        require('url:./../../assets/sounds/drum_samples/snare_3.mp3'),\n        require('url:./../../assets/sounds/drum_samples/snare_4.mp3'),\n        require('url:./../../assets/sounds/drum_samples/snare_5.mp3'),\n        require('url:./../../assets/sounds/drum_samples/snare_6.mp3'),\n        require('url:./../../assets/sounds/drum_samples/snare_7.mp3'),\n        require('url:./../../assets/sounds/drum_samples/snare_8.mp3'),\n        require('url:./../../assets/sounds/drum_samples/snare_9.mp3'),\n        require('url:./../../assets/sounds/drum_samples/snare_10.mp3'),\n        require('url:./../../assets/sounds/drum_samples/snare_11.mp3'),\n        require('url:./../../assets/sounds/drum_samples/snare_12.mp3'),\n    ],\n    'hi-tom': [\n        require('url:./../../assets/sounds/drum_samples/hi-tom_1.mp3'),\n        require('url:./../../assets/sounds/drum_samples/hi-tom_2.mp3'),\n        require('url:./../../assets/sounds/drum_samples/hi-tom_3.mp3'),\n        require('url:./../../assets/sounds/drum_samples/hi-tom_4.mp3'),\n        require('url:./../../assets/sounds/drum_samples/hi-tom_5.mp3'),\n        require('url:./../../assets/sounds/drum_samples/hi-tom_6.mp3'),\n        require('url:./../../assets/sounds/drum_samples/hi-tom_7.mp3'),\n        require('url:./../../assets/sounds/drum_samples/hi-tom_8.mp3'),\n        require('url:./../../assets/sounds/drum_samples/hi-tom_9.mp3'),\n        require('url:./../../assets/sounds/drum_samples/hi-tom_10.mp3'),\n        require('url:./../../assets/sounds/drum_samples/hi-tom_11.mp3'),\n        require('url:./../../assets/sounds/drum_samples/hi-tom_12.mp3'),\n    ],\n    'mid-tom': [\n        require('url:./../../assets/sounds/drum_samples/mid-tom_1.mp3'),\n        require('url:./../../assets/sounds/drum_samples/mid-tom_2.mp3'),\n        require('url:./../../assets/sounds/drum_samples/mid-tom_3.mp3'),\n        require('url:./../../assets/sounds/drum_samples/mid-tom_4.mp3'),\n        require('url:./../../assets/sounds/drum_samples/mid-tom_5.mp3'),\n        require('url:./../../assets/sounds/drum_samples/mid-tom_6.mp3'),\n        require('url:./../../assets/sounds/drum_samples/mid-tom_7.mp3'),\n        require('url:./../../assets/sounds/drum_samples/mid-tom_8.mp3'),\n        require('url:./../../assets/sounds/drum_samples/mid-tom_9.mp3'),\n        require('url:./../../assets/sounds/drum_samples/mid-tom_10.mp3'),\n        require('url:./../../assets/sounds/drum_samples/mid-tom_11.mp3'),\n        require('url:./../../assets/sounds/drum_samples/mid-tom_12.mp3'),\n    ],\n    'floor-tom': [\n      require('url:./../../assets/sounds/drum_samples/floor-tom_1.mp3'),\n      require('url:./../../assets/sounds/drum_samples/floor-tom_2.mp3'),\n      require('url:./../../assets/sounds/drum_samples/floor-tom_3.mp3'),\n      require('url:./../../assets/sounds/drum_samples/floor-tom_4.mp3'),\n      require('url:./../../assets/sounds/drum_samples/floor-tom_5.mp3'),\n      require('url:./../../assets/sounds/drum_samples/floor-tom_6.mp3'),\n      require('url:./../../assets/sounds/drum_samples/floor-tom_7.mp3'),\n      require('url:./../../assets/sounds/drum_samples/floor-tom_8.mp3'),\n      require('url:./../../assets/sounds/drum_samples/floor-tom_9.mp3'),\n      require('url:./../../assets/sounds/drum_samples/floor-tom_10.mp3'),\n      require('url:./../../assets/sounds/drum_samples/floor-tom_11.mp3'),\n      require('url:./../../assets/sounds/drum_samples/floor-tom_12.mp3'),\n    ],\n  };","// Author: Çağrı Erdem, 2023\n// Description: Defining a global state module to fetch MIDI (bytes) \n// data from the server and make it available to all modules of the 2groove web app.\n\nexport const globalFetch = {\n  midiData: null,\n  midiReadyForProcessing: false,  // The gate\n\n  setMidiData(data) {\n      console.log(\"MIDI data received in bytes!\", data);\n      this.midiData = data;\n      this.midiReadyForProcessing = true;  // Open the gate\n  },\n\n  getMidiData() {\n      return this.midiData;\n  },\n\n  isMidiReadyForProcessing() {\n      return this.midiReadyForProcessing;\n  },\n\n  midiProcessed() { \n      this.midiReadyForProcessing = false;  // Close the gate\n  },\n  \n};\n\n","// Author: Çağrı Erdem, 2023\n// Description: User interface for 2groove web app.\n\nimport { globalFetch } from './globalFetch.js';\n\n// Initialize Web Audio API\nconst audioContext = new AudioContext();\n\n// UI Elements\nconst tempoSlider = document.getElementById('tempo');\nconst metronomeVolumeSlider = document.getElementById('metronomeVolume');\nconst toggleMetronomeCheckbox = document.querySelector('#toggleMetronome input[type=\"checkbox\"]');\n\nconst recIndicator = document.getElementById('recIndicator');\nconst arrayList = document.getElementById('arrayList');\nconst intervals = []; // for tap tempo\n\n// const startButton = document.getElementById('startButton'); \n\n// const portInput = document.getElementById('serverPort')\n// const httpIp = document.getElementById('httpIpAddress')\n// const beatsInput = document.getElementById('beats');\n// const quantizeSelect = document.getElementById('quantize');\n\n\n// Variables\nlet beatsInput = 8; // 8 beats (2 bars)\nlet quantizeSelect = 4; // 1/16\nlet gateKeyActive = false;\nlet currentArray = [];\nlet recording = false;\nlet recordingStartedAt = 0;\nlet httpIp = [`158.39.200.82`, `127.0.0.1`];\nlet httpPort = [`5002`, `5003`];\nlet isHttpConnected = true; // we keep it true with the new UI\nlet lastTapTime = 0; // for tap tempo\nlet tappedRhythms = [];\nlet metronomeLoop;\nlet metronomeRunning = true;  // The metronome loop and transport is always running\nlet metronomeSoundOn = false; // The metronome sound is off by default\nlet tempVal = 0.2;\nlet threshVal = 0.3;\nlet currentTick = 1;\nlet clickTone = 1000;\nlet samplingStrategy = {'strategy': ['epsilon', 'softmax_temp'],\n                        'tempRange': [[0.01, 10.0], [0.1, 2.0]],\n                        'threshRange': [[0.15, 0.35], [0.1, 0.2]]};\nlet samplingStrategyIndex = 0;\n\n\n\n\n//-------------------------------------\n// Functions\n//-------------------------------------\n\n\n\n// startButton.addEventListener('click', function() {\n//     initializeApp();\n//     startButton.style.display = 'none'; // Hide the button after initialization\n// });\n\n\n\n\nasync function initializeApp() {\n    // Set default BPM or retrieve it from a saved setting or slider\n    const defaultBPM = tempoSlider.value;\n    \n    // Indicate that the metronome is running\n    metronomeRunning = true;\n\n    console.log(\"App initialized!\");\n    console.log(\"Default BPM:\", defaultBPM);\n    console.log(\"Temperature value:\", tempVal);\n    console.log(\"Hit tolerance:\", threshVal);\n    console.log(\"Sampling strategy:\", samplingStrategy['strategy'][samplingStrategyIndex]);\n}\n\ninitializeApp();\n\n\n\n//////////////////////\n// GLOBAL METRONOME //\n//////////////////////\n\n// Play click sound\nfunction playClick(volume, frequency = 1000) {\n    const osc = audioContext.createOscillator();\n    const gainNode = audioContext.createGain();\n    gainNode.gain.value = volume;\n    osc.frequency.value = frequency;\n    osc.connect(gainNode);\n    gainNode.connect(audioContext.destination);\n    osc.start();\n    osc.stop(audioContext.currentTime + 0.05);\n}\n\n\nexport async function toggleMetronome() {\n    if (audioContext.state === 'suspended') {\n        await audioContext.resume();\n    }\n\n    if (Tone.context.state !== 'running') {\n        await Tone.start();\n        console.log('Tone.js has started');\n    }\n\n    metronomeSoundOn = !metronomeSoundOn;\n\n    if (metronomeSoundOn) {\n        // start the metronome sound here if it's not already running\n        startMetronome(tempoSlider.value); // Assuming you want to use the current value of the tempo slider\n    } else {\n        // stop the metronome sound if needed, depending on your requirements\n        // TODO: find the need to execute additional logic when turning the sound off (like fading out, \n        // stopping any ongoing sound immediately, or any other related tasks), that's where you'd place that logic.\n    }\n}\n\n\n\nexport async function startMetronome(bpm) {\n    if (Tone.context.state !== 'running') {\n        await Tone.start();\n    }\n    \n    Tone.Transport.bpm.value = bpm; // Set the transport's BPM\n    if (!metronomeLoop) {\n        metronomeLoop = new Tone.Loop(time => {\n            // Only play the click if the audibleClick flag is true\n            if (metronomeSoundOn) {\n                playClick(metronomeVolumeSlider.value, clickTone);\n            }\n            emitTickEvent(); // Emit a tick event to be used by other modules\n        }, \"4n\"); // \"4n\" stands for a quarter note\n\n        metronomeLoop.start(0); // Start the loop immediately\n    }\n\n    Tone.Transport.start(); // Start the transport\n}\n\n\n\n// Func to count between 1-4\nfunction count4() {\n    console.log(`${currentTick}/4`);\n    currentTick = (currentTick % 4) + 1;\n\n    if (currentTick == 1) {\n        clickTone = 1500;\n    } else {\n        clickTone = 1000;\n    }\n  }\n\n\nfunction emitTickEvent() {\n    count4();\n    // const event = new Event('metronomeTick');\n    // window.dispatchEvent(event);\n    const event = new CustomEvent('metronomeTick', { detail: { tick: currentTick } });\n    window.dispatchEvent(event);\n    \n}\n\nexport function setBPM(bpm) {\n    Tone.Transport.bpm.value = bpm;\n}\nexport function getCurrentBPM() {\n    return Tone.Transport.bpm.value;\n}\nexport function isMetronomeRunning() {\n    return metronomeRunning;\n}\n\n\n\nfunction arrayToBinaryString(array) {\n    return array.map(value => (value !== 0 ? '1' : '0')).join('');\n}\n\nfunction storeAndDisplayArray(array) {\n    const li = document.createElement('li');\n    li.textContent = arrayToBinaryString(array);\n        // If the list has any items\n        if (arrayList.firstChild) {\n        // Insert 'li' before the first item, to the top of the list\n        arrayList.insertBefore(li, arrayList.firstChild);\n        } else {\n        // If the list is empty, just append the 'li' as usual\n        arrayList.appendChild(li);\n    }\n}\n\n\n// Variety knob\n// TODO: WOrk on it more!\ndocument.getElementById(\"temp\").addEventListener(\"input\", function() {\n    const value = this.value;\n    tempVal = scaleValue(value, [0, 1], samplingStrategy['tempRange'][samplingStrategyIndex]); //Exponential curve?\n    document.getElementById(\"knob3Value\").textContent = value;\n    // TODO: Check if it's a good idea to combine the two values. If yes, check better ways of combining.\n    console.log(\"tempVal:\", tempVal);\n});\n\n\n// Thresh knob\n// TODO: WOrk on it more!\ndocument.getElementById(\"tolerance\").addEventListener(\"input\", function() {\n    const value = this.value;\n    // tempVal = scaleValue(value, [0, 1], [0.01, 100]);\n    threshVal = scaleValue(value, [0, 1], samplingStrategy['threshRange'][samplingStrategyIndex]);\n    document.getElementById(\"knob4Value\").textContent = value;\n    // TODO: Check if it's a good idea to combine the two values. If yes, check better ways of combining.\n    console.log(\"threshVal:\", threshVal);\n});\n\n\n\n\n// New Web Worker setup for client-server communication\nconst ajaxWorker = new Worker(\n    new URL('./workers/workerAjax.js', import.meta.url),\n    {type: 'module'}\n  );\n\n// Listen to messages from the worker:\najaxWorker.addEventListener('message', function(event) {\n    const data = event.data;\n    console.log(\"Setting MIDI data, length:\", data.length);\n\n    switch (data.type) {\n        case 'arrayProcessed':\n            // process the MIDI data as needed\n            console.log(\"MIDI data received in bytes!\", data.data);\n            globalFetch.setMidiData(data.data);\n            resetTappedRhythms();\n            break;\n\n        case 'error':\n            console.error(\"Error from worker:\", data.error);\n            break;\n    }\n});\n\n// Modify `sendArrayToServer` to post data to the worker:\nfunction sendArrayToServer(array) {\n    ajaxWorker.postMessage({\n        cmd: 'sendArray',\n        array: array,\n        bpm: parseFloat(document.getElementById('tempo').value),\n        temperatureValue: tempVal, //parseFloat(document.getElementById('temperature').value),\n        hitTolerance: threshVal, //parseFloat(document.getElementById('tolerance').value),\n        isHttpConnected: isHttpConnected,  \n        httpIp: httpIp[0], //httpIp.value,             \n        portInput: httpPort[0], //portInput.value        \n        samplingStrategy: samplingStrategy['strategy'][samplingStrategyIndex]\n    });\n}\n\n\n\n\n// TODO: Connect this to `midiBroadcast.js`\n// function sendBroadcastParameters(){\n//     const loop_amount = parseInt(loopsInput.value);\n// }\n\nfunction resetTappedRhythms() {\n  // tappedRhythms = [];\n  tappedRhythms.length = 0;  // This empties the array without re-declaring it\n  // ... any other necessary resets or UI updates ...\n}\n\n\n\nfunction toggleValues(arr, numIndices = 1) {\n    // TODO: Implement this function to `change` action\n    /**\n     * Toggle values in the input array at random indices.\n     *\n     * Parameters:\n     * - arr (array-like): The input array containing only 0s and 1s.\n     * - numIndices (int): The number of random indices to toggle (default is 1).\n     *\n     * Returns:\n     * - Edited array with toggled values.\n     */\n  \n    // Check if the input array is valid (contains only 0s and 1s)\n    if (!arr.every(val => val === 0 || val === 1)) {\n      throw new Error(\"Input array must consist of only 0s and 1s.\");\n    }\n  \n    // Create a copy of the input array to avoid modifying the original\n    const editedArr = [...arr];\n  \n    // Generate random indices to toggle\n    const toggleIndices = [];\n  \n    for (let i = 0; i < numIndices; i++) {\n      const randomIndex = Math.floor(Math.random() * arr.length);\n      toggleIndices.push(randomIndex);\n    }\n  \n    // Toggle the values at the selected indices\n    toggleIndices.forEach(index => {\n      editedArr[index] = 1 - editedArr[index];\n    });\n  \n    return editedArr;\n  }\n  \n\n\n//-------------------------------------\n// Event Listeners\n//-------------------------------------\n\n// WITH THE OLD UI:\n// Event listeners for the metronome\n// toggleMetronomeButton.addEventListener('click', () => {\n//     toggleMetronomeButton.classList.toggle('toggled');\n//     toggleMetronome();\n// });\n\n// WITH THE NEW UI\n// TODO: Fix it because it doesn't work properly while generating \ntoggleMetronomeCheckbox.addEventListener('change', toggleMetronome);\n\n// Function to turn off the switch\nfunction turnOffSwitch() {\n    toggleMetronomeCheckbox.checked = false;\n  }\n\n\n// Event listener for the tempo and vol sliders\ntempoSlider.addEventListener(\"input\", function() {\n    const bpm = this.value;\n    document.getElementById(\"knob1Value\").textContent = bpm; // Update the knob value\n    if (metronomeRunning) {\n        startMetronome(bpm);\n    }\n});\nmetronomeVolumeSlider.addEventListener(\"input\", function() {\n    const vol = this.value;\n    document.getElementById(\"knob2Value\").textContent = vol; // Update the knob value\n});\n\n\n// Record tapped rhythm -- event listener for when the key \"A\" is pressed to start recording\nwindow.addEventListener('keydown', (e) => {\n  if (e.key === 'a' && !recording) {\n      e.preventDefault();\n      gateKeyActive = true;\n      recordingStartedAt = Date.now();\n      recIndicator.innerText = 'REC ON!';\n      recIndicator.classList.add('recording'); \n      \n      const totalSteps = parseInt(beatsInput) * parseInt(quantizeSelect); //.value methods removed for new UI\n      currentArray = new Array(totalSteps).fill(0);  // Initialize array with zeros\n      \n      recording = true;\n  }\n\n  if (e.key === ' ' && gateKeyActive) {\n    //   playClick(tapVolumeSlider.value, 300);\n      playClick(metronomeVolumeSlider.value, 300) // If same knob is used for both metronome and tap volume\n      const elapsedMs = Date.now() - recordingStartedAt;\n      const bpm = parseInt(tempoSlider.value);\n      const quantizeValue = parseInt(quantizeSelect);\n      const singleSubdivisionDuration = (60 * 1000) / (bpm * quantizeValue);\n      const tappedSubdivision = Math.round(elapsedMs / singleSubdivisionDuration);\n      if (tappedSubdivision < currentArray.length) {\n          currentArray[tappedSubdivision] = 1;\n      }\n      lastTapTimestamp = Date.now();\n  }\n\n  if (e.key === ' ') { // blinking light every time space bar is hit\n\n    e.preventDefault(); //To prevent the browser from scrolling when the spacebar is pressed\n    const light = document.getElementById('tapLight');\n    light.classList.remove('light-off');\n    light.classList.add('light-on');\n  }\n\n  if (e.key.toUpperCase() === 'T') { // tap tempo // TODO: Something doesn't work here -- FIX!\n    const currentTime = new Date().getTime();\n    const interval = currentTime - lastTapTime; // in milliseconds\n    const tapTempoLight = document.getElementById('tapTempoLight'); // Visual feedback for tap\n    tapTempoLight.classList.remove('light-off');\n    tapTempoLight.classList.add('light-on');\n    // tapTempoLight.style.backgroundColor = 'red';\n    playClick(metronomeVolumeSlider.value, 1500);\n    \n    setTimeout(() => {\n        // tapLight.style.backgroundColor = '';\n        tapTempoLight.classList.remove('light-on');\n        tapTempoLight.classList.add('light-off');\n    }, 100);  // light stays red for 100 milliseconds\n    \n    if (lastTapTime !== 0) { // avoid the first tap\n        intervals.push(interval);\n        \n        // Consider only the last few taps to get a more accurate/current BPM\n        if (intervals.length > 4) {\n            intervals.shift();\n        }\n\n        const averageInterval = intervals.reduce((acc, val) => acc + val, 0) / intervals.length;\n        const bpm = parseInt(60000 / averageInterval); // 60,000 ms in a minute\n\n        // Update the tempo UI elements\n        const tempoElement = document.getElementById('tempo');\n        const bpmDisplayElement = document.getElementById('knob1Value');\n        const tempoSlider = document.getElementById('tempoSlider');\n        \n        if (tempoElement) tempoElement.value = bpm.toFixed(2); // toFixed(2) to limit to 2 decimal points\n        if (bpmDisplayElement) bpmDisplayElement.innerText = bpm.toFixed(0);\n        if (tempoSlider) tempoSlider.value = bpm.toFixed(0);\n    }\n    \n    lastTapTime = currentTime;\n}\n});\n\n// Export the tapped array for other modules to use\nexport function getTappedRhythms() {\n    return currentArray;\n}\n\n\n// evet listener for when key \"A\" is released\nwindow.addEventListener('keyup', (e) => {\n  if (e.key === 'a') {\n      gateKeyActive = false;\n      recIndicator.innerText = 'REC OFF';\n      recIndicator.classList.remove('recording');\n\n      storeAndDisplayArray(currentArray);  // To display the array\n      sendArrayToServer(currentArray); // To send the array via fetch (to server\n\n      // Check if the metronome is currently active/on\n      if (metronomeRunning) {\n        // Toggle the metronome off\n        // toggleMetronome();\n        metronomeSoundOn = false;\n        toggleMetronomeCheckbox.checked = false; // TODO: fix this!\n    }\n      recording = false;\n  }\n\n  if (e.key === ' ') {\n      const light = document.getElementById('tapLight');\n      light.classList.remove('light-on');\n      light.classList.add('light-off');\n}\n});\n\n\n// Incorporate the `change` action\n// TODO: Make sure it works properly\ndocument.getElementById('changeButton').addEventListener('click', function() {\n    editedArray = toggleValues(currentArray, numIndices = 1)\n    sendArrayToServer(editedArray);\n});\n\n\n\n/// UTILS ///\n\n// Scale a value from one range to another\nfunction scaleValue(value, from, to) {\n    let scale = (to[1] - to[0]) / (from[1] - from[0]);\n    let capped = Math.min(from[1], Math.max(from[0], value)) - from[0];\n    return (capped * scale + to[0]);\n}\n\nfunction limitDecimalPoints(number, n) {\n    // Check if the input is a valid number\n    if (typeof number !== 'number' || isNaN(number)) {\n        throw new Error('Input must be a valid number.');\n    }\n\n    // Use toFixed() to limit to n decimal points and convert back to a number\n    return parseFloat(number.toFixed(n));\n}\n\nresetButton.addEventListener('click', () => {\n    arrayList.innerHTML = '';\n});\n\n\nconst imageA = require(\"./../../assets/images/A.png\");\nconst imageB = require(\"./../../assets/images/b.png\");\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    const modelChangeButton = document.getElementById(\"modelChangeButton\");\n\n    modelChangeButton.addEventListener(\"click\", function() {\n        const imgElement = this.querySelector(\"img\");\n\n        if (imgElement.src.includes(imageA)) {\n            imgElement.src = imageB;\n            samplingStrategyIndex = 1;\n            console.log(\"Sampling changed to (B) Softmax!\");\n        } else {\n            imgElement.src = imageA;\n            samplingStrategyIndex = 0;\n            console.log(\"Model changed to (A) Epsilon!\");\n        }\n    });\n});\n\n\n// Open the MIDI I/O popup\nfunction openMidiPopup() {\n    window.open(src=\"\", \"popup\", 'width=450,height=450', sandbox=\"allow-popups\");\n} //./../html/midi-io.html\n\nconst midiButton = document.getElementById('midi-btn');\nmidiButton.addEventListener('click', openMidiPopup);","let workerURL = require('./helpers/get-worker-url');\nlet url = new __parcel__URL__(\"workerAjax.6b1dfd8f.js\");\nmodule.exports = workerURL(url.toString(), url.origin, true);","\"use strict\";\n\nmodule.exports = function (workerUrl, origin, isESM) {\n  if (origin === self.location.origin) {\n    // If the worker bundle's url is on the same origin as the document,\n    // use the worker bundle's own url.\n    return workerUrl;\n  } else {\n    // Otherwise, create a blob URL which loads the worker bundle with `importScripts`.\n    var source = isESM ? 'import ' + JSON.stringify(workerUrl) + ';' : 'importScripts(' + JSON.stringify(workerUrl) + ');';\n    return URL.createObjectURL(new Blob([source], {\n      type: 'application/javascript'\n    }));\n  }\n};","module.exports = new __parcel__URL__(\"A.1bc05b06.png\").toString();","module.exports = new __parcel__URL__(\"B.873f0259.png\").toString();","// Author: Çağrı Erdem, 2023\n// Description: MIDI broadcasting script for 2groove web app.\n\nimport { globalFetch } from './globalFetch.js';\n\nconst audioContext = new (window.AudioContext || window.webkitAudioContext)();\nlet midiOutput; // MIDI output device\nlet startTime = null; // Start time for the MIDI playback\nlet timeouts = []; // Store timeout IDs for scheduled notes\n\nconst midiQueue = [];\nlet currentMidiForVisuals = null;\nlet isPlaying = false;  // to track the playback status\n// let currentTick = 0;  // to track the current tick for the metronome\nlet processedMidiData;  // Global variable to store the processed MIDI data for download\n\n\n\n\n// TODO: play/pause button\n// isPaused = false;\n// const playPauseButton = document.getElementById('play-pause-btn');\n// playPauseButton.addEventListener('click', () => {\n//     isPaused = !isPaused;\n//     if (isPaused) {\n//         // If paused, clear all timeouts (stop all scheduled notes)\n//         // timeouts.forEach(timeout => clearTimeout(timeout));\n//     } else {\n//         // When resumed, restart the MIDI playback from where we paused\n//         // loadMidiData(currentMidiForVisuals);\n//     }\n// });\n\n\n// TODO: Set up the main clock\n// Set up an event listener for the tick event\nwindow.addEventListener('metronomeTick', handleMidiForTick);\n\nfunction handleMidiForTick(event) {\n    // currentTick++;\n    // console.log(`\\rClick ${(currentTick%4)+1}/4`);\n}\n\n\n\n\n\n// const tickToMidiEventsMap = {};\n// function handleMidiForTick(event) {\n//     if (event && event.detail && typeof event.detail.tick !== 'undefined') {\n//         const currentTick = event.detail.tick;\n//         if (tickToMidiEventsMap[currentTick]) {\n//             tickToMidiEventsMap[currentTick].forEach((note) => {\n//                 scheduleNote(note, Tone.Time(Tone.Transport.position).toMilliseconds());\n//             });\n//         }\n//     } else {\n//         console.warn('Received an unexpected event structure:', event);\n//     }\n//     currentTick++;\n//     console.log(`\\rClick ${(currentTick%4)+1}/4`);\n// }\n\n\n\n// Convert ticks to time in seconds\nfunction ticksToTime(ticks, ticksPerBeat, bpm) {\n    const secondsPerTick = 60 / (bpm * ticksPerBeat);\n    return ticks * secondsPerTick;\n}\n\n// Check for new MIDI data and enqueue it\nfunction checkAndEnqueueMidi() {\n    if (globalFetch.isMidiReadyForProcessing()) {\n        const midi = globalFetch.getMidiData().buffer; // convert to ArrayBuffer when fetching JSON\n        midiQueue.push(midi);\n        globalFetch.midiProcessed();\n\n        // If nothing is currently playing, start the next MIDI\n        if (!isPlaying) {\n            playNextMidi();\n        }\n    }\n}\n\n// Play next MIDI in the queue and set it for visualization\nfunction playNextMidi() {\n    // Only start playing the next MIDI if the current one has finished\n    if (!isPlaying && midiQueue.length > 0) {\n        currentMidiForVisuals = midiQueue.shift();\n        Tone.Transport.start(\"@1m\");  // Ensure playback starts at the beginning of a measure //TODO: Check if this is necessary or useful\n        loadMidiData(currentMidiForVisuals);\n    }\n}\n\nexport function getCurrentMidiForVisuals() {\n    return currentMidiForVisuals;\n}\n\n// Initialize the audio context\nfunction startAudioContext() {\n    if (audioContext.state === \"suspended\") {\n        audioContext.resume();\n    }\n}\n\n// Scale a value from one range to another\nfunction scaleValue(value, from, to) {\n    let scale = (to[1] - to[0]) / (from[1] - from[0]);\n    let capped = Math.min(from[1], Math.max(from[0], value)) - from[0];\n    return (capped * scale + to[0]);\n}\n\n\n// MIDI initialization\nnavigator.requestMIDIAccess().then(onMIDISuccess, onMIDIFailure);\n\nfunction onMIDISuccess(midiAccess) {\n    const outputs = Array.from(midiAccess.outputs.values());\n    if (outputs.length === 0) {\n        console.warn(\"No MIDI outputs found\");\n        return;\n    }\n    populateMidiOutputs(outputs);\n}\n\nfunction onMIDIFailure() {\n    console.error(\"Could not access your MIDI devices.\");\n}\n\nfunction populateMidiOutputs(outputs) {\n    const select = document.getElementById('midiOutputs');\n    outputs.forEach((output, index) => {\n        const option = document.createElement('option');\n        option.value = index;\n        option.text = output.name;\n        select.appendChild(option);\n    });\n    select.addEventListener('change', (event) => {\n        midiOutput = outputs[event.target.value];\n    });\n    midiOutput = outputs[0]; // Default to the first output\n}\n\n// TODO: check if this working properly\n// function populateMidiOutputs(outputs) {\n//     const select = document.getElementById('midiOutputs');\n//     if (!select) return;  // Exit if the element doesn't exist\n\n//     outputs.forEach((output, index) => {\n//         const option = document.createElement('option');\n//         option.value = index;\n//         option.text = output.name;\n//         select.appendChild(option);\n//     });\n\n//     select.addEventListener('change', (event) => {\n//         midiOutput = outputs[event.target.value];\n//     });\n\n//     midiOutput = outputs[0]; // Default to the first output\n// }\n\n\n\n\n/////////////////////////////////////////\n/// TESTS FOR METRO-LOCKED SCHEDULING ///\n/////////////////////////////////////////\n\n// function scheduleNote(note, timeMs) {\n//     const vel = scaleValue(note.velocity, [0, 1], [0, 127]);\n//     const delay = timeMs - Tone.Time(Tone.Transport.position).toMilliseconds();\n//     const timeoutId = setTimeout(() => {\n//         midiOutput.send([0x90, note.midi, vel]);\n//     }, delay);\n//     timeouts.push(timeoutId);\n// }\n\n\n\n// async function loadMidiData(midiData) {\n//     isPlaying = true;  // Set the flag indicating that a MIDI is currently playing\n//     resetPlayback(); // Reset playback when a new file is chosen\n\n//     const midi = new Midi(midiData); // Convert the raw data into a Midi object\n//     console.log(\"Parsed MIDI:\", midi);\n//     const track = midi.tracks[0];\n//     Tone.Transport.start(); // Start the transport\n\n//     if (!midiOutput) {\n//         console.warn(\"MIDI output not available\");\n//         return;\n//     }\n\n//     const tempo = (midi.header.tempos && midi.header.tempos[0]) ? midi.header.tempos[0].bpm : 120; // Fallback to a default tempo if not defined ???\n//     const ticksPerBeat = midi.header.ppq;\n//     const msPerTick = (60 * 1000 / tempo) / ticksPerBeat;\n\n\n//     track.notes.forEach((note) => {\n//         if (!tickToMidiEventsMap[note.ticks]) {\n//             tickToMidiEventsMap[note.ticks] = [];\n//         }\n//         tickToMidiEventsMap[note.ticks].push(note);\n//     });\n\n//     const totalTimeMs = track.durationTicks * msPerTick;\n//     console.log(`Total time: ${totalTimeMs} ms`);\n//     console.log(`Total transport time: ${track.durationTicks * msPerTick / 1000} s`);\n//     setTimeout(() => {\n//         loopPlayback();\n//     }, totalTimeMs);\n// }\n\n\n\n/////////////////////////\n// Working stuff below //\n/////////////////////////\n\n// Reset playback\nfunction resetPlayback() {\n    timeouts.forEach(clearTimeout); // Clear all scheduled notes\n    timeouts = [];\n    currentNoteIndex = 0;\n    startTime = audioContext.currentTime;\n    currentTick = 0;  // Reset to the first tick\n}\n\n\n// // Schedule a note to be played\n// // without Transport\nfunction scheduleNote(note, timeMs, index) {\n    const vel = scaleValue(note.velocity, [0, 1], [0, 127]);\n    const scheduledTime = startTime + timeMs / 1000;\n\n    const timeoutId = setTimeout(() => {\n        midiOutput.send([0x90, note.midi, vel]);\n        // console.log(`Note Number: ${note.midi}, Velocity: ${vel}, Scheduled Time: ${scheduledTime}`);\n        currentNoteIndex = index + 1;\n        // console.log(`${currentNoteIndex}: ${note.midi}, ${vel}`);\n    }, (scheduledTime - audioContext.currentTime) * 1000);\n    timeouts.push(timeoutId);\n}\n\n\n// //Main function that is responsible of retrieving the MIDI bytes, converting them into a MIDI object, parsing it, and scheduling the notes\n// //without Transport\nasync function loadMidiData(midiData) {\n    isPlaying = true;  // Set the flag indicating that a MIDI is currently playing\n    resetPlayback(); // Reset playback when a new file is chosen\n\n    try {\n        const midi = new Midi(midiData); // Convert the raw data into a Midi object\n        processedMidiData = midiData;  // Store the processed data in the global variable\n\n        // Adjust negative delta values\n        midi.tracks.forEach(track => {\n            let accumulatedDelta = 0;\n            track.notes.forEach(note => {\n                if (note.ticks < 0) {\n                    accumulatedDelta += note.ticks;  // Accumulate the negative delta\n                    note.ticks = 0;  // Reset the current note's ticks to 0\n                } else if (accumulatedDelta < 0) {\n                    const adjustment = Math.min(note.ticks, -accumulatedDelta);  // Calculate the possible adjustment\n                    note.ticks -= adjustment;  // Deduct the adjustment from the current note's ticks\n                    accumulatedDelta += adjustment;  // Adjust the accumulated delta\n                }\n            });\n        });\n\n        console.log(\"Parsed MIDI:\", midi);\n        const track = midi.tracks[0];\n        Tone.Transport.start(); // Start the transport\n\n        if (!midiOutput) {\n            console.warn(\"MIDI output not available\");\n            return;\n        }\n\n        const tempo = (midi.header.tempos && midi.header.tempos[0]) ? midi.header.tempos[0].bpm : 120; // Fallback to a default tempo if not defined ???\n        const ticksPerBeat = midi.header.ppq;\n        const msPerTick = (60 * 1000 / tempo) / ticksPerBeat;\n\n        track.notes.forEach((note, index) => {\n            const timeMs = note.ticks * msPerTick;\n            const timeInTicks = note.ticks; // TODO: for transport\n            scheduleNote(note, timeMs, index);\n        });\n\n        const totalTimeMs = track.durationTicks * msPerTick;\n        const totalTransportTime = track.durationTicks * msPerTick / 1000;\n        console.log(`Total time: ${totalTimeMs} ms`);\n        console.log(`Total transport time: ${track.durationTicks * msPerTick / 1000} s`);\n        setTimeout(() => {\n            loopPlayback();\n        }, totalTimeMs);\n\n    } catch (error) {\n        console.error(\"Error processing MIDI data:\", error.message);\n    }\n}\n// async function loadMidiData(midiData) {\n//     isPlaying = true;  // Set the flag indicating that a MIDI is currently playing\n//     resetPlayback(); // Reset playback when a new file is chosen\n\n//     const midi = new Midi(midiData); // Convert the raw data into a Midi object\n//     console.log(\"Parsed MIDI:\", midi);\n//     const track = midi.tracks[0];\n//     Tone.Transport.start(); // Start the transport\n\n//     if (!midiOutput) {\n//         console.warn(\"MIDI output not available\");\n//         return;\n//     }\n\n//     const tempo = (midi.header.tempos && midi.header.tempos[0]) ? midi.header.tempos[0].bpm : 120; // Fallback to a default tempo if not defined ???\n//     const ticksPerBeat = midi.header.ppq;\n//     const msPerTick = (60 * 1000 / tempo) / ticksPerBeat;\n\n//     track.notes.forEach((note, index) => {\n//         const timeMs = note.ticks * msPerTick;\n//         const timeInTicks = note.ticks; // TODO: for transport\n//         scheduleNote(note, timeMs, index);\n//     });\n\n//     const totalTimeMs = track.durationTicks * msPerTick;\n//     console.log(`Total time: ${totalTimeMs} ms`);\n//     console.log(`Total transport time: ${track.durationTicks * msPerTick / 1000} s`);\n//     setTimeout(() => {\n//         loopPlayback();\n//     }, totalTimeMs);\n// }\n\n\n// Loop the MIDI playback\nfunction loopPlayback() {\n    // Tone.Transport.stop();\n    isPlaying = false;  // Reset the flag once the playback finishes\n    \n    // Check if there's another MIDI in the queue and play it\n    if (midiQueue.length > 0) {\n        playNextMidi();\n    } else {\n        // If there's no new MIDI in the queue, replay the current one\n        loadMidiData(currentMidiForVisuals);\n    }\n}\n\n\n\n// Initialize the audio context on page load\nstartAudioContext();\n\n\n// polling mechanism to regularly check globalFetch for new MIDI data:\nsetInterval(() => {\n    checkAndEnqueueMidi();\n    playNextMidi();\n}, 500);\n // Check every 500 milliseconds. Adjust this value as necessary\n\n\n//  document.getElementById('play-pause-btn').addEventListener('click', function() {\n//     /// play pause button\n//     console.log(\"Play/pause button clicked but not working yet :))\");\n// });\n\n\n// Download the processed MIDI data\nfunction downloadMidi() {\n    if (!processedMidiData) {\n        console.error(\"No MIDI data available for download.\");\n        return;\n    }\n\n    const midiBlob = new Blob([processedMidiData], { type: 'audio/midi' });\n    const url = URL.createObjectURL(midiBlob);\n\n    const downloadLink = document.createElement('a');\n    downloadLink.href = url;\n    downloadLink.download = '2groove_gen.mid';\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    document.body.removeChild(downloadLink);\n\n    URL.revokeObjectURL(url);\n}\n\nconst downloadButton = document.getElementById('download-btn');\ndownloadButton.addEventListener('click', downloadMidi);\n\n\n\n////////////////////////////\n////////////////////////////\n////////////////////////////\n\n\n\n\n\n\n// // w Transport\n// function scheduleNote(note, ticks, ticksPerBeat, bpm) {\n//     const vel = scaleValue(note.velocity, [0, 1], [0, 127]);\n//     const timeInSeconds = ticksToTime(ticks, ticksPerBeat, bpm);\n\n//     Tone.Transport.schedule(time => {\n//         midiOutput.send([0x90, note.midi, vel]);\n//         console.log(`Note Number: ${note.midi}, Velocity: ${vel}, Scheduled Time: ${time}`);\n//     }, timeInSeconds);\n// }\n\n// function scheduleNoteWithTone(note, timeInTicks, index, msPerTick) {\n//     const timeInSeconds = timeInTicks * msPerTick / 1000;\n//     const vel = scaleValue(note.velocity, [0, 1], [0, 127]);\n\n//     Tone.Transport.schedule(time => {\n//         midiOutput.send([0x90, note.midi, vel]);\n//         console.log(`Note Number: ${note.midi}, Velocity: ${vel}`);\n//     }, `+${timeInSeconds}`);\n// }\n\n\n\n// // w Transport\n// async function loadMidiData(midiData) {\n//     isPlaying = true;\n\n//     const midi = new Midi(midiData);\n//     const track = midi.tracks[0];\n\n//     if (!midiOutput) {\n//         console.warn(\"MIDI output not available\");\n//         return;\n//     }\n\n//     const tempo = (midi.header.tempos && midi.header.tempos[0]) ? midi.header.tempos[0].bpm : 120;\n//     const ticksPerBeat = midi.header.ppq;\n//     const msPerTick = (60 * 1000 / tempo) / ticksPerBeat;\n\n//     // Reset any previous schedules on Tone.Transport\n//     Tone.Transport.cancel();\n\n//     track.notes.forEach((note, index) => {\n//         const timeInTicks = note.ticks;\n//         scheduleNoteWithTone(note, timeInTicks, index, msPerTick);\n//     });\n    \n\n//     // Since you want it to loop indefinitely, let's schedule the re-loading of the MIDI data \n//     // at the end of its duration.\n//     const totalTimeInTicks = track.durationTicks;\n//     Tone.Transport.scheduleOnce(() => {\n//         loopPlayback();\n//     }, `+${totalTimeInTicks * msPerTick / 1000}`);\n// }\n\n\n\n","// Author: Çağrı Erdem, 2023\n// Description: Interactive \"piano roll\" visualization for 2groove web app.\n\nimport { getTappedRhythms } from './interface.js';\nimport { getCurrentMidiForVisuals } from './midiBroadcast.js'; // import from broadcasting script instead of globalFetch.js\n\n// Wrap entire sketch inside a function and use p5 instance mode to adapt it for module-based bundling \n// (functions become methods of the instance)\nconst sketch = (s) => {\n    // MIDI Handling\n    s.loadMidiFile = function(event) {\n        const file = event.target.files[0];\n        if (file) {\n            const reader = new FileReader();  // Removed s. prefix\n            reader.onload = function(e) {\n                const arrayBuffer = e.target.result;\n                s.parseMidi(arrayBuffer);  // Removed s. prefix from arrayBuffer\n            };\n            reader.readAsArrayBuffer(file);\n        }\n    }\n\n    // MIDI parse function without quantization\n    s.parseMidi = function(arrayBuffer, verbose = false) { \n        // Preliminary check for unexpected data format\n        if (typeof arrayBuffer === 'string' && arrayBuffer.startsWith('<!do')) {\n            console.error(\"Received unexpected HTML data instead of MIDI\");\n            return;  // exit function early\n        }\n    \n        try {\n            const midi = new Midi(arrayBuffer);  // Assuming that `new Midi` can handle the raw arrayBuffer\n    \n            // Adjust negative delta values\n            midi.tracks.forEach(track => {\n                let accumulatedDelta = 0;\n                track.notes.forEach(note => {\n                    if (note.ticks < 0) {\n                        accumulatedDelta += note.ticks;  // Accumulate the negative delta\n                        note.ticks = 0;  // Reset the current note's ticks to 0\n                    } else if (accumulatedDelta < 0) {\n                        const adjustment = Math.min(note.ticks, -accumulatedDelta);  // Calculate the possible adjustment\n                        note.ticks -= adjustment;  // Deduct the adjustment from the current note's ticks\n                        accumulatedDelta += adjustment;  // Adjust the accumulated delta\n                    }\n                });\n            });\n    \n            s.noteSequences = midi.tracks.map(track => {\n                if (verbose) {\n                    track.notes.forEach(note => {\n                        console.log(note);\n                    });\n                }\n                return { \n                    notes: track.notes.map(note => {\n                        return {\n                            pitch: note.midi,\n                            startTime: note.time,\n                            endTime: note.time + note.duration,\n                            velocity: note.velocity // Include velocity in the note object\n                        };\n                    })\n                };\n            });\n        } catch (error) {\n            console.error(\"Error processing MIDI data in pRoll.js:\", error.message);\n        }\n    }\n    // s.parseMidi = function(arrayBuffer, verbose = false) { \n    //     const midi = new Midi(arrayBuffer);  // Removed s. prefix\n\n    //     s.noteSequences = midi.tracks.map(track => {\n    //         return { notes: track.notes.map(note => {\n    //             if (verbose){\n    //                 track.notes.forEach(note => {\n    //                     console.log(note);\n    //                 })}; \n    //             return {\n    //                 pitch: note.midi,\n    //                 startTime: note.time,\n    //                 endTime: note.time + note.duration,\n    //                 velocity: note.velocity // Include velocity in the note object\n    //             };\n    //         })};\n    //     });\n    // }\n\n    // Constants and global variables\n    s.NUM_STEPS = 32; // Number of quantized steps; this must be equal to the length of the array\n    s.SUBDIVISIONS = 4; // quarter note = 1, eighth note = 2, etc.\n    s.NUM_NOTES = 20; // total number of notes of the piano roll\n    s.LOWEST_MIDI_NOTE = 34; // -1 worked better on the canvas\n    s.noteSequences;\n    s.resizingWidth = false;\n    s.resizingHeight = false;\n    s.WIDTH = 550;\n    s.HEIGHT = 250;\n    s.EDGE_THRESHOLD = 10; // Distance from edge to enable resizing\n    s.offset_x = 1.3; // offset for the vertical lines and/or notes (if necessary)\n    s.offset_y = 1.5;\n\n    s.drumMappings = {\n        35: \"acoustic bass drum\",\n        36: \"kick\",\n        37: \"side-stick\",\n        38: \"snare\",\n        39: \"clap\",\n        40: \"electric snare\",\n        41: \"floor-tom\",\n        42: \"closed-hihat\",\n        43: \"high-tom\",\n        44: \"pedal-hihat\",\n        45: \"low-tom\",\n        46: \"open-hihat\",\n        47: \"mid-tom\",\n        48: \"hi-tom\",\n        49: \"crash\",\n        50: \"high-tom\",\n        51: \"ride\",\n        52: \"chinese cymbal\",\n        // 53: \"ride bell\",\n        // 54: \"tambourine\",\n        // 55: \"splash cymbal\",\n        // 56: \"cowbell\",\n    };\n\n\n    // Functions\n    s.setup = function() {\n\n        s.createCanvas(s.WIDTH, s.HEIGHT).parent('pianoRollContainer');\n        // pRollCanvas.parent('pianoRollContainer'); // attach to the specific div\n        // file input //no file input with the new UI\n        // const midiInput = document.getElementById('fileInput'); // Get the input element by its ID\n        // midiInput.addEventListener('change', s.loadMidiFile); // Add an event listener for when a user selects a file\n        // // fetch button\n        // let fetchButton = s.createButton('Fetch MIDI Data');\n        // fetchButton.mousePressed(s.triggerMidiFetch); \n    \n    }\n\n    s.draw = function() {\n        s.background('#fae'); // Set the background color of the entire canvas\n\n        s.tappedRhythm = getTappedRhythms(); // Get the tapped rhythms from the interface module\n\n\n        // Fetch MIDI data from the server\n        const midi = getCurrentMidiForVisuals();\n        if (midi) {\n            s.parseMidi(midi);\n        }\n        \n        var x = 0 + s.offset_x;\n        var y = 0 + s.offset_y;\n        // var y = s.HEIGHT - s.WIDTH;\n        s.drawTappedRhythm(s.tappedRhythm, x, y, s.WIDTH, s.WIDTH);\n        if (s.noteSequences) {\n            s.drawNotes(s.noteSequences[0].notes, x, y, s.WIDTH, s.WIDTH);\n        }\n        s.fill(255, 64);\n    \n        // Draw vertical lines for subdivisions\n        s.stroke('white'); // Set line color to black\n        const lineInterval = s.WIDTH / (s.NUM_STEPS / 4 * s.SUBDIVISIONS);\n        for (let i = 0; i < s.WIDTH; i += lineInterval) {\n            s.line(i + s.offset_x, 0, i + s.offset_x, s.HEIGHT);\n        }\n        // Draw vertical lines for beats\n        s.stroke('rgba(0,255,0,0.25)');     \n        s.strokeWeight(1.2);\n        const beatInterval = s.WIDTH / (s.NUM_STEPS / 4);\n        for (let i = 0; i < s.WIDTH; i += beatInterval) {\n            s.line(i + s.offset_x, 0, i + s.offset_x, s.HEIGHT);\n        }\n        // Draw vertical lines for bars\n        s.stroke('rgb(0,255,0)');\n        s.strokeWeight(0.8);\n        const barInterval = s.WIDTH / (s.NUM_STEPS / (4 * 4));\n        for (let i = 0; i < s.WIDTH; i += barInterval) {\n            s.line(i + s.offset_x, 0, i + s.offset_x, s.HEIGHT);\n        }\n        s.showPopup(); // Show popup when mouse is near the edge of the note cell-sections\n    }\n\n    // Draw function for quantized tapped rhythm \n    s.drawTappedRhythm = function(tappedRhythm, x, y, width, height) {\n        const totalDuration = tappedRhythm.length;\n    \n        s.push();\n        s.translate(x, y);\n        var cellWidth = width / totalDuration;\n        var cellHeight = height / s.NUM_NOTES; // Assuming each tap corresponds to a note\n        tappedRhythm.forEach(function(tap, index) {\n            if (tap === 1) { // If there's a tap at this position\n                var noteColor = s.color(219, 247, 19, 120); // Less opaque\n                s.fill(noteColor);\n                s.rect(cellWidth * index, 0, cellWidth, cellHeight);\n            }\n        });\n        s.pop();\n    }\n    \n\n    // Draw function without quantization\n    s.drawNotes = function(notes, x, y, width, height) {\n        const totalDuration = s.noteSequences.reduce((max, seq) => {\n            const endTimes = seq.notes.map(note => note.endTime);\n            return Math.max(max, ...endTimes);\n        }, 0);\n\n        s.push();\n        s.translate(x, y);\n        var cellWidth = s.WIDTH / totalDuration; // Update cellWidth based on the new width\n        var cellHeight = s.HEIGHT / s.NUM_NOTES; // Update cellHeight based on the new height\n        notes.forEach(function(note) {\n            var emptyNoteSpacer = 10;\n            var noteColor = s.color(255, 0, 191, note.velocity * 255);\n            s.stroke('black'); // strokes for the notes\n            s.strokeWeight(0.6);\n            s.fill(noteColor);\n            s.rect(emptyNoteSpacer + cellWidth * note.startTime, s.HEIGHT - cellHeight * (note.pitch - s.LOWEST_MIDI_NOTE),\n                cellWidth * (note.endTime - note.startTime) - emptyNoteSpacer, cellHeight);\n        });\n        s.pop();\n    }\n\n    // For example:\n    s.mousePressed = function() {\n        // Check if mouse is near the right edge of the canvas\n        if (s.abs(s.mouseX - s.WIDTH) < s.EDGE_THRESHOLD) {\n            s.resizingWidth = true;\n        }\n        // Check if mouse is near the bottom edge of the canvas\n        if (s.abs(s.mouseY - s.HEIGHT) < s.EDGE_THRESHOLD) {\n            s.resizingHeight = true;\n        }\n    }\n\n    s.mouseDragged = function() {\n        // If resizing width, update WIDTH based on mouseX\n        if (s.resizingWidth) {\n            s.WIDTH = s.mouseX;\n        }\n        // If resizing height, update HEIGHT based on mouseY\n        if (s.resizingHeight) {\n            s.HEIGHT = s.mouseY;\n        }\n        // Apply the new width and height to the canvas\n        s.resizeCanvas(s.WIDTH, s.HEIGHT);\n    }\n\n    s.mouseReleased = function() {\n        // Reset resizing flags\n        s.resizingWidth = false;\n        s.resizingHeight = false;\n    }\n\n    s.showPopup = function() {\n        if (s.mouseX > s.offset_x && s.mouseX < s.WIDTH + s.offset_x && s.mouseY > 0 && s.mouseY < s.HEIGHT) {\n            const cellHeight = s.HEIGHT / s.NUM_NOTES;\n            const section = Math.floor((s.HEIGHT - s.mouseY) / cellHeight);\n            const midiNote = parseInt(Object.keys(s.drumMappings)[section]);\n            \n            if (midiNote >= s.LOWEST_MIDI_NOTE && midiNote != 35) { // 35 is the acoustic bass drum - you can ignore parts this way\n                const drumPart = s.drumMappings[midiNote];\n                const popupWidth = s.textWidth(drumPart) + 10;\n    \n                // Decide the x position of the popup based on mouseX\n                let popupX = s.mouseX + 5;\n                if (s.mouseX > (s.WIDTH + s.offset_x) / 2) {\n                    popupX = s.mouseX - popupWidth - 5;\n                }\n    \n                s.fill(255);\n                s.rect(popupX, s.mouseY, popupWidth, 20);\n                s.fill(0);\n                s.text(drumPart, popupX + 5, s.mouseY + 15);\n            }\n        }\n    }\n}\n\n// Run the sketch:\nnew p5(sketch);\n\n\n","// worker for client-side ajax requests\n\nself.addEventListener('message', function(event) {\n    const data = event.data;\n\n    if (data.cmd === 'sendArray') {\n        sendArrayToServer(data.array, data.bpm, data.temperatureValue, data.hitTolerance, data.isHttpConnected, data.httpIp, data.portInput, data.samplingStrategy);\n    }\n});\n\n\n// function sendArrayToServer(array, bpm, temperatureValue, hitTolerance, isHttpConnected, httpIp, portInput, samplingStrategy) {\n//     if (!isHttpConnected) return;\n\n//     const data_url = `http://${httpIp}:${portInput}/send_array`;\n//     console.log(\"Sending request to:\", data_url);\n\n//     const payload = {\n//         method: 'POST',\n//         headers: {\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify({\n//             array: array,\n//             bpm: bpm,\n//             temp: temperatureValue,\n//             thresh: hitTolerance,\n//             samplingStrategy: samplingStrategy\n//         })\n//     };\n\n//     fetch(data_url, payload)\n//     .then(response => response.arrayBuffer())\n//     .then(data => {\n//         console.log(\"Processing tapped rhythms...\");\n//         // send a message back to the main thread if necessary\n//         self.postMessage({type: 'arrayProcessed', data: data});\n//     })\n//     .catch(error => {\n//         console.error(\"Error:\", error);\n//         self.postMessage({type: 'error', error: error});\n//     });\n// }\n\n\nfunction sendArrayToServer(array, bpm, temperatureValue, hitTolerance, isHttpConnected, httpIp, portInput, samplingStrategy) {\n    if (!isHttpConnected) return;\n\n    const data_url = `http://${httpIp}:${portInput}/send_array`;\n    console.log(\"Sending request to:\", data_url);\n\n    const payload = {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            array: array,\n            bpm: bpm,\n            temp: temperatureValue,\n            thresh: hitTolerance,\n            samplingStrategy: samplingStrategy\n        })\n    };\n\n    fetch(data_url, payload)\n    .then(response => response.json())  // Process as JSON first\n    // checking the success field of the response, and if it's true, you're converting the data field (base64 encoded string of the MIDI binary) \n    // back to a byte array, and then you're posting this byte array back to the main thread:\n    .then(data => {\n        if (data.success) {\n            console.log(\"Processing tapped rhythms...\");\n            // const midiData = new Uint8Array(data.data);  // Convert base64 string to byte array\n            const base64decoded = atob(data.data);\n            const midiData = new Uint8Array(base64decoded.length).map((_, i) => base64decoded.charCodeAt(i));\n\n            console.log(\"Received MIDI data length:\", midiData.length);\n            self.postMessage({type: 'arrayProcessed', data: midiData});\n        } else {\n            console.warn(data.message);\n            self.postMessage({type: 'error', error: new Error(data.message)});\n        }\n    })    \n    .catch(error => {\n        console.error(\"Error:\", error);\n        self.postMessage({type: 'error', error: error});\n    });\n}\n","// dedicated thread for queueing up rhythms\n\nlet midiEvents = [];  // This will hold the queued MIDI events\n\nself.addEventListener('message', function(event) {\n    const data = event.data;\n\n    switch (data.cmd) {\n        case 'enqueue':\n            midiEvents.push(data.event);\n            break;\n        case 'dequeue':\n            // Logic to decide which event(s) should be sent next\n            const nextEvent = midiEvents.shift();  // Simplified example\n            self.postMessage({ cmd: 'broadcast', event: nextEvent });\n            break;\n        // ... other cases like clearing the queue, etc.\n    }\n});\n"],"names":["$57d1b30337fe6afc$var$metronomeLoop","$63d35791daec472d$var$midiOutput","$63d35791daec472d$var$processedMidiData","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","Object","defineProperty","get","$18c11f3350a906ea$export$6503ec6e8aabbaf","set","v","enumerable","configurable","$18c11f3350a906ea$var$mapping","Map","baseUrl","manifest","i","length","path","URL","url","toString","JSON","parse","$e2fd133faaf57a8f$export$5f20c3cdf3b5e8be","$e3b7b843e8e8227f$var$samplers","$e3b7b843e8e8227f$var$drumParts","forEach","drum","drumSamples","samplePath","index","noteName","Tone","Frequency","toNote","Sampler","urls","toDestination","$e3b7b843e8e8227f$var$drumMappings","$e3b7b843e8e8227f$var$onMIDIMessageReceived","message","verbose","$e3b7b843e8e8227f$var$isListening","status","noteNumber","velocity","data","drumType","console","log","noteToTrigger","Math","ceil","sampler","triggerAttackRelease","hitDuration","error","$e3b7b843e8e8227f$var$toggleListeningCheckbox","document","querySelector","$e3b7b843e8e8227f$var$onMIDIFailure","e","addEventListener","checked","navigator","requestMIDIAccess","then","$e3b7b843e8e8227f$var$onMIDISuccess","midiAccess","inputs","values","input","next","done","value","onmidimessage","onstatechange","port","state","setTimeout","$affef116f20f7e03$export$3b6dd1a438fa9298","midiData","midiReadyForProcessing","setMidiData","getMidiData","isMidiReadyForProcessing","midiProcessed","$57d1b30337fe6afc$var$audioContext","AudioContext","$57d1b30337fe6afc$var$tempoSlider","getElementById","$57d1b30337fe6afc$var$metronomeVolumeSlider","$57d1b30337fe6afc$var$toggleMetronomeCheckbox","$57d1b30337fe6afc$var$recIndicator","$57d1b30337fe6afc$var$arrayList","$57d1b30337fe6afc$var$intervals","$57d1b30337fe6afc$var$gateKeyActive","$57d1b30337fe6afc$var$currentArray","$57d1b30337fe6afc$var$recording","$57d1b30337fe6afc$var$recordingStartedAt","$57d1b30337fe6afc$var$lastTapTime","$57d1b30337fe6afc$var$tappedRhythms","$57d1b30337fe6afc$var$metronomeRunning","$57d1b30337fe6afc$var$metronomeSoundOn","$57d1b30337fe6afc$var$tempVal","$57d1b30337fe6afc$var$threshVal","$57d1b30337fe6afc$var$currentTick","$57d1b30337fe6afc$var$clickTone","$57d1b30337fe6afc$var$samplingStrategy","$57d1b30337fe6afc$var$samplingStrategyIndex","$57d1b30337fe6afc$var$playClick","volume","frequency","osc","createOscillator","gainNode","createGain","gain","connect","destination","start","stop","currentTime","$57d1b30337fe6afc$export$f470dc9fddb12380","resume","context","$57d1b30337fe6afc$export$6f2de5699a574d20","bpm","Transport","Loop","time","$57d1b30337fe6afc$var$emitTickEvent","event","CustomEvent","detail","tick","window","dispatchEvent","$57d1b30337fe6afc$var$initializeApp","defaultBPM","$57d1b30337fe6afc$var$scaleValue","textContent","$763984d12099414d$exports","$56b621a6dd25b2cb$exports","workerUrl","origin","isESM","self","location","source","stringify","createObjectURL","Blob","type","$763984d12099414d$var$url","$57d1b30337fe6afc$var$ajaxWorker","Worker","$57d1b30337fe6afc$var$sendArrayToServer","array","postMessage","cmd","parseFloat","temperatureValue","hitTolerance","isHttpConnected","httpIp","portInput","samplingStrategy","from","to","scale","capped","min","max","vol","key","preventDefault","Date","now","innerText","classList","add","totalSteps","parseInt","Array","fill","elapsedMs","quantizeValue","tappedSubdivision","round","lastTapTimestamp","light","remove","toUpperCase","getTime","interval","tapTempoLight","push","shift","averageInterval","reduce","acc","val","tempoElement","bpmDisplayElement","tempoSlider","toFixed","$57d1b30337fe6afc$var$storeAndDisplayArray","li","createElement","map","join","firstChild","insertBefore","appendChild","editedArray","$57d1b30337fe6afc$var$toggleValues","arr","numIndices1","every","editedArr","toggleIndices","randomIndex","floor","random","numIndices","resetButton","innerHTML","$71b2b71ec27873f8$exports","$c4f90bd834ee2783$exports","modelChangeButton","imgElement","src","includes","$57d1b30337fe6afc$var$midiButton","open","sandbox","$63d35791daec472d$var$audioContext","webkitAudioContext","$63d35791daec472d$var$startTime","$63d35791daec472d$var$timeouts","$63d35791daec472d$var$midiQueue","$63d35791daec472d$var$currentMidiForVisuals","$63d35791daec472d$var$isPlaying","$63d35791daec472d$var$playNextMidi","$63d35791daec472d$var$loadMidiData","clearTimeout","currentNoteIndex","currentTick","midi","Midi","tracks","track","accumulatedDelta","notes","note","ticks","adjustment","warn","tempo","header","tempos","ticksPerBeat","ppq","msPerTick","timeMs","$63d35791daec472d$var$scheduleNote","vel","scheduledTime","timeoutId","send","totalTimeMs","durationTicks","outputs","$63d35791daec472d$var$populateMidiOutputs","select","output","option","text","name","target","setInterval","$63d35791daec472d$var$checkAndEnqueueMidi","buffer","$63d35791daec472d$var$downloadButton","midiBlob","downloadLink","href","download","body","click","removeChild","revokeObjectURL","p5","s","loadMidiFile","file","files","reader","FileReader","onload","arrayBuffer","result","parseMidi","readAsArrayBuffer","startsWith","noteSequences","pitch","startTime","endTime","duration","NUM_STEPS","SUBDIVISIONS","NUM_NOTES","LOWEST_MIDI_NOTE","resizingWidth","resizingHeight","WIDTH","HEIGHT","EDGE_THRESHOLD","offset_x","offset_y","drumMappings","setup","createCanvas","parent","draw","background","tappedRhythm","x","y","drawTappedRhythm","drawNotes","stroke","lineInterval","line","strokeWeight","beatInterval","barInterval","showPopup","width","height","totalDuration","translate","cellWidth","cellHeight","tap","noteColor","color","rect","pop","seq","endTimes","emptyNoteSpacer","mousePressed","abs","mouseX","mouseY","mouseDragged","resizeCanvas","mouseReleased","section","midiNote","keys","drumPart","popupWidth","textWidth","popupX","$e4758edede27b98a$var$sendArrayToServer","data_url","payload","method","headers","temp","thresh","fetch","response","json","success","base64decoded","atob","Uint8Array","_","charCodeAt","catch","$55223a1de456471a$var$midiEvents","nextEvent"],"version":3,"file":"index.b186437a.js.map"}