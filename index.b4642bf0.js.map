{"mappings":"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SAwBC,EAED;;;;;;;;;;;;;;;;;;;;;;;;SAwBC,EAED;;;;;;;;;;;;;;;;;;;;;;;;SAwBC,EAED;;;;;;;;;;;;;;;;;;;;;;;;SAwBC,EAED;;;;;;;;;;;;;;;;;;;;;;;;SAwBC,EAED;;;;;;;;;;;;;;;;;;;;;;;;SAwBC,EAED;;;;;;;;;;;;;;;;;;;;;;;;SAwBC,EAED;;;;;;;;;;;;;;;;;;;;;;;;SAwBC,EAED;;;;;;;;;;;;;;;;;;;;;;;;SAwBC,EAED;;;;;;;;;;;;;;;;;;;;;;;;SAwBC,EAED;;;;;;;;;;;;;;;;;;;;;;;;SAwBC,EAED;;;;;;;;;;;;;;;;;;;;;;;;SAwBC,EAED;;;;;;;;;;;;;;;;;;;;;;;;SAwBC,EAED;;;;;;;;;;;;;;;;;;;;;;;;SAwBC,EAED;;;;;;;;;;;;;;;;;;;;;;;;SAwBC,EAED;;;;;;;;;;;;;;;;;;;;;;;;SAwBC,EAED;;;;;;;;;;;;;;;;;;;;;;;;SAwBC,EAED;;;;;;;;;;;;;;;;;;;;;;;;SAwBC,EAED;;;;;;;;;;;;;;;;;;;;;;;;SAwBC,EAED;;;;;;;;;;;;;;;;;;;;;;;;SAwBC,EAED;;;;;;;;;;;;;;;;;;;;;;;;SAwBC,EAED;;;;;;;;;;;;;;;;;;;;;;;;SAwBC,EAED;;;;;;;;;;;;;;;;;;;;;;;;SAwBC,EAED;;;;;;;;;;;;;;;;;;;;;;;;SAwBC,EAED;;;;;;;;;;;;;;;;;;;;;;;;SAwBC,EAED;;;;;;;;;;;;;;;;;;;;;;;;SAwBC,EAED;;;;;;;;;;;;;;;;;;;;;;;;SAwBC,EAED;;;;;;;;;;;;;;;;;;;;;;;;SAwBC,EAED;;;;;;;;;;;;;;;;;;;;;;;;SAwBC,EAED;;;;;;;;;;;;;;;;;;;;;;;;SAwBC,EAED;;;;;;;;;;;;;;;;;;;;;;;;SAwBC,EAED;;;;;;;;;;;;;;;;;;;;;;;;SAwBC,EAED;;;;;;;;;;;;;;;;;;;;;;;;SAwBC,EAED;;;;;;;;;;;;;;;;;;;;;;;;SAwBC,EAED;;;;;;;;;;;;;;;;;;;;;;;;SAwBC,EAED;;;;;;;;;;;;;;;;;;;;;;;;SAwBC,EAED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","sources":["<anon>","src/js/utils/libs/webmidi/dist/iife/webmidi.iife.js"],"sourcesContent":["/**\n * WEBMIDI.js v3.1.6\n * A JavaScript library to kickstart your MIDI projects\n * https://webmidijs.org\n * Build generated on June 4th, 2023.\n *\n * © Copyright 2015-2023, Jean-Philippe Côté.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */ /* Version: 3.1.6 - June 4, 2023 10:51:46 */ (function(exports) {\n    \"use strict\";\n    /**\n   * The `EventEmitter` class provides methods to implement the _observable_ design pattern. This\n   * pattern allows one to _register_ a function to execute when a specific event is _emitted_ by the\n   * emitter.\n   *\n   * It is intended to be an abstract class meant to be extended by (or mixed into) other objects.\n   */ class EventEmitter {\n        /**\n     * Creates a new `EventEmitter`object.\n     *\n     * @param {boolean} [eventsSuspended=false] Whether the `EventEmitter` is initially in a suspended\n     * state (i.e. not executing callbacks).\n     */ constructor(eventsSuspended = false){\n            /**\n       * An object containing a property for each event with at least one registered listener. Each\n       * event property contains an array of all the [`Listener`]{@link Listener} objects registered\n       * for the event.\n       *\n       * @type {Object}\n       * @readonly\n       */ this.eventMap = {};\n            /**\n       * Whether or not the execution of callbacks is currently suspended for this emitter.\n       *\n       * @type {boolean}\n       */ this.eventsSuspended = eventsSuspended == true ? true : false;\n        }\n        /**\n     * The callback function is executed when the associated event is triggered via [`emit()`](#emit).\n     * The [`emit()`](#emit) method relays all additional arguments it received to the callback\n     * functions. Since [`emit()`](#emit) can be passed a variable number of arguments, it is up to\n     * the developer to make sure the arguments match those of the associated callback. In addition,\n     * the callback also separately receives all the arguments present in the listener's\n     * [`arguments`](Listener#arguments) property. This makes it easy to pass data from where the\n     * listener is added to where the listener is executed.\n     *\n     * @callback EventEmitter~callback\n     * @param {...*} [args] A variable number of arguments matching the ones (if any) that were passed\n     * to the [`emit()`](#emit) method (except, the first one) followed by the arguments found in the\n     * listener's [`arguments`](Listener#arguments) array.\n     */ /**\n     * Adds a listener for the specified event. It returns the [`Listener`]{@link Listener} object\n     * that was created and attached to the event.\n     *\n     * To attach a global listener that will be triggered for any events, use\n     * [`EventEmitter.ANY_EVENT`]{@link #ANY_EVENT} as the first parameter. Note that a global\n     * listener will also be triggered by non-registered events.\n     *\n     * @param {string|Symbol} event The event to listen to.\n     * @param {EventEmitter~callback} callback The callback function to execute when the event occurs.\n     * @param {Object} [options={}]\n     * @param {Object} [options.context=this] The value of `this` in the callback function.\n     * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n     * of the listeners array and thus executed first.\n     * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n     * automatically expires.\n     * @param {number} [options.remaining=Infinity] The number of times after which the callback\n     * should automatically be removed.\n     * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n     * callback function. This array is stored in the [`arguments`]{@link Listener#arguments}\n     * property of the [`Listener`]{@link Listener} object and can be retrieved or modified as\n     * desired.\n     *\n     * @returns {Listener} The newly created [`Listener`]{@link Listener} object.\n     *\n     * @throws {TypeError} The `event` parameter must be a string or\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}.\n     * @throws {TypeError} The `callback` parameter must be a function.\n     */ addListener(event, callback, options = {}) {\n            if (typeof event === \"string\" && event.length < 1 || event instanceof String && event.length < 1 || typeof event !== \"string\" && !(event instanceof String) && event !== EventEmitter.ANY_EVENT) throw new TypeError(\"The 'event' parameter must be a string or EventEmitter.ANY_EVENT.\");\n            if (typeof callback !== \"function\") throw new TypeError(\"The callback must be a function.\");\n            const listener = new Listener(event, this, callback, options);\n            if (!this.eventMap[event]) this.eventMap[event] = [];\n            if (options.prepend) this.eventMap[event].unshift(listener);\n            else this.eventMap[event].push(listener);\n            return listener;\n        }\n        /**\n     * Adds a one-time listener for the specified event. The listener will be executed once and then\n     * destroyed. It returns the [`Listener`]{@link Listener} object that was created and attached\n     * to the event.\n     *\n     * To attach a global listener that will be triggered for any events, use\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} as the first parameter. Note that a\n     * global listener will also be triggered by non-registered events.\n     *\n     * @param {string|Symbol} event The event to listen to\n     * @param {EventEmitter~callback} callback The callback function to execute when the event occurs\n     * @param {Object} [options={}]\n     * @param {Object} [options.context=this] The context to invoke the callback function in.\n     * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n     * of the listeners array and thus executed first.\n     * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n     * automatically expires.\n     * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n     * callback function. This array is stored in the [`arguments`]{@link Listener#arguments}\n     * property of the [`Listener`]{@link Listener} object and can be retrieved or modified as\n     * desired.\n     *\n     * @returns {Listener} The newly created [`Listener`]{@link Listener} object.\n     *\n     * @throws {TypeError} The `event` parameter must be a string or\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}.\n     * @throws {TypeError} The `callback` parameter must be a function.\n     */ addOneTimeListener(event, callback, options = {}) {\n            options.remaining = 1;\n            this.addListener(event, callback, options);\n        }\n        /**\n     * Identifier to use when adding or removing a listener that should be triggered when any events\n     * occur.\n     *\n     * @type {Symbol}\n     */ static get ANY_EVENT() {\n            return Symbol.for(\"Any event\");\n        }\n        /**\n     * Returns `true` if the specified event has at least one registered listener. If no event is\n     * specified, the method returns `true` if any event has at least one listener registered (this\n     * includes global listeners registered to\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}).\n     *\n     * Note: to specifically check for global listeners added with\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}, use\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} as the parameter.\n     *\n     * @param {string|Symbol} [event=(any event)] The event to check\n     * @param {function|Listener} [callback=(any callback)] The actual function that was added to the\n     * event or the {@link Listener} object returned by `addListener()`.\n     * @returns {boolean}\n     */ hasListener(event, callback) {\n            if (event === undefined) {\n                // Check for ANY_EVENT\n                if (this.eventMap[EventEmitter.ANY_EVENT] && this.eventMap[EventEmitter.ANY_EVENT].length > 0) return true;\n                 // Check for any regular events\n                return Object.entries(this.eventMap).some(([, value])=>{\n                    return value.length > 0;\n                });\n            } else {\n                if (this.eventMap[event] && this.eventMap[event].length > 0) {\n                    if (callback instanceof Listener) {\n                        let result = this.eventMap[event].filter((listener)=>listener === callback);\n                        return result.length > 0;\n                    } else if (typeof callback === \"function\") {\n                        let result = this.eventMap[event].filter((listener)=>listener.callback === callback);\n                        return result.length > 0;\n                    } else if (callback != undefined) return false;\n                    return true;\n                } else return false;\n            }\n        }\n        /**\n     * An array of all the unique event names for which the emitter has at least one registered\n     * listener.\n     *\n     * Note: this excludes global events registered with\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} because they are not tied to a\n     * specific event.\n     *\n     * @type {string[]}\n     * @readonly\n     */ get eventNames() {\n            return Object.keys(this.eventMap);\n        }\n        /**\n     * Returns an array of all the [`Listener`]{@link Listener} objects that have been registered for\n     * a specific event.\n     *\n     * Please note that global events (those added with\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}) are not returned for \"regular\"\n     * events. To get the list of global listeners, specifically use\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} as the parameter.\n     *\n     * @param {string|Symbol} event The event to get listeners for.\n     * @returns {Listener[]} An array of [`Listener`]{@link Listener} objects.\n     */ getListeners(event) {\n            return this.eventMap[event] || [];\n        }\n        /**\n     * Suspends execution of all callbacks functions registered for the specified event type.\n     *\n     * You can suspend execution of callbacks registered with\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} by passing\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} to `suspendEvent()`. Beware that this\n     * will not suspend all callbacks but only those registered with\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}. While this may seem counter-intuitive\n     * at first glance, it allows the selective suspension of global listeners while leaving other\n     * listeners alone. If you truly want to suspends all callbacks for a specific\n     * [`EventEmitter`]{@link EventEmitter}, simply set its `eventsSuspended` property to `true`.\n     *\n     * @param {string|Symbol} event The event name (or `EventEmitter.ANY_EVENT`) for which to suspend\n     * execution of all callback functions.\n     */ suspendEvent(event) {\n            this.getListeners(event).forEach((listener)=>{\n                listener.suspended = true;\n            });\n        }\n        /**\n     * Resumes execution of all suspended callback functions registered for the specified event type.\n     *\n     * You can resume execution of callbacks registered with\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} by passing\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} to `unsuspendEvent()`. Beware that\n     * this will not resume all callbacks but only those registered with\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}. While this may seem\n     * counter-intuitive, it allows the selective unsuspension of global listeners while leaving other\n     * callbacks alone.\n     *\n     * @param {string|Symbol} event The event name (or `EventEmitter.ANY_EVENT`) for which to resume\n     * execution of all callback functions.\n     */ unsuspendEvent(event) {\n            this.getListeners(event).forEach((listener)=>{\n                listener.suspended = false;\n            });\n        }\n        /**\n     * Returns the number of listeners registered for a specific event.\n     *\n     * Please note that global events (those added with\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}) do not count towards the remaining\n     * number for a \"regular\" event. To get the number of global listeners, specifically use\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} as the parameter.\n     *\n     * @param {string|Symbol} event The event which is usually a string but can also be the special\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} symbol.\n     * @returns {number} An integer representing the number of listeners registered for the specified\n     * event.\n     */ getListenerCount(event) {\n            return this.getListeners(event).length;\n        }\n        /**\n     * Executes the callback function of all the [`Listener`]{@link Listener} objects registered for\n     * a given event. The callback functions are passed the additional arguments passed to `emit()`\n     * (if any) followed by the arguments present in the [`arguments`](Listener#arguments) property of\n     * the [`Listener`](Listener) object (if any).\n     *\n     * If the [`eventsSuspended`]{@link #eventsSuspended} property is `true` or the\n     * [`Listener.suspended`]{@link Listener#suspended} property is `true`, the callback functions\n     * will not be executed.\n     *\n     * This function returns an array containing the return values of each of the callbacks.\n     *\n     * It should be noted that the regular listeners are triggered first followed by the global\n     * listeners (those added with [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}).\n     *\n     * @param {string} event The event\n     * @param {...*} args Arbitrary number of arguments to pass along to the callback functions\n     *\n     * @returns {Array} An array containing the return value of each of the executed listener\n     * functions.\n     *\n     * @throws {TypeError} The `event` parameter must be a string.\n     */ emit(event, ...args) {\n            if (typeof event !== \"string\" && !(event instanceof String)) throw new TypeError(\"The 'event' parameter must be a string.\");\n            if (this.eventsSuspended) return; // We collect return values from all listeners here\n            let results = []; // We must make sure that we do not have undefined otherwise concat() will add an undefined\n            // entry in the array.\n            let listeners = this.eventMap[EventEmitter.ANY_EVENT] || [];\n            if (this.eventMap[event]) listeners = listeners.concat(this.eventMap[event]);\n            listeners.forEach((listener)=>{\n                // This is the per-listener suspension check\n                if (listener.suspended) return;\n                let params = [\n                    ...args\n                ];\n                if (Array.isArray(listener.arguments)) params = params.concat(listener.arguments);\n                if (listener.remaining > 0) {\n                    results.push(listener.callback.apply(listener.context, params));\n                    listener.count++;\n                }\n                if (--listener.remaining < 1) listener.remove();\n            });\n            return results;\n        }\n        /**\n     * Removes all the listeners that were added to the object upon which the method is called and\n     * that match the specified criterias. If no parameters are passed, all listeners added to this\n     * object will be removed. If only the `event` parameter is passed, all listeners for that event\n     * will be removed from that object. You can remove global listeners by using\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} as the first parameter.\n     *\n     * To use more granular options, you must at least define the `event`. Then, you can specify the\n     * callback to match or one or more of the additional options.\n     *\n     * @param {string} [event] The event name.\n     * @param {EventEmitter~callback} [callback] Only remove the listeners that match this exact\n     * callback function.\n     * @param {Object} [options]\n     * @param {*} [options.context] Only remove the listeners that have this exact context.\n     * @param {number} [options.remaining] Only remove the listener if it has exactly that many\n     * remaining times to be executed.\n     */ removeListener(event, callback, options = {}) {\n            if (event === undefined) {\n                this.eventMap = {};\n                return;\n            } else if (!this.eventMap[event]) return;\n             // Find listeners that do not match the criterias (those are the ones we will keep)\n            let listeners = this.eventMap[event].filter((listener)=>{\n                return callback && listener.callback !== callback || options.remaining && options.remaining !== listener.remaining || options.context && options.context !== listener.context;\n            });\n            if (listeners.length) this.eventMap[event] = listeners;\n            else delete this.eventMap[event];\n        }\n        /**\n     * The `waitFor()` method is an async function which returns a promise. The promise is fulfilled\n     * when the specified event occurs. The event can be a regular event or\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} (if you want to resolve as soon as any\n     * event is emitted).\n     *\n     * If the `duration` option is set, the promise will only be fulfilled if the event is emitted\n     * within the specified duration. If the event has not been fulfilled after the specified\n     * duration, the promise is rejected. This makes it super easy to wait for an event and timeout\n     * after a certain time if the event is not triggered.\n     *\n     * @param {string|Symbol} event The event to wait for\n     * @param {Object} [options={}]\n     * @param {number} [options.duration=Infinity] The number of milliseconds to wait before the\n     * promise is automatically rejected.\n     */ async waitFor(event, options = {}) {\n            options.duration = parseInt(options.duration);\n            if (isNaN(options.duration) || options.duration <= 0) options.duration = Infinity;\n            return new Promise((resolve, reject)=>{\n                let timeout;\n                let listener = this.addListener(event, ()=>{\n                    clearTimeout(timeout);\n                    resolve();\n                }, {\n                    remaining: 1\n                });\n                if (options.duration !== Infinity) timeout = setTimeout(()=>{\n                    listener.remove();\n                    reject(\"The duration expired before the event was emitted.\");\n                }, options.duration);\n            });\n        }\n        /**\n     * The number of unique events that have registered listeners.\n     *\n     * Note: this excludes global events registered with\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} because they are not tied to a\n     * specific event.\n     *\n     * @type {number}\n     * @readonly\n     */ get eventCount() {\n            return Object.keys(this.eventMap).length;\n        }\n    }\n    /**\n   * The `Listener` class represents a single event listener object. Such objects keep all relevant\n   * contextual information such as the event being listened to, the object the listener was attached\n   * to, the callback function and so on.\n   *\n   */ class Listener {\n        /**\n     * Creates a new `Listener` object\n     *\n     * @param {string|Symbol} event The event being listened to\n     * @param {EventEmitter} target The [`EventEmitter`]{@link EventEmitter} object that the listener\n     * is attached to.\n     * @param {EventEmitter~callback} callback The function to call when the listener is triggered\n     * @param {Object} [options={}]\n     * @param {Object} [options.context=target] The context to invoke the listener in (a.k.a. the\n     * value of `this` inside the callback function).\n     * @param {number} [options.remaining=Infinity] The remaining number of times after which the\n     * callback should automatically be removed.\n     * @param {array} [options.arguments] An array of arguments that will be passed separately to the\n     * callback function upon execution. The array is stored in the [`arguments`]{@link #arguments}\n     * property and can be retrieved or modified as desired.\n     *\n     * @throws {TypeError} The `event` parameter must be a string or\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}.\n     * @throws {ReferenceError} The `target` parameter is mandatory.\n     * @throws {TypeError} The `callback` must be a function.\n     */ constructor(event, target, callback, options = {}){\n            if (typeof event !== \"string\" && !(event instanceof String) && event !== EventEmitter.ANY_EVENT) throw new TypeError(\"The 'event' parameter must be a string or EventEmitter.ANY_EVENT.\");\n            if (!target) throw new ReferenceError(\"The 'target' parameter is mandatory.\");\n            if (typeof callback !== \"function\") throw new TypeError(\"The 'callback' must be a function.\");\n             // Convert single value argument to array\n            if (options.arguments !== undefined && !Array.isArray(options.arguments)) options.arguments = [\n                options.arguments\n            ];\n             // Define default options and merge declared options into them,\n            options = Object.assign({\n                context: target,\n                remaining: Infinity,\n                arguments: undefined,\n                duration: Infinity\n            }, options); // Make sure it is eventually deleted if a duration is supplied\n            if (options.duration !== Infinity) setTimeout(()=>this.remove(), options.duration);\n            /**\n       * An array of arguments to pass to the callback function upon execution.\n       * @type {array}\n       */ this.arguments = options.arguments;\n            /**\n       * The callback function to execute.\n       * @type {Function}\n       */ this.callback = callback;\n            /**\n       * The context to execute the callback function in (a.k.a. the value of `this` inside the\n       * callback function)\n       * @type {Object}\n       */ this.context = options.context;\n            /**\n       * The number of times the listener function was executed.\n       * @type {number}\n       */ this.count = 0;\n            /**\n       * The event name.\n       * @type {string}\n       */ this.event = event;\n            /**\n       * The remaining number of times after which the callback should automatically be removed.\n       * @type {number}\n       */ this.remaining = parseInt(options.remaining) >= 1 ? parseInt(options.remaining) : Infinity;\n            /**\n       * Whether this listener is currently suspended or not.\n       * @type {boolean}\n       */ this.suspended = false;\n            /**\n       * The object that the event is attached to (or that emitted the event).\n       * @type {EventEmitter}\n       */ this.target = target;\n        }\n        /**\n     * Removes the listener from its target.\n     */ remove() {\n            this.target.removeListener(this.event, this.callback, {\n                context: this.context,\n                remaining: this.remaining\n            });\n        }\n    }\n    /**\n   * The `Enumerations` class contains enumerations and arrays of elements used throughout the\n   * library. All its properties are static and should be referenced using the class name. For\n   * example: `Enumerations.CHANNEL_MESSAGES`.\n   *\n   * @license Apache-2.0\n   * @since 3.0.0\n   */ class Enumerations {\n        /**\n     * @enum {Object.<string, number>}\n     * @readonly\n     * @deprecated since 3.1 (use Enumerations.CHANNEL_MESSAGES instead)\n     * @private\n     * @static\n     */ static get MIDI_CHANNEL_MESSAGES() {\n            if (this.validation) console.warn(\"The MIDI_CHANNEL_MESSAGES enum has been deprecated. Use the Enumerations.CHANNEL_MESSAGES enum instead.\");\n            return Enumerations.CHANNEL_MESSAGES;\n        }\n        /**\n     * Enumeration of all MIDI channel message names and their associated 4-bit numerical value:\n     *\n     * | Message Name        | Hexadecimal | Decimal |\n     * |---------------------|-------------|---------|\n     * | `noteoff`           | 0x8         | 8       |\n     * | `noteon`            | 0x9         | 9       |\n     * | `keyaftertouch`     | 0xA         | 10      |\n     * | `controlchange`     | 0xB         | 11      |\n     * | `programchange`     | 0xC         | 12      |\n     * | `channelaftertouch` | 0xD         | 13      |\n     * | `pitchbend`         | 0xE         | 14      |\n     *\n     * @enum {Object.<string, number>}\n     * @readonly\n     * @since 3.1\n     * @static\n     */ static get CHANNEL_MESSAGES() {\n            return {\n                noteoff: 0x8,\n                // 8\n                noteon: 0x9,\n                // 9\n                keyaftertouch: 0xA,\n                // 10\n                controlchange: 0xB,\n                // 11\n                programchange: 0xC,\n                // 12\n                channelaftertouch: 0xD,\n                // 13\n                pitchbend: 0xE // 14\n            };\n        }\n        /**\n     * A simple array of the 16 valid MIDI channel numbers (`1` to `16`):\n     *\n     * @type {number[]}\n     * @readonly\n     * @since 3.1\n     * @static\n     */ static get CHANNEL_NUMBERS() {\n            return [\n                1,\n                2,\n                3,\n                4,\n                5,\n                6,\n                7,\n                8,\n                9,\n                10,\n                11,\n                12,\n                13,\n                14,\n                15,\n                16\n            ];\n        }\n        /**\n     * @type {number[]}\n     * @readonly\n     * @deprecated since 3.1 (use Enumerations.CHANNEL_NUMBERS instead)\n     * @private\n     * @static\n     */ static get MIDI_CHANNEL_NUMBERS() {\n            if (this.validation) console.warn(\"The MIDI_CHANNEL_NUMBERS array has been deprecated. Use the Enumerations.CHANNEL_NUMBERS array instead.\");\n            return [\n                1,\n                2,\n                3,\n                4,\n                5,\n                6,\n                7,\n                8,\n                9,\n                10,\n                11,\n                12,\n                13,\n                14,\n                15,\n                16\n            ];\n        }\n        /**\n     * Enumeration of all MIDI channel mode message names and their associated numerical value:\n     *\n     *\n     * | Message Name          | Hexadecimal | Decimal |\n     * |-----------------------|-------------|---------|\n     * | `allsoundoff`         | 0x78        | 120     |\n     * | `resetallcontrollers` | 0x79        | 121     |\n     * | `localcontrol`        | 0x7A        | 122     |\n     * | `allnotesoff`         | 0x7B        | 123     |\n     * | `omnimodeoff`         | 0x7C        | 124     |\n     * | `omnimodeon`          | 0x7D        | 125     |\n     * | `monomodeon`          | 0x7E        | 126     |\n     * | `polymodeon`          | 0x7F        | 127     |\n     *\n     * @enum {Object.<string, number>}\n     * @readonly\n     * @since 3.1\n     * @static\n     */ static get CHANNEL_MODE_MESSAGES() {\n            return {\n                allsoundoff: 120,\n                resetallcontrollers: 121,\n                localcontrol: 122,\n                allnotesoff: 123,\n                omnimodeoff: 124,\n                omnimodeon: 125,\n                monomodeon: 126,\n                polymodeon: 127\n            };\n        }\n        /**\n     * @enum {Object.<string, number>}\n     * @deprecated since 3.1 (use Enumerations.CHANNEL_MODE_MESSAGES instead)\n     * @private\n     * @readonly\n     * @static\n     */ static get MIDI_CHANNEL_MODE_MESSAGES() {\n            if (this.validation) console.warn(\"The MIDI_CHANNEL_MODE_MESSAGES enum has been deprecated. Use the Enumerations.CHANNEL_MODE_MESSAGES enum instead.\");\n            return Enumerations.CHANNEL_MODE_MESSAGES;\n        }\n        /**\n     * @enum {Object.<string, number>}\n     * @readonly\n     * @static\n     * @private\n     * @deprecated since version 3.0.26 (use `CONTROL_CHANGE_MESSAGES` instead)\n     */ static get MIDI_CONTROL_CHANGE_MESSAGES() {\n            if (this.validation) console.warn(\"The MIDI_CONTROL_CHANGE_MESSAGES enum has been deprecated. Use the Enumerations.CONTROL_CHANGE_MESSAGES array instead.\");\n            return {\n                bankselectcoarse: 0,\n                modulationwheelcoarse: 1,\n                breathcontrollercoarse: 2,\n                controller3: 3,\n                footcontrollercoarse: 4,\n                portamentotimecoarse: 5,\n                dataentrycoarse: 6,\n                volumecoarse: 7,\n                balancecoarse: 8,\n                controller9: 9,\n                pancoarse: 10,\n                expressioncoarse: 11,\n                effectcontrol1coarse: 12,\n                effectcontrol2coarse: 13,\n                controller14: 14,\n                controller15: 15,\n                generalpurposeslider1: 16,\n                generalpurposeslider2: 17,\n                generalpurposeslider3: 18,\n                generalpurposeslider4: 19,\n                controller20: 20,\n                controller21: 21,\n                controller22: 22,\n                controller23: 23,\n                controller24: 24,\n                controller25: 25,\n                controller26: 26,\n                controller27: 27,\n                controller28: 28,\n                controller29: 29,\n                controller30: 30,\n                controller31: 31,\n                bankselectfine: 32,\n                modulationwheelfine: 33,\n                breathcontrollerfine: 34,\n                controller35: 35,\n                footcontrollerfine: 36,\n                portamentotimefine: 37,\n                dataentryfine: 38,\n                volumefine: 39,\n                balancefine: 40,\n                controller41: 41,\n                panfine: 42,\n                expressionfine: 43,\n                effectcontrol1fine: 44,\n                effectcontrol2fine: 45,\n                controller46: 46,\n                controller47: 47,\n                controller48: 48,\n                controller49: 49,\n                controller50: 50,\n                controller51: 51,\n                controller52: 52,\n                controller53: 53,\n                controller54: 54,\n                controller55: 55,\n                controller56: 56,\n                controller57: 57,\n                controller58: 58,\n                controller59: 59,\n                controller60: 60,\n                controller61: 61,\n                controller62: 62,\n                controller63: 63,\n                holdpedal: 64,\n                portamento: 65,\n                sustenutopedal: 66,\n                softpedal: 67,\n                legatopedal: 68,\n                hold2pedal: 69,\n                soundvariation: 70,\n                resonance: 71,\n                soundreleasetime: 72,\n                soundattacktime: 73,\n                brightness: 74,\n                soundcontrol6: 75,\n                soundcontrol7: 76,\n                soundcontrol8: 77,\n                soundcontrol9: 78,\n                soundcontrol10: 79,\n                generalpurposebutton1: 80,\n                generalpurposebutton2: 81,\n                generalpurposebutton3: 82,\n                generalpurposebutton4: 83,\n                controller84: 84,\n                controller85: 85,\n                controller86: 86,\n                controller87: 87,\n                controller88: 88,\n                controller89: 89,\n                controller90: 90,\n                reverblevel: 91,\n                tremololevel: 92,\n                choruslevel: 93,\n                celestelevel: 94,\n                phaserlevel: 95,\n                databuttonincrement: 96,\n                databuttondecrement: 97,\n                nonregisteredparametercoarse: 98,\n                nonregisteredparameterfine: 99,\n                registeredparametercoarse: 100,\n                registeredparameterfine: 101,\n                controller102: 102,\n                controller103: 103,\n                controller104: 104,\n                controller105: 105,\n                controller106: 106,\n                controller107: 107,\n                controller108: 108,\n                controller109: 109,\n                controller110: 110,\n                controller111: 111,\n                controller112: 112,\n                controller113: 113,\n                controller114: 114,\n                controller115: 115,\n                controller116: 116,\n                controller117: 117,\n                controller118: 118,\n                controller119: 119,\n                allsoundoff: 120,\n                resetallcontrollers: 121,\n                localcontrol: 122,\n                allnotesoff: 123,\n                omnimodeoff: 124,\n                omnimodeon: 125,\n                monomodeon: 126,\n                polymodeon: 127\n            };\n        }\n        /**\n     * An array of objects, ordered by control number, describing control change messages. Each object\n     * in the array has 3 properties with some objects having a fourth one (`position`) :\n     *\n     *  * `number`: MIDI control number (0-127);\n     *  * `name`: name of emitted event (eg: `bankselectcoarse`, `choruslevel`, etc) that can be\n     *  listened to;\n     *  * `description`: user-friendly description of the controller's purpose;\n     *  * `position` (optional): whether this controller's value should be considered an `msb` or\n     *  `lsb`\n     *\n     * Not all controllers have a predefined function. For those that don't, `name` is the word\n     * \"controller\" followed by the number (e.g. `controller112`).\n     *\n     * | Event name                     | Control Number |\n     * |--------------------------------|----------------|\n     * | `bankselectcoarse`             | 0              |\n     * | `modulationwheelcoarse`        | 1              |\n     * | `breathcontrollercoarse`       | 2              |\n     * | `controller3`                  | 3              |\n     * | `footcontrollercoarse`         | 4              |\n     * | `portamentotimecoarse`         | 5              |\n     * | `dataentrycoarse`              | 6              |\n     * | `volumecoarse`                 | 7              |\n     * | `balancecoarse`                | 8              |\n     * | `controller9`                  | 9              |\n     * | `pancoarse`                    | 10             |\n     * | `expressioncoarse`             | 11             |\n     * | `effectcontrol1coarse`         | 12             |\n     * | `effectcontrol2coarse`         | 13             |\n     * | `controller14`                 | 14             |\n     * | `controller15`                 | 15             |\n     * | `generalpurposecontroller1`    | 16             |\n     * | `generalpurposecontroller2`    | 17             |\n     * | `generalpurposecontroller3`    | 18             |\n     * | `generalpurposecontroller4`    | 19             |\n     * | `controller20`                 | 20             |\n     * | `controller21`                 | 21             |\n     * | `controller22`                 | 22             |\n     * | `controller23`                 | 23             |\n     * | `controller24`                 | 24             |\n     * | `controller25`                 | 25             |\n     * | `controller26`                 | 26             |\n     * | `controller27`                 | 27             |\n     * | `controller28`                 | 28             |\n     * | `controller29`                 | 29             |\n     * | `controller30`                 | 30             |\n     * | `controller31`                 | 31             |\n     * | `bankselectfine`               | 32             |\n     * | `modulationwheelfine`          | 33             |\n     * | `breathcontrollerfine`         | 34             |\n     * | `controller35`                 | 35             |\n     * | `footcontrollerfine`           | 36             |\n     * | `portamentotimefine`           | 37             |\n     * | `dataentryfine`                | 38             |\n     * | `channelvolumefine`            | 39             |\n     * | `balancefine`                  | 40             |\n     * | `controller41`                 | 41             |\n     * | `panfine`                      | 42             |\n     * | `expressionfine`               | 43             |\n     * | `effectcontrol1fine`           | 44             |\n     * | `effectcontrol2fine`           | 45             |\n     * | `controller46`                 | 46             |\n     * | `controller47`                 | 47             |\n     * | `controller48`                 | 48             |\n     * | `controller49`                 | 49             |\n     * | `controller50`                 | 50             |\n     * | `controller51`                 | 51             |\n     * | `controller52`                 | 52             |\n     * | `controller53`                 | 53             |\n     * | `controller54`                 | 54             |\n     * | `controller55`                 | 55             |\n     * | `controller56`                 | 56             |\n     * | `controller57`                 | 57             |\n     * | `controller58`                 | 58             |\n     * | `controller59`                 | 59             |\n     * | `controller60`                 | 60             |\n     * | `controller61`                 | 61             |\n     * | `controller62`                 | 62             |\n     * | `controller63`                 | 63             |\n     * | `damperpedal`                  | 64             |\n     * | `portamento`                   | 65             |\n     * | `sostenuto`                    | 66             |\n     * | `softpedal`                    | 67             |\n     * | `legatopedal`                  | 68             |\n     * | `hold2`                        | 69             |\n     * | `soundvariation`               | 70             |\n     * | `resonance`                    | 71             |\n     * | `releasetime`                  | 72             |\n     * | `attacktime`                   | 73             |\n     * | `brightness`                   | 74             |\n     * | `decaytime`                    | 75             |\n     * | `vibratorate`                  | 76             |\n     * | `vibratodepth`                 | 77             |\n     * | `vibratodelay`                 | 78             |\n     * | `controller79`                 | 79             |\n     * | `generalpurposecontroller5`    | 80             |\n     * | `generalpurposecontroller6`    | 81             |\n     * | `generalpurposecontroller7`    | 82             |\n     * | `generalpurposecontroller8`    | 83             |\n     * | `portamentocontrol`            | 84             |\n     * | `controller85`                 | 85             |\n     * | `controller86`                 | 86             |\n     * | `controller87`                 | 87             |\n     * | `highresolutionvelocityprefix` | 88             |\n     * | `controller89`                 | 89             |\n     * | `controller90`                 | 90             |\n     * | `effect1depth`                 | 91             |\n     * | `effect2depth`                 | 92             |\n     * | `effect3depth`                 | 93             |\n     * | `effect4depth`                 | 94             |\n     * | `effect5depth`                 | 95             |\n     * | `dataincrement`                | 96             |\n     * | `datadecrement`                | 97             |\n     * | `nonregisteredparameterfine`   | 98             |\n     * | `nonregisteredparametercoarse` | 99             |\n     * | `nonregisteredparameterfine`   | 100            |\n     * | `registeredparametercoarse`    | 101            |\n     * | `controller102`                | 102            |\n     * | `controller103`                | 103            |\n     * | `controller104`                | 104            |\n     * | `controller105`                | 105            |\n     * | `controller106`                | 106            |\n     * | `controller107`                | 107            |\n     * | `controller108`                | 108            |\n     * | `controller109`                | 109            |\n     * | `controller110`                | 110            |\n     * | `controller111`                | 111            |\n     * | `controller112`                | 112            |\n     * | `controller113`                | 113            |\n     * | `controller114`                | 114            |\n     * | `controller115`                | 115            |\n     * | `controller116`                | 116            |\n     * | `controller117`                | 117            |\n     * | `controller118`                | 118            |\n     * | `controller119`                | 119            |\n     * | `allsoundoff`                  | 120            |\n     * | `resetallcontrollers`          | 121            |\n     * | `localcontrol`                 | 122            |\n     * | `allnotesoff`                  | 123            |\n     * | `omnimodeoff`                  | 124            |\n     * | `omnimodeon`                   | 125            |\n     * | `monomodeon`                   | 126            |\n     * | `polymodeon`                   | 127            |\n     *\n     * @type {object[]}\n     * @readonly\n     * @static\n     * @since 3.1\n     */ static get CONTROL_CHANGE_MESSAGES() {\n            return [\n                {\n                    number: 0,\n                    name: \"bankselectcoarse\",\n                    description: \"Bank Select (Coarse)\",\n                    position: \"msb\"\n                },\n                {\n                    number: 1,\n                    name: \"modulationwheelcoarse\",\n                    description: \"Modulation Wheel (Coarse)\",\n                    position: \"msb\"\n                },\n                {\n                    number: 2,\n                    name: \"breathcontrollercoarse\",\n                    description: \"Breath Controller (Coarse)\",\n                    position: \"msb\"\n                },\n                {\n                    number: 3,\n                    name: \"controller3\",\n                    description: \"Undefined\",\n                    position: \"msb\"\n                },\n                {\n                    number: 4,\n                    name: \"footcontrollercoarse\",\n                    description: \"Foot Controller (Coarse)\",\n                    position: \"msb\"\n                },\n                {\n                    number: 5,\n                    name: \"portamentotimecoarse\",\n                    description: \"Portamento Time (Coarse)\",\n                    position: \"msb\"\n                },\n                {\n                    number: 6,\n                    name: \"dataentrycoarse\",\n                    description: \"Data Entry (Coarse)\",\n                    position: \"msb\"\n                },\n                {\n                    number: 7,\n                    name: \"volumecoarse\",\n                    description: \"Channel Volume (Coarse)\",\n                    position: \"msb\"\n                },\n                {\n                    number: 8,\n                    name: \"balancecoarse\",\n                    description: \"Balance (Coarse)\",\n                    position: \"msb\"\n                },\n                {\n                    number: 9,\n                    name: \"controller9\",\n                    description: \"Controller 9 (Coarse)\",\n                    position: \"msb\"\n                },\n                {\n                    number: 10,\n                    name: \"pancoarse\",\n                    description: \"Pan (Coarse)\",\n                    position: \"msb\"\n                },\n                {\n                    number: 11,\n                    name: \"expressioncoarse\",\n                    description: \"Expression Controller (Coarse)\",\n                    position: \"msb\"\n                },\n                {\n                    number: 12,\n                    name: \"effectcontrol1coarse\",\n                    description: \"Effect Control 1 (Coarse)\",\n                    position: \"msb\"\n                },\n                {\n                    number: 13,\n                    name: \"effectcontrol2coarse\",\n                    description: \"Effect Control 2 (Coarse)\",\n                    position: \"msb\"\n                },\n                {\n                    number: 14,\n                    name: \"controller14\",\n                    description: \"Undefined\",\n                    position: \"msb\"\n                },\n                {\n                    number: 15,\n                    name: \"controller15\",\n                    description: \"Undefined\",\n                    position: \"msb\"\n                },\n                {\n                    number: 16,\n                    name: \"generalpurposecontroller1\",\n                    description: \"General Purpose Controller 1 (Coarse)\",\n                    position: \"msb\"\n                },\n                {\n                    number: 17,\n                    name: \"generalpurposecontroller2\",\n                    description: \"General Purpose Controller 2 (Coarse)\",\n                    position: \"msb\"\n                },\n                {\n                    number: 18,\n                    name: \"generalpurposecontroller3\",\n                    description: \"General Purpose Controller 3 (Coarse)\",\n                    position: \"msb\"\n                },\n                {\n                    number: 19,\n                    name: \"generalpurposecontroller4\",\n                    description: \"General Purpose Controller 4 (Coarse)\",\n                    position: \"msb\"\n                },\n                {\n                    number: 20,\n                    name: \"controller20\",\n                    description: \"Undefined\",\n                    position: \"msb\"\n                },\n                {\n                    number: 21,\n                    name: \"controller21\",\n                    description: \"Undefined\",\n                    position: \"msb\"\n                },\n                {\n                    number: 22,\n                    name: \"controller22\",\n                    description: \"Undefined\",\n                    position: \"msb\"\n                },\n                {\n                    number: 23,\n                    name: \"controller23\",\n                    description: \"Undefined\",\n                    position: \"msb\"\n                },\n                {\n                    number: 24,\n                    name: \"controller24\",\n                    description: \"Undefined\",\n                    position: \"msb\"\n                },\n                {\n                    number: 25,\n                    name: \"controller25\",\n                    description: \"Undefined\",\n                    position: \"msb\"\n                },\n                {\n                    number: 26,\n                    name: \"controller26\",\n                    description: \"Undefined\",\n                    position: \"msb\"\n                },\n                {\n                    number: 27,\n                    name: \"controller27\",\n                    description: \"Undefined\",\n                    position: \"msb\"\n                },\n                {\n                    number: 28,\n                    name: \"controller28\",\n                    description: \"Undefined\",\n                    position: \"msb\"\n                },\n                {\n                    number: 29,\n                    name: \"controller29\",\n                    description: \"Undefined\",\n                    position: \"msb\"\n                },\n                {\n                    number: 30,\n                    name: \"controller30\",\n                    description: \"Undefined\",\n                    position: \"msb\"\n                },\n                {\n                    number: 31,\n                    name: \"controller31\",\n                    description: \"Undefined\",\n                    position: \"msb\"\n                },\n                {\n                    number: 32,\n                    name: \"bankselectfine\",\n                    description: \"Bank Select (Fine)\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 33,\n                    name: \"modulationwheelfine\",\n                    description: \"Modulation Wheel (Fine)\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 34,\n                    name: \"breathcontrollerfine\",\n                    description: \"Breath Controller (Fine)\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 35,\n                    name: \"controller35\",\n                    description: \"Undefined\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 36,\n                    name: \"footcontrollerfine\",\n                    description: \"Foot Controller (Fine)\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 37,\n                    name: \"portamentotimefine\",\n                    description: \"Portamento Time (Fine)\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 38,\n                    name: \"dataentryfine\",\n                    description: \"Data Entry (Fine)\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 39,\n                    name: \"channelvolumefine\",\n                    description: \"Channel Volume (Fine)\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 40,\n                    name: \"balancefine\",\n                    description: \"Balance (Fine)\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 41,\n                    name: \"controller41\",\n                    description: \"Undefined\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 42,\n                    name: \"panfine\",\n                    description: \"Pan (Fine)\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 43,\n                    name: \"expressionfine\",\n                    description: \"Expression Controller (Fine)\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 44,\n                    name: \"effectcontrol1fine\",\n                    description: \"Effect control 1 (Fine)\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 45,\n                    name: \"effectcontrol2fine\",\n                    description: \"Effect control 2 (Fine)\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 46,\n                    name: \"controller46\",\n                    description: \"Undefined\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 47,\n                    name: \"controller47\",\n                    description: \"Undefined\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 48,\n                    name: \"controller48\",\n                    description: \"General Purpose Controller 1 (Fine)\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 49,\n                    name: \"controller49\",\n                    description: \"General Purpose Controller 2 (Fine)\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 50,\n                    name: \"controller50\",\n                    description: \"General Purpose Controller 3 (Fine)\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 51,\n                    name: \"controller51\",\n                    description: \"General Purpose Controller 4 (Fine)\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 52,\n                    name: \"controller52\",\n                    description: \"Undefined\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 53,\n                    name: \"controller53\",\n                    description: \"Undefined\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 54,\n                    name: \"controller54\",\n                    description: \"Undefined\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 55,\n                    name: \"controller55\",\n                    description: \"Undefined\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 56,\n                    name: \"controller56\",\n                    description: \"Undefined\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 57,\n                    name: \"controller57\",\n                    description: \"Undefined\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 58,\n                    name: \"controller58\",\n                    description: \"Undefined\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 59,\n                    name: \"controller59\",\n                    description: \"Undefined\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 60,\n                    name: \"controller60\",\n                    description: \"Undefined\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 61,\n                    name: \"controller61\",\n                    description: \"Undefined\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 62,\n                    name: \"controller62\",\n                    description: \"Undefined\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 63,\n                    name: \"controller63\",\n                    description: \"Undefined\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 64,\n                    name: \"damperpedal\",\n                    description: \"Damper Pedal On/Off\"\n                },\n                {\n                    number: 65,\n                    name: \"portamento\",\n                    description: \"Portamento On/Off\"\n                },\n                {\n                    number: 66,\n                    name: \"sostenuto\",\n                    description: \"Sostenuto On/Off\"\n                },\n                {\n                    number: 67,\n                    name: \"softpedal\",\n                    description: \"Soft Pedal On/Off\"\n                },\n                {\n                    number: 68,\n                    name: \"legatopedal\",\n                    description: \"Legato Pedal On/Off\"\n                },\n                {\n                    number: 69,\n                    name: \"hold2\",\n                    description: \"Hold 2 On/Off\"\n                },\n                {\n                    number: 70,\n                    name: \"soundvariation\",\n                    description: \"Sound Variation\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 71,\n                    name: \"resonance\",\n                    description: \"Resonance\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 72,\n                    name: \"releasetime\",\n                    description: \"Release Time\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 73,\n                    name: \"attacktime\",\n                    description: \"Attack Time\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 74,\n                    name: \"brightness\",\n                    description: \"Brightness\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 75,\n                    name: \"decaytime\",\n                    description: \"Decay Time\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 76,\n                    name: \"vibratorate\",\n                    description: \"Vibrato Rate\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 77,\n                    name: \"vibratodepth\",\n                    description: \"Vibrato Depth\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 78,\n                    name: \"vibratodelay\",\n                    description: \"Vibrato Delay\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 79,\n                    name: \"controller79\",\n                    description: \"Undefined\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 80,\n                    name: \"generalpurposecontroller5\",\n                    description: \"General Purpose Controller 5\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 81,\n                    name: \"generalpurposecontroller6\",\n                    description: \"General Purpose Controller 6\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 82,\n                    name: \"generalpurposecontroller7\",\n                    description: \"General Purpose Controller 7\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 83,\n                    name: \"generalpurposecontroller8\",\n                    description: \"General Purpose Controller 8\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 84,\n                    name: \"portamentocontrol\",\n                    description: \"Portamento Control\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 85,\n                    name: \"controller85\",\n                    description: \"Undefined\"\n                },\n                {\n                    number: 86,\n                    name: \"controller86\",\n                    description: \"Undefined\"\n                },\n                {\n                    number: 87,\n                    name: \"controller87\",\n                    description: \"Undefined\"\n                },\n                {\n                    number: 88,\n                    name: \"highresolutionvelocityprefix\",\n                    description: \"High Resolution Velocity Prefix\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 89,\n                    name: \"controller89\",\n                    description: \"Undefined\"\n                },\n                {\n                    number: 90,\n                    name: \"controller90\",\n                    description: \"Undefined\"\n                },\n                {\n                    number: 91,\n                    name: \"effect1depth\",\n                    description: \"Effects 1 Depth (Reverb Send Level)\"\n                },\n                {\n                    number: 92,\n                    name: \"effect2depth\",\n                    description: \"Effects 2 Depth\"\n                },\n                {\n                    number: 93,\n                    name: \"effect3depth\",\n                    description: \"Effects 3 Depth (Chorus Send Level)\"\n                },\n                {\n                    number: 94,\n                    name: \"effect4depth\",\n                    description: \"Effects 4 Depth\"\n                },\n                {\n                    number: 95,\n                    name: \"effect5depth\",\n                    description: \"Effects 5 Depth\"\n                },\n                {\n                    number: 96,\n                    name: \"dataincrement\",\n                    description: \"Data Increment\"\n                },\n                {\n                    number: 97,\n                    name: \"datadecrement\",\n                    description: \"Data Decrement\"\n                },\n                {\n                    number: 98,\n                    name: \"nonregisteredparameterfine\",\n                    description: \"Non-Registered Parameter Number (Fine)\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 99,\n                    name: \"nonregisteredparametercoarse\",\n                    description: \"Non-Registered Parameter Number (Coarse)\",\n                    position: \"msb\"\n                },\n                {\n                    number: 100,\n                    name: \"registeredparameterfine\",\n                    description: \"Registered Parameter Number (Fine)\",\n                    position: \"lsb\"\n                },\n                {\n                    number: 101,\n                    name: \"registeredparametercoarse\",\n                    description: \"Registered Parameter Number (Coarse)\",\n                    position: \"msb\"\n                },\n                {\n                    number: 102,\n                    name: \"controller102\",\n                    description: \"Undefined\"\n                },\n                {\n                    number: 103,\n                    name: \"controller103\",\n                    description: \"Undefined\"\n                },\n                {\n                    number: 104,\n                    name: \"controller104\",\n                    description: \"Undefined\"\n                },\n                {\n                    number: 105,\n                    name: \"controller105\",\n                    description: \"Undefined\"\n                },\n                {\n                    number: 106,\n                    name: \"controller106\",\n                    description: \"Undefined\"\n                },\n                {\n                    number: 107,\n                    name: \"controller107\",\n                    description: \"Undefined\"\n                },\n                {\n                    number: 108,\n                    name: \"controller108\",\n                    description: \"Undefined\"\n                },\n                {\n                    number: 109,\n                    name: \"controller109\",\n                    description: \"Undefined\"\n                },\n                {\n                    number: 110,\n                    name: \"controller110\",\n                    description: \"Undefined\"\n                },\n                {\n                    number: 111,\n                    name: \"controller111\",\n                    description: \"Undefined\"\n                },\n                {\n                    number: 112,\n                    name: \"controller112\",\n                    description: \"Undefined\"\n                },\n                {\n                    number: 113,\n                    name: \"controller113\",\n                    description: \"Undefined\"\n                },\n                {\n                    number: 114,\n                    name: \"controller114\",\n                    description: \"Undefined\"\n                },\n                {\n                    number: 115,\n                    name: \"controller115\",\n                    description: \"Undefined\"\n                },\n                {\n                    number: 116,\n                    name: \"controller116\",\n                    description: \"Undefined\"\n                },\n                {\n                    number: 117,\n                    name: \"controller117\",\n                    description: \"Undefined\"\n                },\n                {\n                    number: 118,\n                    name: \"controller118\",\n                    description: \"Undefined\"\n                },\n                {\n                    number: 119,\n                    name: \"controller119\",\n                    description: \"Undefined\"\n                },\n                {\n                    number: 120,\n                    name: \"allsoundoff\",\n                    description: \"All Sound Off\"\n                },\n                {\n                    number: 121,\n                    name: \"resetallcontrollers\",\n                    description: \"Reset All Controllers\"\n                },\n                {\n                    number: 122,\n                    name: \"localcontrol\",\n                    description: \"Local Control On/Off\"\n                },\n                {\n                    number: 123,\n                    name: \"allnotesoff\",\n                    description: \"All Notes Off\"\n                },\n                {\n                    number: 124,\n                    name: \"omnimodeoff\",\n                    description: \"Omni Mode Off\"\n                },\n                {\n                    number: 125,\n                    name: \"omnimodeon\",\n                    description: \"Omni Mode On\"\n                },\n                {\n                    number: 126,\n                    name: \"monomodeon\",\n                    description: \"Mono Mode On\"\n                },\n                {\n                    number: 127,\n                    name: \"polymodeon\",\n                    description: \"Poly Mode On\"\n                }\n            ];\n        }\n        /**\n     * Enumeration of all MIDI registered parameters and their associated pair of numerical values.\n     * MIDI registered parameters extend the original list of control change messages. Currently,\n     * there are only a limited number of them:\n     *\n     *\n     * | Control Function             | [LSB, MSB]   |\n     * |------------------------------|--------------|\n     * | `pitchbendrange`             | [0x00, 0x00] |\n     * | `channelfinetuning`          | [0x00, 0x01] |\n     * | `channelcoarsetuning`        | [0x00, 0x02] |\n     * | `tuningprogram`              | [0x00, 0x03] |\n     * | `tuningbank`                 | [0x00, 0x04] |\n     * | `modulationrange`            | [0x00, 0x05] |\n     * | `azimuthangle`               | [0x3D, 0x00] |\n     * | `elevationangle`             | [0x3D, 0x01] |\n     * | `gain`                       | [0x3D, 0x02] |\n     * | `distanceratio`              | [0x3D, 0x03] |\n     * | `maximumdistance`            | [0x3D, 0x04] |\n     * | `maximumdistancegain`        | [0x3D, 0x05] |\n     * | `referencedistanceratio`     | [0x3D, 0x06] |\n     * | `panspreadangle`             | [0x3D, 0x07] |\n     * | `rollangle`                  | [0x3D, 0x08] |\n     *\n     * @enum {Object.<string, number[]>}\n     * @readonly\n     * @since 3.1\n     * @static\n     */ static get REGISTERED_PARAMETERS() {\n            return {\n                pitchbendrange: [\n                    0x00,\n                    0x00\n                ],\n                channelfinetuning: [\n                    0x00,\n                    0x01\n                ],\n                channelcoarsetuning: [\n                    0x00,\n                    0x02\n                ],\n                tuningprogram: [\n                    0x00,\n                    0x03\n                ],\n                tuningbank: [\n                    0x00,\n                    0x04\n                ],\n                modulationrange: [\n                    0x00,\n                    0x05\n                ],\n                azimuthangle: [\n                    0x3D,\n                    0x00\n                ],\n                elevationangle: [\n                    0x3D,\n                    0x01\n                ],\n                gain: [\n                    0x3D,\n                    0x02\n                ],\n                distanceratio: [\n                    0x3D,\n                    0x03\n                ],\n                maximumdistance: [\n                    0x3D,\n                    0x04\n                ],\n                maximumdistancegain: [\n                    0x3D,\n                    0x05\n                ],\n                referencedistanceratio: [\n                    0x3D,\n                    0x06\n                ],\n                panspreadangle: [\n                    0x3D,\n                    0x07\n                ],\n                rollangle: [\n                    0x3D,\n                    0x08\n                ]\n            };\n        }\n        /**\n     * @enum {Object.<string, number[]>}\n     * @readonly\n     * @deprecated since 3.1 (use Enumerations.REGISTERED_PARAMETERS instead)\n     * @private\n     * @static\n     */ static get MIDI_REGISTERED_PARAMETERS() {\n            if (this.validation) console.warn(\"The MIDI_REGISTERED_PARAMETERS enum has been deprecated. Use the Enumerations.REGISTERED_PARAMETERS enum instead.\");\n            return Enumerations.MIDI_REGISTERED_PARAMETERS;\n        }\n        /**\n     * Enumeration of all valid MIDI system messages and matching numerical values. This library also\n     * uses two additional custom messages.\n     *\n     * **System Common Messages**\n     *\n     * | Function               | Hexadecimal | Decimal |\n     * |------------------------|-------------|---------|\n     * | `sysex`                | 0xF0        |  240    |\n     * | `timecode`             | 0xF1        |  241    |\n     * | `songposition`         | 0xF2        |  242    |\n     * | `songselect`           | 0xF3        |  243    |\n     * | `tunerequest`          | 0xF6        |  246    |\n     * | `sysexend`             | 0xF7        |  247    |\n     *\n     * The `sysexend` message is never actually received. It simply ends a sysex stream.\n     *\n     * **System Real-Time Messages**\n     *\n     * | Function               | Hexadecimal | Decimal |\n     * |------------------------|-------------|---------|\n     * | `clock`                | 0xF8        |  248    |\n     * | `start`                | 0xFA        |  250    |\n     * | `continue`             | 0xFB        |  251    |\n     * | `stop`                 | 0xFC        |  252    |\n     * | `activesensing`        | 0xFE        |  254    |\n     * | `reset`                | 0xFF        |  255    |\n     *\n     * Values 249 and 253 are relayed by the\n     * [Web MIDI API](https://developer.mozilla.org/en-US/docs/Web/API/Web_MIDI_API) but they do not\n     * serve any specific purpose. The\n     * [MIDI 1.0 spec](https://www.midi.org/specifications/item/table-1-summary-of-midi-message)\n     * simply states that they are undefined/reserved.\n     *\n     * **Custom Messages**\n     *\n     * These two messages are mostly for internal use. They are not MIDI messages and cannot be sent\n     * or forwarded.\n     *\n     * | Function               | Hexadecimal | Decimal |\n     * |------------------------|-------------|---------|\n     * | `midimessage`          |             |  0      |\n     * | `unknownsystemmessage` |             |  -1     |\n     *\n     * @enum {Object.<string, number>}\n     * @readonly\n     * @since 3.1\n     * @static\n     */ static get SYSTEM_MESSAGES() {\n            return {\n                // System common messages\n                sysex: 0xF0,\n                // 240\n                timecode: 0xF1,\n                // 241\n                songposition: 0xF2,\n                // 242\n                songselect: 0xF3,\n                // 243\n                tunerequest: 0xF6,\n                // 246\n                tuningrequest: 0xF6,\n                // for backwards-compatibility (deprecated in version 3.0)\n                sysexend: 0xF7,\n                // 247 (never actually received - simply ends a sysex)\n                // System real-time messages\n                clock: 0xF8,\n                // 248\n                start: 0xFA,\n                // 250\n                continue: 0xFB,\n                // 251\n                stop: 0xFC,\n                // 252\n                activesensing: 0xFE,\n                // 254\n                reset: 0xFF,\n                // 255\n                // Custom WebMidi.js messages\n                midimessage: 0,\n                unknownsystemmessage: -1\n            };\n        }\n        /**\n     * @enum {Object.<string, number>}\n     * @readonly\n     * @deprecated since 3.1 (use Enumerations.SYSTEM_MESSAGES instead)\n     * @private\n     * @static\n     */ static get MIDI_SYSTEM_MESSAGES() {\n            if (this.validation) console.warn(\"The MIDI_SYSTEM_MESSAGES enum has been deprecated. Use the Enumerations.SYSTEM_MESSAGES enum instead.\");\n            return Enumerations.SYSTEM_MESSAGES;\n        }\n        /**\n     * Array of channel-specific event names that can be listened for. This includes channel mode\n     * events and RPN/NRPN events.\n     *\n     * @type {string[]}\n     * @readonly\n     */ static get CHANNEL_EVENTS() {\n            return [\n                \"noteoff\",\n                \"controlchange\",\n                \"noteon\",\n                \"keyaftertouch\",\n                \"programchange\",\n                \"channelaftertouch\",\n                \"pitchbend\",\n                \"allnotesoff\",\n                \"allsoundoff\",\n                \"localcontrol\",\n                \"monomode\",\n                \"omnimode\",\n                \"resetallcontrollers\",\n                \"nrpn\",\n                \"nrpn-dataentrycoarse\",\n                \"nrpn-dataentryfine\",\n                \"nrpn-dataincrement\",\n                \"nrpn-datadecrement\",\n                \"rpn\",\n                \"rpn-dataentrycoarse\",\n                \"rpn-dataentryfine\",\n                \"rpn-dataincrement\",\n                \"rpn-datadecrement\",\n                \"nrpn-databuttonincrement\",\n                \"nrpn-databuttondecrement\",\n                \"rpn-databuttonincrement\",\n                \"rpn-databuttondecrement\"\n            ];\n        }\n    }\n    /**\n   * The `Note` class represents a single musical note such as `\"D3\"`, `\"G#4\"`, `\"F-1\"`, `\"Gb7\"`, etc.\n   *\n   * `Note` objects can be played back on a single channel by calling\n   * [`OutputChannel.playNote()`]{@link OutputChannel#playNote} or, on multiple channels of the same\n   * output, by calling [`Output.playNote()`]{@link Output#playNote}.\n   *\n   * The note has [`attack`](#attack) and [`release`](#release) velocities set at `0.5` by default.\n   * These can be changed by passing in the appropriate option. It is also possible to set a\n   * system-wide default for attack and release velocities by using the\n   * [`WebMidi.defaults`](WebMidi#defaults) property.\n   *\n   * If you prefer to work with raw MIDI values (`0` to `127`), you can use [`rawAttack`](#rawAttack) and\n   * [`rawRelease`](#rawRelease) to both get and set the values.\n   *\n   * The note may have a [`duration`](#duration). If it does, playback will be automatically stopped\n   * when the duration has elapsed by sending a `\"noteoff\"` event. By default, the duration is set to\n   * `Infinity`. In this case, it will never stop playing unless explicitly stopped by calling a\n   * method such as [`OutputChannel.stopNote()`]{@link OutputChannel#stopNote},\n   * [`Output.stopNote()`]{@link Output#stopNote} or similar.\n   *\n   * @license Apache-2.0\n   * @since 3.0.0\n   */ class Note {\n        /**\n     * Creates a `Note` object.\n     *\n     * @param value {string|number} The value used to create the note. If an identifier string is used,\n     * it must start with the note letter, optionally followed by an accidental and followed by the\n     * octave number (`\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`, etc.). If a number is used, it must be an\n     * integer between 0 and 127. In this case, middle C is considered to be C4 (note number 60).\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number} [options.duration=Infinity] The number of milliseconds before the note should be\n     * explicitly stopped.\n     *\n     * @param {number} [options.attack=0.5] The note's attack velocity as a float between 0 and 1. If\n     * you wish to use an integer between 0 and 127, use the `rawAttack` option instead. If both\n     * `attack` and `rawAttack` are specified, the latter has precedence.\n     *\n     * @param {number} [options.release=0.5] The note's release velocity as a float between 0 and 1. If\n     * you wish to use an integer between 0 and 127, use the `rawRelease` option instead. If both\n     * `release` and `rawRelease` are specified, the latter has precedence.\n     *\n     * @param {number} [options.rawAttack=64] The note's attack velocity as an integer between 0 and\n     * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n     * `attack` and `rawAttack` are specified, the latter has precedence.\n     *\n     * @param {number} [options.rawRelease=64] The note's release velocity as an integer between 0 and\n     * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n     * `release` and `rawRelease` are specified, the latter has precedence.\n     *\n     * @throws {Error} Invalid note identifier\n     * @throws {RangeError} Invalid name value\n     * @throws {RangeError} Invalid accidental value\n     * @throws {RangeError} Invalid octave value\n     * @throws {RangeError} Invalid duration value\n     * @throws {RangeError} Invalid attack value\n     * @throws {RangeError} Invalid release value\n     */ constructor(value, options = {}){\n            // Assign property defaults\n            this.duration = wm.defaults.note.duration;\n            this.attack = wm.defaults.note.attack;\n            this.release = wm.defaults.note.release; // Assign property values from options (validation occurs in setter)\n            if (options.duration != undefined) this.duration = options.duration;\n            if (options.attack != undefined) this.attack = options.attack;\n            if (options.rawAttack != undefined) this.attack = Utilities.from7bitToFloat(options.rawAttack);\n            if (options.release != undefined) this.release = options.release;\n            if (options.rawRelease != undefined) this.release = Utilities.from7bitToFloat(options.rawRelease);\n             // Assign note depending on the way it was specified (name or number)\n            if (Number.isInteger(value)) this.identifier = Utilities.toNoteIdentifier(value);\n            else this.identifier = value;\n        }\n        /**\n     * The name, optional accidental and octave of the note, as a string.\n     * @type {string}\n     * @since 3.0.0\n     */ get identifier() {\n            return this._name + (this._accidental || \"\") + this._octave;\n        }\n        set identifier(value) {\n            const fragments = Utilities.getNoteDetails(value);\n            if (wm.validation) {\n                if (!value) throw new Error(\"Invalid note identifier\");\n            }\n            this._name = fragments.name;\n            this._accidental = fragments.accidental;\n            this._octave = fragments.octave;\n        }\n        /**\n     * The name (letter) of the note. If you need the full name with octave and accidental, you can\n     * use the [`identifier`]{@link Note#identifier} property instead.\n     * @type {string}\n     * @since 3.0.0\n     */ get name() {\n            return this._name;\n        }\n        set name(value) {\n            if (wm.validation) {\n                value = value.toUpperCase();\n                if (![\n                    \"C\",\n                    \"D\",\n                    \"E\",\n                    \"F\",\n                    \"G\",\n                    \"A\",\n                    \"B\"\n                ].includes(value)) throw new Error(\"Invalid name value\");\n            }\n            this._name = value;\n        }\n        /**\n     * The accidental (#, ##, b or bb) of the note.\n     * @type {string}\n     * @since 3.0.0\n     */ get accidental() {\n            return this._accidental;\n        }\n        set accidental(value) {\n            if (wm.validation) {\n                value = value.toLowerCase();\n                if (![\n                    \"#\",\n                    \"##\",\n                    \"b\",\n                    \"bb\"\n                ].includes(value)) throw new Error(\"Invalid accidental value\");\n            }\n            this._accidental = value;\n        }\n        /**\n     * The octave of the note.\n     * @type {number}\n     * @since 3.0.0\n     */ get octave() {\n            return this._octave;\n        }\n        set octave(value) {\n            if (wm.validation) {\n                value = parseInt(value);\n                if (isNaN(value)) throw new Error(\"Invalid octave value\");\n            }\n            this._octave = value;\n        }\n        /**\n     * The duration of the note as a positive decimal number representing the number of milliseconds\n     * that the note should play for.\n     *\n     * @type {number}\n     * @since 3.0.0\n     */ get duration() {\n            return this._duration;\n        }\n        set duration(value) {\n            if (wm.validation) {\n                value = parseFloat(value);\n                if (isNaN(value) || value === null || value < 0) throw new RangeError(\"Invalid duration value.\");\n            }\n            this._duration = value;\n        }\n        /**\n     * The attack velocity of the note as an integer between 0 and 1.\n     * @type {number}\n     * @since 3.0.0\n     */ get attack() {\n            return this._attack;\n        }\n        set attack(value) {\n            if (wm.validation) {\n                value = parseFloat(value);\n                if (isNaN(value) || !(value >= 0 && value <= 1)) throw new RangeError(\"Invalid attack value.\");\n            }\n            this._attack = value;\n        }\n        /**\n     * The release velocity of the note as an integer between 0 and 1.\n     * @type {number}\n     * @since 3.0.0\n     */ get release() {\n            return this._release;\n        }\n        set release(value) {\n            if (wm.validation) {\n                value = parseFloat(value);\n                if (isNaN(value) || !(value >= 0 && value <= 1)) throw new RangeError(\"Invalid release value.\");\n            }\n            this._release = value;\n        }\n        /**\n     * The attack velocity of the note as a positive integer between 0 and 127.\n     * @type {number}\n     * @since 3.0.0\n     */ get rawAttack() {\n            return Utilities.fromFloatTo7Bit(this._attack);\n        }\n        set rawAttack(value) {\n            this._attack = Utilities.from7bitToFloat(value);\n        }\n        /**\n     * The release velocity of the note as a positive integer between 0 and 127.\n     * @type {number}\n     * @since 3.0.0\n     */ get rawRelease() {\n            return Utilities.fromFloatTo7Bit(this._release);\n        }\n        set rawRelease(value) {\n            this._release = Utilities.from7bitToFloat(value);\n        }\n        /**\n     * The MIDI number of the note (`0` - `127`). This number is derived from the note identifier\n     * using C4 as a reference for middle C.\n     *\n     * @type {number}\n     * @readonly\n     * @since 3.0.0\n     */ get number() {\n            return Utilities.toNoteNumber(this.identifier);\n        }\n        /**\n     * Returns a MIDI note number offset by octave and/or semitone. If the calculated value is less\n     * than 0, 0 will be returned. If the calculated value is more than 127, 127 will be returned. If\n     * an invalid value is supplied, 0 will be used.\n     *\n     * @param [octaveOffset] {number} An integer to offset the note number by octave.\n     * @param [semitoneOffset] {number} An integer to offset the note number by semitone.\n     * @returns {number} An integer between 0 and 127\n     */ getOffsetNumber(octaveOffset = 0, semitoneOffset = 0) {\n            if (wm.validation) {\n                octaveOffset = parseInt(octaveOffset) || 0;\n                semitoneOffset = parseInt(semitoneOffset) || 0;\n            }\n            return Math.min(Math.max(this.number + octaveOffset * 12 + semitoneOffset, 0), 127);\n        }\n    }\n    /**\n   * The `Utilities` class contains general-purpose utility methods. All methods are static and\n   * should be called using the class name. For example: `Utilities.getNoteDetails(\"C4\")`.\n   *\n   * @license Apache-2.0\n   * @since 3.0.0\n   */ class Utilities {\n        /**\n     * Returns a MIDI note number matching the identifier passed in the form of a string. The\n     * identifier must include the octave number. The identifier also optionally include a sharp (#),\n     * a double sharp (##), a flat (b) or a double flat (bb) symbol. For example, these are all valid\n     * identifiers: C5, G4, D#-1, F0, Gb7, Eb-1, Abb4, B##6, etc.\n     *\n     * When converting note identifiers to numbers, C4 is considered to be middle C (MIDI note number\n     * 60) as per the scientific pitch notation standard.\n     *\n     * The resulting note number can be offset by using the `octaveOffset` parameter.\n     *\n     * @param identifier {string} The identifier in the form of a letter, followed by an optional \"#\",\n     * \"##\", \"b\" or \"bb\" followed by the octave number. For exemple: C5, G4, D#-1, F0, Gb7, Eb-1,\n     * Abb4, B##6, etc.\n     *\n     * @param {number} [octaveOffset=0] A integer to offset the octave by.\n     *\n     * @returns {number} The MIDI note number (an integer between 0 and 127).\n     *\n     * @throws RangeError Invalid 'octaveOffset' value\n     *\n     * @throws TypeError Invalid note identifier\n     *\n     * @license Apache-2.0\n     * @since 3.0.0\n     * @static\n     */ static toNoteNumber(identifier, octaveOffset = 0) {\n            // Validation\n            octaveOffset = octaveOffset == undefined ? 0 : parseInt(octaveOffset);\n            if (isNaN(octaveOffset)) throw new RangeError(\"Invalid 'octaveOffset' value\");\n            if (typeof identifier !== \"string\") identifier = \"\";\n            const fragments = this.getNoteDetails(identifier);\n            if (!fragments) throw new TypeError(\"Invalid note identifier\");\n            const notes = {\n                C: 0,\n                D: 2,\n                E: 4,\n                F: 5,\n                G: 7,\n                A: 9,\n                B: 11\n            };\n            let result = (fragments.octave + 1 + octaveOffset) * 12;\n            result += notes[fragments.name];\n            if (fragments.accidental) {\n                if (fragments.accidental.startsWith(\"b\")) result -= fragments.accidental.length;\n                else result += fragments.accidental.length;\n            }\n            if (result < 0 || result > 127) throw new RangeError(\"Invalid octaveOffset value\");\n            return result;\n        }\n        /**\n     * Given a proper note identifier (`C#4`, `Gb-1`, etc.) or a valid MIDI note number (0-127), this\n     * method returns an object containing broken down details about the specified note (uppercase\n     * letter, accidental and octave).\n     *\n     * When a number is specified, the translation to note is done using a value of 60 for middle C\n     * (C4 = middle C).\n     *\n     * @param value {string|number} A note identifier A  atring (\"C#4\", \"Gb-1\", etc.) or a MIDI note\n     * number (0-127).\n     *\n     * @returns {{accidental: string, identifier: string, name: string, octave: number }}\n     *\n     * @throws TypeError Invalid note identifier\n     *\n     * @since 3.0.0\n     * @static\n     */ static getNoteDetails(value) {\n            if (Number.isInteger(value)) value = this.toNoteIdentifier(value);\n            const matches = value.match(/^([CDEFGAB])(#{0,2}|b{0,2})(-?\\d+)$/i);\n            if (!matches) throw new TypeError(\"Invalid note identifier\");\n            const name = matches[1].toUpperCase();\n            const octave = parseInt(matches[3]);\n            let accidental = matches[2].toLowerCase();\n            accidental = accidental === \"\" ? undefined : accidental;\n            const fragments = {\n                accidental: accidental,\n                identifier: name + (accidental || \"\") + octave,\n                name: name,\n                octave: octave\n            };\n            return fragments;\n        }\n        /**\n     * Returns a sanitized array of valid MIDI channel numbers (1-16). The parameter should be a\n     * single integer or an array of integers.\n     *\n     * For backwards-compatibility, passing `undefined` as a parameter to this method results in all\n     * channels being returned (1-16). Otherwise, parameters that cannot successfully be parsed to\n     * integers between 1 and 16 are silently ignored.\n     *\n     * @param [channel] {number|number[]} An integer or an array of integers to parse as channel\n     * numbers.\n     *\n     * @returns {number[]} An array of 0 or more valid MIDI channel numbers.\n     *\n     * @since 3.0.0\n     * @static\n     */ static sanitizeChannels(channel) {\n            let channels;\n            if (wm.validation) {\n                if (channel === \"all\") // backwards-compatibility\n                channels = [\n                    \"all\"\n                ];\n                else if (channel === \"none\") // backwards-compatibility\n                return [];\n            }\n            if (!Array.isArray(channel)) channels = [\n                channel\n            ];\n            else channels = channel;\n             // In order to preserve backwards-compatibility, we let this assignment as it is.\n            if (channels.indexOf(\"all\") > -1) channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n            return channels.map(function(ch) {\n                return parseInt(ch);\n            }).filter(function(ch) {\n                return ch >= 1 && ch <= 16;\n            });\n        }\n        /**\n     * Returns a valid timestamp, relative to the navigation start of the document, derived from the\n     * `time` parameter. If the parameter is a string starting with the \"+\" sign and followed by a\n     * number, the resulting timestamp will be the sum of the current timestamp plus that number. If\n     * the parameter is a positive number, it will be returned as is. Otherwise, false will be\n     * returned.\n     *\n     * @param [time] {number|string} The time string (e.g. `\"+2000\"`) or number to parse\n     * @return {number|false} A positive number or `false` (if the time cannot be converted)\n     *\n     * @since 3.0.0\n     * @static\n     */ static toTimestamp(time) {\n            let value = false;\n            const parsed = parseFloat(time);\n            if (isNaN(parsed)) return false;\n            if (typeof time === \"string\" && time.substring(0, 1) === \"+\") {\n                if (parsed >= 0) value = wm.time + parsed;\n            } else if (parsed >= 0) value = parsed;\n            return value;\n        }\n        /**\n     * Returns a valid MIDI note number (0-127) given the specified input. The input usually is a\n     * string containing a note identifier (`\"C3\"`, `\"F#4\"`, `\"D-2\"`, `\"G8\"`, etc.). If an integer\n     * between 0 and 127 is passed, it will simply be returned as is (for convenience). Other strings\n     * will be parsed for integer value, if possible.\n     *\n     * If the input is an identifier, the resulting note number is offset by the `octaveOffset`\n     * parameter. For example, if you pass in \"C4\" (note number 60) and the `octaveOffset` value is\n     * -2, the resulting MIDI note number will be 36.\n     *\n     * @param input {string|number} A string or number to extract the MIDI note number from.\n     * @param octaveOffset {number} An integer to offset the octave by\n     *\n     * @returns {number|false} A valid MIDI note number (0-127) or `false` if the input could not\n     * successfully be parsed to a note number.\n     *\n     * @since 3.0.0\n     * @static\n     */ static guessNoteNumber(input, octaveOffset) {\n            // Validate and, if necessary, assign default\n            octaveOffset = parseInt(octaveOffset) || 0;\n            let output = false; // Check input type\n            if (Number.isInteger(input) && input >= 0 && input <= 127) // uint\n            output = parseInt(input);\n            else if (parseInt(input) >= 0 && parseInt(input) <= 127) // float or uint as string\n            output = parseInt(input);\n            else if (typeof input === \"string\" || input instanceof String) // string\n            try {\n                output = this.toNoteNumber(input.trim(), octaveOffset);\n            } catch (e) {\n                return false;\n            }\n            return output;\n        }\n        /**\n     * Returns an identifier string representing a note name (with optional accidental) followed by an\n     * octave number. The octave can be offset by using the `octaveOffset` parameter.\n     *\n     * @param {number} number The MIDI note number to convert to a note identifier\n     * @param {number} octaveOffset An offset to apply to the resulting octave\n     *\n     * @returns {string}\n     *\n     * @throws RangeError Invalid note number\n     * @throws RangeError Invalid octaveOffset value\n     *\n     * @since 3.0.0\n     * @static\n     */ static toNoteIdentifier(number, octaveOffset) {\n            number = parseInt(number);\n            if (isNaN(number) || number < 0 || number > 127) throw new RangeError(\"Invalid note number\");\n            octaveOffset = octaveOffset == undefined ? 0 : parseInt(octaveOffset);\n            if (isNaN(octaveOffset)) throw new RangeError(\"Invalid octaveOffset value\");\n            const notes = [\n                \"C\",\n                \"C#\",\n                \"D\",\n                \"D#\",\n                \"E\",\n                \"F\",\n                \"F#\",\n                \"G\",\n                \"G#\",\n                \"A\",\n                \"A#\",\n                \"B\"\n            ];\n            const octave = Math.floor(number / 12 - 1) + octaveOffset;\n            return notes[number % 12] + octave.toString();\n        }\n        /**\n     * Converts the `input` parameter to a valid [`Note`]{@link Note} object. The input usually is an\n     * unsigned integer (0-127) or a note identifier (`\"C4\"`, `\"G#5\"`, etc.). If the input is a\n     * [`Note`]{@link Note} object, it will be returned as is.\n     *\n     * If the input is a note number or identifier, it is possible to specify options by providing the\n     * `options` parameter.\n     *\n     * @param [input] {number|string|Note}\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number} [options.duration=Infinity] The number of milliseconds before the note should\n     * be explicitly stopped.\n     *\n     * @param {number} [options.attack=0.5] The note's attack velocity as a float between 0 and 1. If\n     * you wish to use an integer between 0 and 127, use the `rawAttack` option instead. If both\n     * `attack` and `rawAttack` are specified, the latter has precedence.\n     *\n     * @param {number} [options.release=0.5] The note's release velocity as a float between 0 and 1. If\n     * you wish to use an integer between 0 and 127, use the `rawRelease` option instead. If both\n     * `release` and `rawRelease` are specified, the latter has precedence.\n     *\n     * @param {number} [options.rawAttack=64] The note's attack velocity as an integer between 0 and\n     * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n     * `attack` and `rawAttack` are specified, the latter has precedence.\n     *\n     * @param {number} [options.rawRelease=64] The note's release velocity as an integer between 0 and\n     * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n     * `release` and `rawRelease` are specified, the latter has precedence.\n     *\n     * @param {number} [options.octaveOffset=0] An integer to offset the octave by. **This is only\n     * used when the input value is a note identifier.**\n     *\n     * @returns {Note}\n     *\n     * @throws TypeError The input could not be parsed to a note\n     *\n     * @since version 3.0.0\n     * @static\n     */ static buildNote(input, options = {}) {\n            options.octaveOffset = parseInt(options.octaveOffset) || 0; // If it's already a Note, we're done\n            if (input instanceof Note) return input;\n            let number = this.guessNoteNumber(input, options.octaveOffset);\n            if (number === false) // We use a comparison b/c the note can be 0 (which equates to false)\n            throw new TypeError(`The input could not be parsed as a note (${input})`);\n             // If we got here, we have a proper note number. Before creating the new note, we strip out\n            // 'octaveOffset' because it has already been factored in when calling guessNoteNumber().\n            options.octaveOffset = undefined;\n            return new Note(number, options);\n        }\n        /**\n     * Converts an input value, which can be an unsigned integer (0-127), a note identifier, a\n     * [`Note`]{@link Note}  object or an array of the previous types, to an array of\n     * [`Note`]{@link Note}  objects.\n     *\n     * [`Note`]{@link Note}  objects are returned as is. For note numbers and identifiers, a\n     * [`Note`]{@link Note} object is created with the options specified. An error will be thrown when\n     * encountering invalid input.\n     *\n     * Note: if both the `attack` and `rawAttack` options are specified, the later has priority. The\n     * same goes for `release` and `rawRelease`.\n     *\n     * @param [notes] {number|string|Note|number[]|string[]|Note[]}\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number} [options.duration=Infinity] The number of milliseconds before the note should\n     * be explicitly stopped.\n     *\n     * @param {number} [options.attack=0.5] The note's attack velocity as a float between 0 and 1. If\n     * you wish to use an integer between 0 and 127, use the `rawAttack` option instead. If both\n     * `attack` and `rawAttack` are specified, the latter has precedence.\n     *\n     * @param {number} [options.release=0.5] The note's release velocity as a float between 0 and 1. If\n     * you wish to use an integer between 0 and 127, use the `rawRelease` option instead. If both\n     * `release` and `rawRelease` are specified, the latter has precedence.\n     *\n     * @param {number} [options.rawAttack=64] The note's attack velocity as an integer between 0 and\n     * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n     * `attack` and `rawAttack` are specified, the latter has precedence.\n     *\n     * @param {number} [options.rawRelease=64] The note's release velocity as an integer between 0 and\n     * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n     * `release` and `rawRelease` are specified, the latter has precedence.\n     *\n     * @param {number} [options.octaveOffset=0] An integer to offset the octave by. **This is only\n     * used when the input value is a note identifier.**\n     *\n     * @returns {Note[]}\n     *\n     * @throws TypeError An element could not be parsed as a note.\n     *\n     * @since 3.0.0\n     * @static\n     */ static buildNoteArray(notes, options = {}) {\n            let result = [];\n            if (!Array.isArray(notes)) notes = [\n                notes\n            ];\n            notes.forEach((note)=>{\n                result.push(this.buildNote(note, options));\n            });\n            return result;\n        }\n        /**\n     * Returns a number between 0 and 1 representing the ratio of the input value divided by 127 (7\n     * bit). The returned value is restricted between 0 and 1 even if the input is greater than 127 or\n     * smaller than 0.\n     *\n     * Passing `Infinity` will return `1` and passing `-Infinity` will return `0`. Otherwise, when the\n     * input value cannot be converted to an integer, the method returns 0.\n     *\n     * @param value {number} A positive integer between 0 and 127 (inclusive)\n     * @returns {number} A number between 0 and 1 (inclusive)\n     * @static\n     */ static from7bitToFloat(value) {\n            if (value === Infinity) value = 127;\n            value = parseInt(value) || 0;\n            return Math.min(Math.max(value / 127, 0), 1);\n        }\n        /**\n     * Returns an integer between 0 and 127 which is the result of multiplying the input value by\n     * 127. The input value should be a number between 0 and 1 (inclusively). The returned value is\n     * restricted between 0 and 127 even if the input is greater than 1 or smaller than 0.\n     *\n     * Passing `Infinity` will return `127` and passing `-Infinity` will return `0`. Otherwise, when\n     * the input value cannot be converted to a number, the method returns 0.\n     *\n     * @param value {number} A positive float between 0 and 1 (inclusive)\n     * @returns {number} A number between 0 and 127 (inclusive)\n     * @static\n     */ static fromFloatTo7Bit(value) {\n            if (value === Infinity) value = 1;\n            value = parseFloat(value) || 0;\n            return Math.min(Math.max(Math.round(value * 127), 0), 127);\n        }\n        /**\n     * Combines and converts MSB and LSB values (0-127) to a float between 0 and 1. The returned value\n     * is within between 0 and 1 even if the result is greater than 1 or smaller than 0.\n     *\n     * @param msb {number} The most significant byte as a integer between 0 and 127.\n     * @param [lsb=0] {number} The least significant byte as a integer between 0 and 127.\n     * @returns {number} A float between 0 and 1.\n     */ static fromMsbLsbToFloat(msb, lsb = 0) {\n            if (wm.validation) {\n                msb = Math.min(Math.max(parseInt(msb) || 0, 0), 127);\n                lsb = Math.min(Math.max(parseInt(lsb) || 0, 0), 127);\n            }\n            const value = ((msb << 7) + lsb) / 16383;\n            return Math.min(Math.max(value, 0), 1);\n        }\n        /**\n     * Extracts 7bit MSB and LSB values from the supplied float.\n     *\n     * @param value {number} A float between 0 and 1\n     * @returns {{lsb: number, msb: number}}\n     */ static fromFloatToMsbLsb(value) {\n            if (wm.validation) value = Math.min(Math.max(parseFloat(value) || 0, 0), 1);\n            const multiplied = Math.round(value * 16383);\n            return {\n                msb: multiplied >> 7,\n                lsb: multiplied & 0x7F\n            };\n        }\n        /**\n     * Returns the supplied MIDI note number offset by the requested octave and semitone values. If\n     * the calculated value is less than 0, 0 will be returned. If the calculated value is more than\n     * 127, 127 will be returned. If an invalid offset value is supplied, 0 will be used.\n     *\n     * @param number {number} The MIDI note to offset as an integer between 0 and 127.\n     * @param octaveOffset {number} An integer to offset the note by (in octave)\n     * @param octaveOffset {number} An integer to offset the note by (in semitones)\n     * @returns {number} An integer between 0 and 127\n     *\n     * @throws {Error} Invalid note number\n     * @static\n     */ static offsetNumber(number, octaveOffset = 0, semitoneOffset = 0) {\n            if (wm.validation) {\n                number = parseInt(number);\n                if (isNaN(number)) throw new Error(\"Invalid note number\");\n                octaveOffset = parseInt(octaveOffset) || 0;\n                semitoneOffset = parseInt(semitoneOffset) || 0;\n            }\n            return Math.min(Math.max(number + octaveOffset * 12 + semitoneOffset, 0), 127);\n        }\n        /**\n     * Returns the name of the first property of the supplied object whose value is equal to the one\n     * supplied. If nothing is found, `undefined` is returned.\n     *\n     * @param object {object} The object to look for the property in.\n     * @param value {*} Any value that can be expected to be found in the object's properties.\n     * @returns {string|undefined} The name of the matching property or `undefined` if nothing is\n     * found.\n     * @static\n     */ static getPropertyByValue(object, value) {\n            return Object.keys(object).find((key)=>object[key] === value);\n        }\n        /**\n     * Returns the name of a control change message matching the specified number (0-127). Some valid\n     * control change numbers do not have a specific name or purpose assigned in the MIDI\n     * [spec](https://midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2).\n     * In these cases, the method returns `controllerXXX` (where XXX is the number).\n     *\n     * @param {number} number An integer (0-127) representing the control change message\n     * @returns {string|undefined} The matching control change name or `undefined` if no match was\n     * found.\n     *\n     * @static\n     */ static getCcNameByNumber(number) {\n            if (wm.validation) {\n                number = parseInt(number);\n                if (!(number >= 0 && number <= 127)) return undefined;\n            }\n            return Enumerations.CONTROL_CHANGE_MESSAGES[number].name;\n        }\n        /**\n     * Returns the number of a control change message matching the specified name.\n     *\n     * @param {string} name A string representing the control change message\n     * @returns {string|undefined} The matching control change number or `undefined` if no match was\n     * found.\n     *\n     * @since 3.1\n     * @static\n     */ static getCcNumberByName(name) {\n            let message = Enumerations.CONTROL_CHANGE_MESSAGES.find((element)=>element.name === name);\n            if (message) return message.number;\n            else // Legacy (remove in v4)\n            return Enumerations.MIDI_CONTROL_CHANGE_MESSAGES[name];\n        }\n        /**\n     * Returns the channel mode name matching the specified number. If no match is found, the function\n     * returns `false`.\n     *\n     * @param {number} number An integer representing the channel mode message (120-127)\n     * @returns {string|false} The name of the matching channel mode or `false` if no match could be\n     * found.\n     *\n     * @since 2.0.0\n     */ static getChannelModeByNumber(number) {\n            if (!(number >= 120 && number <= 127)) return false;\n            for(let cm in Enumerations.CHANNEL_MODE_MESSAGES){\n                if (Enumerations.CHANNEL_MODE_MESSAGES.hasOwnProperty(cm) && number === Enumerations.CHANNEL_MODE_MESSAGES[cm]) return cm;\n            }\n            return false;\n        }\n        /**\n     * Indicates whether the execution environment is Node.js (`true`) or not (`false`)\n     * @type {boolean}\n     */ static get isNode() {\n            return typeof process !== \"undefined\" && process.versions != null && process.versions.node != null;\n        }\n        /**\n     * Indicates whether the execution environment is a browser (`true`) or not (`false`)\n     * @type {boolean}\n     */ static get isBrowser() {\n            return typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\n        }\n    }\n    /**\n   * The `OutputChannel` class represents a single output MIDI channel. `OutputChannel` objects are\n   * provided by an [`Output`](Output) port which, itself, is made available by a device. The\n   * `OutputChannel` object is derived from the host's MIDI subsystem and should not be instantiated\n   * directly.\n   *\n   * All 16 `OutputChannel` objects can be found inside the parent output's\n   * [`channels`]{@link Output#channels} property.\n   *\n   * @param {Output} output The [`Output`](Output) this channel belongs to.\n   * @param {number} number The MIDI channel number (`1` - `16`).\n   *\n   * @extends EventEmitter\n   * @license Apache-2.0\n   * @since 3.0.0\n   */ class OutputChannel extends EventEmitter {\n        /**\n     * Creates an `OutputChannel` object.\n     *\n     * @param {Output} output The [`Output`](Output) this channel belongs to.\n     * @param {number} number The MIDI channel number (`1` - `16`).\n     */ constructor(output, number){\n            super();\n            /**\n       * @type {Output}\n       * @private\n       */ this._output = output;\n            /**\n       * @type {number}\n       * @private\n       */ this._number = number;\n            /**\n       * @type {number}\n       * @private\n       */ this._octaveOffset = 0;\n        }\n        /**\n     * Unlinks the MIDI subsystem, removes all listeners attached to the channel and nulls the channel\n     * number. This method is mostly for internal use. It has not been prefixed with an underscore\n     * since it is called by other objects such as the `Output` object.\n     *\n     * @private\n     */ destroy() {\n            this._output = null;\n            this._number = null;\n            this._octaveOffset = 0;\n            this.removeListener();\n        }\n        /**\n     * Sends a MIDI message on the MIDI output port. If no time is specified, the message will be\n     * sent immediately. The message should be an array of 8-bit unsigned integers (`0` - `225`),\n     * a\n     * [`Uint8Array`]{@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array}\n     * object or a [`Message`](Message) object.\n     *\n     * It is usually not necessary to use this method directly as you can use one of the simpler\n     * helper methods such as [`playNote()`](#playNote), [`stopNote()`](#stopNote),\n     * [`sendControlChange()`](#sendControlChange), etc.\n     *\n     * Details on the format of MIDI messages are available in the summary of\n     * [MIDI messages]{@link https://www.midi.org/specifications-old/item/table-1-summary-of-midi-message}\n     * from the MIDI Manufacturers Association.\n     *\n     * @param message {number[]|Uint8Array|Message} A `Message` object, an array of 8-bit unsigned\n     * integers or a `Uint8Array` object (not available in Node.js) containing the message bytes.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {RangeError} The first byte (status) must be an integer between 128 and 255.\n     *\n     * @throws {RangeError} Data bytes must be integers between 0 and 255.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */ send(message, options = {\n            time: 0\n        }) {\n            this.output.send(message, options);\n            return this;\n        }\n        /**\n     * Sends a MIDI **key aftertouch** message at the scheduled time. This is a key-specific\n     * aftertouch. For a channel-wide aftertouch message, use\n     * [`sendChannelAftertouch()`]{@link #sendChannelAftertouch}.\n     *\n     * @param target {number|Note|string|number[]|Note[]|string[]} The note(s) for which you are sending\n     * an aftertouch value. The notes can be specified by using a MIDI note number (`0` - `127`), a\n     * [`Note`](Note) object, a note identifier (e.g. `C3`, `G#4`, `F-1`, `Db7`) or an array of the\n     * previous types. When using a note identifier, octave range must be between `-1` and `9`. The\n     * lowest note is `C-1` (MIDI note number `0`) and the highest note is `G9` (MIDI note number\n     * `127`).\n     *\n     * When using a note identifier, the octave value will be offset by the local\n     * [`octaveOffset`](#octaveOffset) and by\n     * [`Output.octaveOffset`](Output#octaveOffset) and [`WebMidi.octaveOffset`](WebMidi#octaveOffset)\n     * (if those values are not `0`). When using a key number, `octaveOffset` values are ignored.\n     *\n     * @param [pressure=0.5] {number} The pressure level (between `0` and `1`). An invalid pressure\n     * value will silently trigger the default behaviour. If the `rawValue` option is set to `true`,\n     * the pressure is defined by using an integer between `0` and `127`.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n     * considered a float between `0` and `1.0` (default) or a raw integer between `0` and `127`.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @return {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     *\n     * @throws RangeError Invalid key aftertouch value.\n     */ sendKeyAftertouch(target, pressure, options = {}) {\n            if (wm.validation) {\n                // Legacy support\n                if (options.useRawValue) options.rawValue = options.useRawValue;\n                if (isNaN(parseFloat(pressure))) throw new RangeError(\"Invalid key aftertouch value.\");\n                if (options.rawValue) {\n                    if (!(pressure >= 0 && pressure <= 127 && Number.isInteger(pressure))) throw new RangeError(\"Key aftertouch raw value must be an integer between 0 and 127.\");\n                } else {\n                    if (!(pressure >= 0 && pressure <= 1)) throw new RangeError(\"Key aftertouch value must be a float between 0 and 1.\");\n                }\n            } // Normalize pressure to integer\n            if (!options.rawValue) pressure = Utilities.fromFloatTo7Bit(pressure); // Plot total offset\n            const offset = wm.octaveOffset + this.output.octaveOffset + this.octaveOffset; // Make sure we are dealing with an array\n            if (!Array.isArray(target)) target = [\n                target\n            ];\n            Utilities.buildNoteArray(target).forEach((n)=>{\n                this.send([\n                    (Enumerations.CHANNEL_MESSAGES.keyaftertouch << 4) + (this.number - 1),\n                    n.getOffsetNumber(offset),\n                    pressure\n                ], {\n                    time: Utilities.toTimestamp(options.time)\n                });\n            });\n            return this;\n        }\n        /**\n     * Sends a MIDI **control change** message to the channel at the scheduled time. The control\n     * change message to send can be specified numerically (`0` to `127`) or by using one of the\n     * following common names:\n     *\n     * | Number | Name                          |\n     * |--------|-------------------------------|\n     * | 0      |`bankselectcoarse`             |\n     * | 1      |`modulationwheelcoarse`        |\n     * | 2      |`breathcontrollercoarse`       |\n     * | 4      |`footcontrollercoarse`         |\n     * | 5      |`portamentotimecoarse`         |\n     * | 6      |`dataentrycoarse`              |\n     * | 7      |`volumecoarse`                 |\n     * | 8      |`balancecoarse`                |\n     * | 10     |`pancoarse`                    |\n     * | 11     |`expressioncoarse`             |\n     * | 12     |`effectcontrol1coarse`         |\n     * | 13     |`effectcontrol2coarse`         |\n     * | 18     |`generalpurposeslider3`        |\n     * | 19     |`generalpurposeslider4`        |\n     * | 32     |`bankselectfine`               |\n     * | 33     |`modulationwheelfine`          |\n     * | 34     |`breathcontrollerfine`         |\n     * | 36     |`footcontrollerfine`           |\n     * | 37     |`portamentotimefine`           |\n     * | 38     |`dataentryfine`                |\n     * | 39     |`volumefine`                   |\n     * | 40     |`balancefine`                  |\n     * | 42     |`panfine`                      |\n     * | 43     |`expressionfine`               |\n     * | 44     |`effectcontrol1fine`           |\n     * | 45     |`effectcontrol2fine`           |\n     * | 64     |`holdpedal`                    |\n     * | 65     |`portamento`                   |\n     * | 66     |`sustenutopedal`               |\n     * | 67     |`softpedal`                    |\n     * | 68     |`legatopedal`                  |\n     * | 69     |`hold2pedal`                   |\n     * | 70     |`soundvariation`               |\n     * | 71     |`resonance`                    |\n     * | 72     |`soundreleasetime`             |\n     * | 73     |`soundattacktime`              |\n     * | 74     |`brightness`                   |\n     * | 75     |`soundcontrol6`                |\n     * | 76     |`soundcontrol7`                |\n     * | 77     |`soundcontrol8`                |\n     * | 78     |`soundcontrol9`                |\n     * | 79     |`soundcontrol10`               |\n     * | 80     |`generalpurposebutton1`        |\n     * | 81     |`generalpurposebutton2`        |\n     * | 82     |`generalpurposebutton3`        |\n     * | 83     |`generalpurposebutton4`        |\n     * | 91     |`reverblevel`                  |\n     * | 92     |`tremololevel`                 |\n     * | 93     |`choruslevel`                  |\n     * | 94     |`celestelevel`                 |\n     * | 95     |`phaserlevel`                  |\n     * | 96     |`dataincrement`                |\n     * | 97     |`datadecrement`                |\n     * | 98     |`nonregisteredparametercoarse` |\n     * | 99     |`nonregisteredparameterfine`   |\n     * | 100    |`registeredparametercoarse`    |\n     * | 101    |`registeredparameterfine`      |\n     * | 120    |`allsoundoff`                  |\n     * | 121    |`resetallcontrollers`          |\n     * | 122    |`localcontrol`                 |\n     * | 123    |`allnotesoff`                  |\n     * | 124    |`omnimodeoff`                  |\n     * | 125    |`omnimodeon`                   |\n     * | 126    |`monomodeon`                   |\n     * | 127    |`polymodeon`                   |\n     *\n     * As you can see above, not all control change message have a matching name. This does not mean\n     * you cannot use the others. It simply means you will need to use their number\n     * (`0` to `127`) instead of their name. While you can still use them, numbers `120` to `127` are\n     * usually reserved for *channel mode* messages. See\n     * [`sendChannelMode()`]{@link OutputChannel#sendChannelMode} method for more info.\n     *\n     * To view a detailed list of all available **control change** messages, please consult \"Table 3 -\n     * Control Change Messages\" from the [MIDI Messages](\n     * https://www.midi.org/specifications/item/table-3-control-change-messages-data-bytes-2)\n     * specification.\n     *\n     * **Note**: messages #0-31 (MSB) are paired with messages #32-63 (LSB). For example, message #1\n     * (`modulationwheelcoarse`) can be accompanied by a second control change message for\n     * `modulationwheelfine` to achieve a greater level of precision. if you want to specify both MSB\n     * and LSB for messages between `0` and `31`, you can do so by passing a 2-value array as the\n     * second parameter.\n     *\n     * @param {number|string} controller The MIDI controller name or number (`0` - `127`).\n     *\n     * @param {number|number[]} value The value to send (0-127). You can also use a two-position array\n     * for controllers 0 to 31. In this scenario, the first value will be sent as usual and the second\n     * value will be sent to the matching LSB controller (which is obtained by adding 32 to the first\n     * controller)\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {RangeError} Controller numbers must be between 0 and 127.\n     * @throws {RangeError} Invalid controller name.\n     * @throws {TypeError} The value array must have a length of 2.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     *\n     * @license Apache-2.0\n     * @since 3.0.0\n     */ sendControlChange(controller, value, options = {}) {\n            if (typeof controller === \"string\") controller = Utilities.getCcNumberByName(controller);\n            if (!Array.isArray(value)) value = [\n                value\n            ];\n            if (wm.validation) {\n                if (controller === undefined) throw new TypeError(\"Control change must be identified with a valid name or an integer between 0 and 127.\");\n                if (!Number.isInteger(controller) || !(controller >= 0 && controller <= 127)) throw new TypeError(\"Control change number must be an integer between 0 and 127.\");\n                value = value.map((item)=>{\n                    const output = Math.min(Math.max(parseInt(item), 0), 127);\n                    if (isNaN(output)) throw new TypeError(\"Values must be integers between 0 and 127\");\n                    return output;\n                });\n                if (value.length === 2 && controller >= 32) throw new TypeError(\"To use a value array, the controller must be between 0 and 31\");\n            }\n            value.forEach((item, index)=>{\n                this.send([\n                    (Enumerations.CHANNEL_MESSAGES.controlchange << 4) + (this.number - 1),\n                    controller + index * 32,\n                    value[index]\n                ], {\n                    time: Utilities.toTimestamp(options.time)\n                });\n            });\n            return this;\n        }\n        /**\n     * Selects a MIDI non-registered parameter so it is affected by upcoming data entry, data\n     * increment and data decrement messages.\n     *\n     * @param parameter {number[]} A two-position array specifying the two control bytes that identify\n     * the registered parameter. The NRPN MSB (99 or 0x63) is a position 0. The NRPN LSB (98 or 0x62)\n     * is at position 1.\n     *\n     * @private\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n     * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n     * operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */ _selectNonRegisteredParameter(parameter, options = {}) {\n            // parameter[0] = Math.floor(parameter[0]);\n            // if (!(parameter[0] >= 0 && parameter[0] <= 127)) {\n            //   throw new RangeError(\"The control63 value must be between 0 and 127.\");\n            // }\n            //\n            // parameter[1] = Math.floor(parameter[1]);\n            // if (!(parameter[1] >= 0 && parameter[1] <= 127)) {\n            //   throw new RangeError(\"The control62 value must be between 0 and 127.\");\n            // }\n            this.sendControlChange(0x63, parameter[0], options);\n            this.sendControlChange(0x62, parameter[1], options);\n            return this;\n        }\n        /**\n     * Deselects the currently active MIDI registered parameter so it is no longer affected by data\n     * entry, data increment and data decrement messages.\n     *\n     * Current best practice recommends doing that after each call to\n     * [_setCurrentParameter()]{@link #_setCurrentParameter}.\n     *\n     * @private\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n     * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n     * operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */ _deselectRegisteredParameter(options = {}) {\n            this.sendControlChange(0x65, 0x7F, options);\n            this.sendControlChange(0x64, 0x7F, options);\n            return this;\n        }\n        /**\n     * Deselects the currently active MIDI non-registered parameter so it is no longer affected by\n     * data entry, data increment and data decrement messages.\n     *\n     * @private\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n     * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n     * operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */ _deselectNonRegisteredParameter(options = {}) {\n            this.sendControlChange(0x65, 0x7F, options);\n            this.sendControlChange(0x64, 0x7F, options);\n            return this;\n        }\n        /**\n     * Selects a MIDI registered parameter so it is affected by upcoming data entry, data increment\n     * and data decrement messages.\n     *\n     * @private\n     *\n     * @param parameter {number[]} A two-position array of integers specifying the two control bytes\n     * (0x65, 0x64) that identify the registered parameter. The integers must be between 0 and 127.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n     * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n     * operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */ _selectRegisteredParameter(parameter, options = {}) {\n            this.sendControlChange(0x65, parameter[0], options);\n            this.sendControlChange(0x64, parameter[1], options);\n            return this;\n        }\n        /**\n     * Sets the value of the currently selected MIDI registered parameter.\n     *\n     * @private\n     *\n     * @param data {number|number[]}\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n     * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n     * operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */ _setCurrentParameter(data, options = {}) {\n            data = [].concat(data); // MSB\n            // data[0] = parseInt(data[0]);\n            // if (!isNaN(data[0]) && data[0] >= 0 && data[0] <= 127) {\n            this.sendControlChange(0x06, data[0], options); // } else {\n            //   throw new RangeError(\"The msb value must be between 0 and 127.\");\n            // }\n            if (data.length < 2) return this; // LSB\n            // data[1] = parseInt(data[1]);\n            // if (!isNaN(data[1]) && data[1] >= 0 && data[1] <= 127) {\n            this.sendControlChange(0x26, data[1], options); // } else {\n            //   throw new RangeError(\"The lsb value must be between 0 and 127.\");\n            // }\n            return this;\n        }\n        /**\n     * Decrements the specified MIDI registered parameter by 1. Here is the full list of parameter\n     * names that can be used with this function:\n     *\n     *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n     *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n     *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n     *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n     *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n     *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n     *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n     *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n     *  * Gain (0x3D, 0x02): `\"gain\"`\n     *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n     *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n     *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n     *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n     *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n     *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n     *\n     * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n     * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n     * parameter.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws TypeError The specified registered parameter is invalid.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */ sendRpnDecrement(parameter, options = {}) {\n            if (!Array.isArray(parameter)) parameter = Enumerations.REGISTERED_PARAMETERS[parameter];\n            if (wm.validation) {\n                if (parameter === undefined) throw new TypeError(\"The specified registered parameter is invalid.\");\n                let valid = false;\n                Object.getOwnPropertyNames(Enumerations.REGISTERED_PARAMETERS).forEach((p)=>{\n                    if (Enumerations.REGISTERED_PARAMETERS[p][0] === parameter[0] && Enumerations.REGISTERED_PARAMETERS[p][1] === parameter[1]) valid = true;\n                });\n                if (!valid) throw new TypeError(\"The specified registered parameter is invalid.\");\n            }\n            this._selectRegisteredParameter(parameter, options);\n            this.sendControlChange(0x61, 0, options);\n            this._deselectRegisteredParameter(options);\n            return this;\n        }\n        /**\n     * Increments the specified MIDI registered parameter by 1. Here is the full list of parameter\n     * names that can be used with this function:\n     *\n     *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n     *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n     *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n     *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n     *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n     *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n     *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n     *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n     *  * Gain (0x3D, 0x02): `\"gain\"`\n     *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n     *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n     *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n     *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n     *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n     *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n     *\n     * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n     * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n     * parameter.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws TypeError The specified registered parameter is invalid.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */ sendRpnIncrement(parameter, options = {}) {\n            if (!Array.isArray(parameter)) parameter = Enumerations.REGISTERED_PARAMETERS[parameter];\n            if (wm.validation) {\n                if (parameter === undefined) throw new TypeError(\"The specified registered parameter is invalid.\");\n                let valid = false;\n                Object.getOwnPropertyNames(Enumerations.REGISTERED_PARAMETERS).forEach((p)=>{\n                    if (Enumerations.REGISTERED_PARAMETERS[p][0] === parameter[0] && Enumerations.REGISTERED_PARAMETERS[p][1] === parameter[1]) valid = true;\n                });\n                if (!valid) throw new TypeError(\"The specified registered parameter is invalid.\");\n            }\n            this._selectRegisteredParameter(parameter, options);\n            this.sendControlChange(0x60, 0, options);\n            this._deselectRegisteredParameter(options);\n            return this;\n        }\n        /**\n     * Plays a note or an array of notes on the channel. The first parameter is the note to play. It\n     * can be a single value or an array of the following valid values:\n     *\n     *  - A [`Note`]{@link Note} object\n     *  - A MIDI note number (integer between `0` and `127`)\n     *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n     *\n     * The `playNote()` method sends a **note on** MIDI message for all specified notes. If a\n     * `duration` is set in the `options` parameter or in the [`Note`]{@link Note} object's\n     * [`duration`]{@link Note#duration} property, it will also schedule a **note off** message\n     * to end the note after said duration. If no `duration` is set, the note will simply play until\n     * a matching **note off** message is sent with [`stopNote()`]{@link OutputChannel#stopNote} or\n     * [`sendNoteOff()`]{@link OutputChannel#sendNoteOff}.\n     *\n     *  The execution of the **note on** command can be delayed by using the `time` property of the\n     * `options` parameter.\n     *\n     * When using [`Note`]{@link Note} objects, the durations and velocities defined in the\n     * [`Note`]{@link Note} objects have precedence over the ones specified via the method's `options`\n     * parameter.\n     *\n     * **Note**: per the MIDI standard, a **note on** message with an attack velocity of `0` is\n     * functionally equivalent to a **note off** message.\n     *\n     * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n     * specified by using a MIDI note number (`0` - `127`), a note identifier (e.g. `C3`, `G#4`,\n     * `F-1`, `Db7`), a [`Note`]{@link Note} object or an array of the previous types. When using a\n     * note identifier, the octave range must be between `-1` and `9`. The lowest note is `C-1` (MIDI\n     * note number `0`) and the highest note is `G9` (MIDI note number `127`).\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number} [options.duration] A positive decimal number larger than `0` representing the\n     * number of milliseconds to wait before sending a **note off** message. If invalid or left\n     * undefined, only a **note on** message will be sent.\n     *\n     * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n     * `1`). If the `rawAttack` option is also defined, it will have priority. An invalid velocity\n     * value will silently trigger the default of `0.5`.\n     *\n     * @param {number} [options.rawAttack=64] The attack velocity at which to play the note (between\n     * `0` and `127`). This has priority over the `attack` property. An invalid velocity value will\n     * silently trigger the default of 64.\n     *\n     * @param {number} [options.release=0.5] The velocity at which to release the note (between `0`\n     * and `1`). If the `rawRelease` option is also defined, it will have priority. An invalid\n     * velocity value will silently trigger the default of `0.5`. This is only used with the\n     * **note off** event triggered when `options.duration` is set.\n     *\n     * @param {number} [options.rawRelease=64] The velocity at which to release the note (between `0`\n     * and `127`). This has priority over the `release` property. An invalid velocity value will\n     * silently trigger the default of 64. This is only used with the **note off** event triggered\n     * when `options.duration` is set.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */ playNote(note, options = {}) {\n            // Send note on and, optionally, note off message (if duration is a positive number)\n            this.sendNoteOn(note, options);\n            const notes = Array.isArray(note) ? note : [\n                note\n            ];\n            for (let note of notes){\n                if (parseInt(note.duration) > 0) {\n                    const noteOffOptions = {\n                        time: (Utilities.toTimestamp(options.time) || wm.time) + parseInt(note.duration),\n                        release: note.release,\n                        rawRelease: note.rawRelease\n                    };\n                    this.sendNoteOff(note, noteOffOptions);\n                } else if (parseInt(options.duration) > 0) {\n                    const noteOffOptions = {\n                        time: (Utilities.toTimestamp(options.time) || wm.time) + parseInt(options.duration),\n                        release: options.release,\n                        rawRelease: options.rawRelease\n                    };\n                    this.sendNoteOff(note, noteOffOptions);\n                }\n            }\n            return this;\n        }\n        /**\n     * Sends a **note off** message for the specified notes on the channel. The first parameter is the\n     * note. It can be a single value or an array of the following valid values:\n     *\n     *  - A MIDI note number (integer between `0` and `127`)\n     *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n     *  - A [`Note`]{@link Note} object\n     *\n     * The execution of the **note off** command can be delayed by using the `time` property of the\n     * `options` parameter.\n     *\n     * When using [`Note`]{@link Note} objects, the release velocity defined in the\n     * [`Note`]{@link Note} objects has precedence over the one specified via the method's `options`\n     * parameter.\n     *\n     * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to stop. The notes can be\n     * specified by using a MIDI note number (0-127), a note identifier (e.g. C3, G#4, F-1, Db7), a\n     * [`Note`]{@link Note} object or an array of the previous types. When using a note name, octave\n     * range must be between -1 and 9. The lowest note is C-1 (MIDI note number 0) and the highest\n     * note is G9 (MIDI note number 127).\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @param {number} [options.release=0.5] The velocity at which to release the note\n     * (between `0` and `1`).  If the `rawRelease` option is also defined, `rawRelease` will have\n     * priority. An invalid velocity value will silently trigger the default of `0.5`.\n     *\n     * @param {number} [options.rawRelease=64] The velocity at which to release the note\n     * (between `0` and `127`). If the `release` option is also defined, `rawRelease` will have\n     * priority. An invalid velocity value will silently trigger the default of `64`.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */ sendNoteOff(note, options = {}) {\n            if (wm.validation) {\n                if (options.rawRelease != undefined && !(options.rawRelease >= 0 && options.rawRelease <= 127)) throw new RangeError(\"The 'rawRelease' option must be an integer between 0 and 127\");\n                if (options.release != undefined && !(options.release >= 0 && options.release <= 1)) throw new RangeError(\"The 'release' option must be an number between 0 and 1\");\n                 // Legacy compatibility warnings\n                if (options.rawVelocity) {\n                    options.rawRelease = options.velocity;\n                    console.warn(\"The 'rawVelocity' option is deprecated. Use 'rawRelease' instead.\");\n                }\n                if (options.velocity) {\n                    options.release = options.velocity;\n                    console.warn(\"The 'velocity' option is deprecated. Use 'attack' instead.\");\n                }\n            }\n            let nVelocity = 64;\n            if (options.rawRelease != undefined) nVelocity = options.rawRelease;\n            else if (!isNaN(options.release)) nVelocity = Math.round(options.release * 127);\n             // Plot total octave offset\n            const offset = wm.octaveOffset + this.output.octaveOffset + this.octaveOffset;\n            Utilities.buildNoteArray(note, {\n                rawRelease: parseInt(nVelocity)\n            }).forEach((n)=>{\n                this.send([\n                    (Enumerations.CHANNEL_MESSAGES.noteoff << 4) + (this.number - 1),\n                    n.getOffsetNumber(offset),\n                    n.rawRelease\n                ], {\n                    time: Utilities.toTimestamp(options.time)\n                });\n            });\n            return this;\n        }\n        /**\n     * Sends a **note off** message for the specified MIDI note number. The first parameter is the\n     * note to stop. It can be a single value or an array of the following valid values:\n     *\n     *  - A MIDI note number (integer between `0` and `127`)\n     *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n     *  - A [`Note`](Note) object\n     *\n     * The execution of the **note off** command can be delayed by using the `time` property of the\n     * `options` parameter.\n     *\n     * @param note {number|Note|string|number[]|Note[]|string[]} The note(s) to stop. The notes can be\n     * specified by using a MIDI note number (`0` - `127`), a note identifier (e.g. `C3`, `G#4`, `F-1`,\n     * `Db7`) or an array of the previous types. When using a note identifier, octave range must be\n     * between `-1` and `9`. The lowest note is `C-1` (MIDI note number `0`) and the highest note is\n     * `G9` (MIDI note number `127`).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number} [options.release=0.5] The velocity at which to release the note\n     * (between `0` and `1`).  If the `rawRelease` option is also defined, `rawRelease` will have\n     * priority. An invalid velocity value will silently trigger the default of `0.5`.\n     *\n     * @param {number} [options.rawRelease=64] The velocity at which to release the note\n     * (between `0` and `127`). If the `release` option is also defined, `rawRelease` will have\n     * priority. An invalid velocity value will silently trigger the default of `64`.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */ stopNote(note, options = {}) {\n            return this.sendNoteOff(note, options);\n        }\n        /**\n     * Sends a **note on** message for the specified note(s) on the channel. The first parameter is\n     * the note. It can be a single value or an array of the following valid values:\n     *\n     *  - A [`Note`]{@link Note} object\n     *  - A MIDI note number (integer between `0` and `127`)\n     *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n     *\n     *  When passing a [`Note`]{@link Note}object or a note name, the `octaveOffset` will be applied.\n     *  This is not the case when using a note number. In this case, we assume you know exactly which\n     *  MIDI note number should be sent out.\n     *\n     * The execution of the **note on** command can be delayed by using the `time` property of the\n     * `options` parameter.\n     *\n     * When using [`Note`]{@link Note} objects, the attack velocity defined in the\n     * [`Note`]{@link Note} objects has precedence over the one specified via the method's `options`\n     * parameter. Also, the `duration` is ignored. If you want to also send a **note off** message,\n     * use the [`playNote()`]{@link #playNote} method instead.\n     *\n     * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n     * functionally equivalent to a **note off** message.\n     *\n     * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n     * specified by using a MIDI note number (0-127), a note identifier (e.g. C3, G#4, F-1, Db7), a\n     * [`Note`]{@link Note} object or an array of the previous types.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n     * `1`).  If the `rawAttack` option is also defined, `rawAttack` will have priority. An invalid\n     * velocity value will silently trigger the default of `0.5`.\n     *\n     * @param {number} [options.rawAttack=64] The velocity at which to release the note (between `0`\n     * and `127`). If the `attack` option is also defined, `rawAttack` will have priority. An invalid\n     * velocity value will silently trigger the default of `64`.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */ sendNoteOn(note, options = {}) {\n            if (wm.validation) {\n                if (options.rawAttack != undefined && !(options.rawAttack >= 0 && options.rawAttack <= 127)) throw new RangeError(\"The 'rawAttack' option must be an integer between 0 and 127\");\n                if (options.attack != undefined && !(options.attack >= 0 && options.attack <= 1)) throw new RangeError(\"The 'attack' option must be an number between 0 and 1\");\n                 // Legacy compatibility warnings\n                if (options.rawVelocity) {\n                    options.rawAttack = options.velocity;\n                    options.rawRelease = options.release;\n                    console.warn(\"The 'rawVelocity' option is deprecated. Use 'rawAttack' or 'rawRelease'.\");\n                }\n                if (options.velocity) {\n                    options.attack = options.velocity;\n                    console.warn(\"The 'velocity' option is deprecated. Use 'attack' instead.\");\n                }\n            }\n            let nVelocity = 64;\n            if (options.rawAttack != undefined) nVelocity = options.rawAttack;\n            else if (!isNaN(options.attack)) nVelocity = Math.round(options.attack * 127);\n             // Plot total octave offset\n            const offset = wm.octaveOffset + this.output.octaveOffset + this.octaveOffset;\n            Utilities.buildNoteArray(note, {\n                rawAttack: nVelocity\n            }).forEach((n)=>{\n                this.send([\n                    (Enumerations.CHANNEL_MESSAGES.noteon << 4) + (this.number - 1),\n                    n.getOffsetNumber(offset),\n                    n.rawAttack\n                ], {\n                    time: Utilities.toTimestamp(options.time)\n                });\n            });\n            return this;\n        }\n        /**\n     * Sends a MIDI **channel mode** message. The channel mode message to send can be specified\n     * numerically or by using one of the following common names:\n     *\n     * |  Type                |Number| Shortcut Method                                               |\n     * | ---------------------|------|-------------------------------------------------------------- |\n     * | `allsoundoff`        | 120  | [`sendAllSoundOff()`]{@link #sendAllSoundOff}                 |\n     * | `resetallcontrollers`| 121  | [`sendResetAllControllers()`]{@link #sendResetAllControllers} |\n     * | `localcontrol`       | 122  | [`sendLocalControl()`]{@link #sendLocalControl}               |\n     * | `allnotesoff`        | 123  | [`sendAllNotesOff()`]{@link #sendAllNotesOff}                 |\n     * | `omnimodeoff`        | 124  | [`sendOmniMode(false)`]{@link #sendOmniMode}                  |\n     * | `omnimodeon`         | 125  | [`sendOmniMode(true)`]{@link #sendOmniMode}                   |\n     * | `monomodeon`         | 126  | [`sendPolyphonicMode(\"mono\")`]{@link #sendPolyphonicMode}     |\n     * | `polymodeon`         | 127  | [`sendPolyphonicMode(\"poly\")`]{@link #sendPolyphonicMode}     |\n     *\n     * **Note**: as you can see above, to make it easier, all channel mode messages also have a matching\n     * helper method.\n     *\n     * It should be noted that, per the MIDI specification, only `localcontrol` and `monomodeon` may\n     * require a value that's not zero. For that reason, the `value` parameter is optional and\n     * defaults to 0.\n     *\n     * @param {number|string} command The numerical identifier of the channel mode message (integer\n     * between `120` and `127`) or its name as a string.\n     *\n     * @param {number} [value=0] The value to send (integer between `0` - `127`).\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */ sendChannelMode(command, value = 0, options = {}) {\n            // Normalize command to integer\n            if (typeof command === \"string\") command = Enumerations.CHANNEL_MODE_MESSAGES[command];\n            if (wm.validation) {\n                if (command === undefined) throw new TypeError(\"Invalid channel mode message name or number.\");\n                if (isNaN(command) || !(command >= 120 && command <= 127)) throw new TypeError(\"Invalid channel mode message number.\");\n                if (isNaN(parseInt(value)) || value < 0 || value > 127) throw new RangeError(\"Value must be an integer between 0 and 127.\");\n            }\n            this.send([\n                (Enumerations.CHANNEL_MESSAGES.controlchange << 4) + (this.number - 1),\n                command,\n                value\n            ], {\n                time: Utilities.toTimestamp(options.time)\n            });\n            return this;\n        }\n        /**\n     * Sets OMNI mode to `\"on\"` or `\"off\"`. MIDI's OMNI mode causes the instrument to respond to\n     * messages from all channels.\n     *\n     * It should be noted that support for OMNI mode is not as common as it used to be.\n     *\n     * @param [state=true] {boolean} Whether to activate OMNI mode (`true`) or not (`false`).\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {TypeError} Invalid channel mode message name.\n     * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n     * @throws {RangeError} Value must be an integer between 0 and 127.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */ sendOmniMode(state, options = {}) {\n            if (state === undefined || state) this.sendChannelMode(\"omnimodeon\", 0, options);\n            else this.sendChannelMode(\"omnimodeoff\", 0, options);\n            return this;\n        }\n        /**\n     * Sends a MIDI **channel aftertouch** message. For key-specific aftertouch, you should instead\n     * use [`sendKeyAftertouch()`]{@link #sendKeyAftertouch}.\n     *\n     * @param [pressure] {number} The pressure level (between `0` and `1`). If the `rawValue` option\n     * is set to `true`, the pressure can be defined by using an integer between `0` and `127`.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n     * considered a float between `0` and `1.0` (default) or a raw integer between `0` and `127`.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     *\n     * @throws RangeError Invalid channel aftertouch value.\n     */ sendChannelAftertouch(pressure, options = {}) {\n            if (wm.validation) {\n                if (isNaN(parseFloat(pressure))) throw new RangeError(\"Invalid channel aftertouch value.\");\n                if (options.rawValue) {\n                    if (!(pressure >= 0 && pressure <= 127 && Number.isInteger(pressure))) throw new RangeError(\"Channel aftertouch raw value must be an integer between 0 and 127.\");\n                } else {\n                    if (!(pressure >= 0 && pressure <= 1)) throw new RangeError(\"Channel aftertouch value must be a float between 0 and 1.\");\n                }\n            }\n            this.send([\n                (Enumerations.CHANNEL_MESSAGES.channelaftertouch << 4) + (this.number - 1),\n                Math.round(pressure * 127)\n            ], {\n                time: Utilities.toTimestamp(options.time)\n            });\n            return this;\n        }\n        /**\n     * Sends a **master tuning** message. The value is decimal and must be larger than -65 semitones\n     * and smaller than 64 semitones.\n     *\n     * Because of the way the MIDI specification works, the decimal portion of the value will be\n     * encoded with a resolution of 14bit. The integer portion must be between -64 and 63\n     * inclusively. This function actually generates two MIDI messages: a **Master Coarse Tuning** and\n     * a **Master Fine Tuning** RPN messages.\n     *\n     * @param [value=0.0] {number} The desired decimal adjustment value in semitones (-65 < x < 64)\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {RangeError} The value must be a decimal number between larger than -65 and smaller\n     * than 64.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */ sendMasterTuning(value, options = {}) {\n            // @todo allow passing value as msb/lsb pair (the same as pitch bend range)\n            value = parseFloat(value) || 0.0;\n            if (wm.validation) {\n                if (!(value > -65 && value < 64)) throw new RangeError(\"The value must be a decimal number larger than -65 and smaller than 64.\");\n            }\n            let coarse = Math.floor(value) + 64;\n            let fine = value - Math.floor(value); // Calculate MSB and LSB for fine adjustment (14bit resolution)\n            fine = Math.round((fine + 1) / 2 * 16383);\n            let msb = fine >> 7 & 0x7F;\n            let lsb = fine & 0x7F;\n            this.sendRpnValue(\"channelcoarsetuning\", coarse, options);\n            this.sendRpnValue(\"channelfinetuning\", [\n                msb,\n                lsb\n            ], options);\n            return this;\n        }\n        /**\n     * Sends a **modulation depth range** message to adjust the depth of the modulation wheel's range.\n     * The range can be specified with the `semitones` parameter, the `cents` parameter or by\n     * specifying both parameters at the same time.\n     *\n     * @param {number} semitones The desired adjustment value in semitones (integer between 0 and\n     * 127).\n     *\n     * @param {number} [cents=0] The desired adjustment value in cents (integer between 0 and 127).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */ sendModulationRange(semitones, cents, options = {}) {\n            // @todo allow passing value as msb/lsb pair (the same as pitch bend range)\n            // when passing a single argument, semitones and cents shoud be combined\n            if (wm.validation) {\n                if (!Number.isInteger(semitones) || !(semitones >= 0 && semitones <= 127)) throw new RangeError(\"The semitones value must be an integer between 0 and 127.\");\n                if (!(cents == undefined) && (!Number.isInteger(cents) || !(cents >= 0 && cents <= 127))) throw new RangeError(\"If specified, the cents value must be an integer between 0 and 127.\");\n            } // Default value for cents\n            if (!(cents >= 0 && cents <= 127)) cents = 0;\n            this.sendRpnValue(\"modulationrange\", [\n                semitones,\n                cents\n            ], options);\n            return this;\n        }\n        /**\n     * Sets a non-registered parameter (NRPN) to the specified value. The NRPN is selected by passing\n     * in a two-position array specifying the values of the two control bytes. The value is specified\n     * by passing in a single integer (most cases) or an array of two integers.\n     *\n     * NRPNs are not standardized in any way. Each manufacturer is free to implement them any way\n     * they see fit. For example, according to the Roland GS specification, you can control the\n     * **vibrato rate** using NRPN (1, 8). Therefore, to set the **vibrato rate** value to **123** you\n     * would use:\n     *\n     * ```js\n     * WebMidi.outputs[0].channels[0].sendNrpnValue([1, 8], 123);\n     * ```\n     *\n     * In some rarer cases, you need to send two values with your NRPN messages. In such cases, you\n     * would use a 2-position array. For example, for its **ClockBPM** parameter (2, 63), Novation\n     * uses a 14-bit value that combines an MSB and an LSB (7-bit values). So, for example, if the\n     * value to send was 10, you could use:\n     *\n     * ```js\n     * WebMidi.outputs[0].channels[0].sendNrpnValue([2, 63], [0, 10]);\n     * ```\n     *\n     * For further implementation details, refer to the manufacturer's documentation.\n     *\n     * @param nrpn {number[]} A two-position array specifying the two control bytes (0x63,\n     * 0x62) that identify the non-registered parameter.\n     *\n     * @param [data=[]] {number|number[]} An integer or an array of integers with a length of 1 or 2\n     * specifying the desired data.\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {RangeError} The control value must be between 0 and 127.\n     * @throws {RangeError} The msb value must be between 0 and 127\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */ sendNrpnValue(nrpn, data, options = {}) {\n            data = [].concat(data);\n            if (wm.validation) {\n                if (!Array.isArray(nrpn) || !Number.isInteger(nrpn[0]) || !Number.isInteger(nrpn[1])) throw new TypeError(\"The specified NRPN is invalid.\");\n                if (!(nrpn[0] >= 0 && nrpn[0] <= 127)) throw new RangeError(\"The first byte of the NRPN must be between 0 and 127.\");\n                if (!(nrpn[1] >= 0 && nrpn[1] <= 127)) throw new RangeError(\"The second byte of the NRPN must be between 0 and 127.\");\n                data.forEach((value)=>{\n                    if (!(value >= 0 && value <= 127)) throw new RangeError(\"The data bytes of the NRPN must be between 0 and 127.\");\n                });\n            }\n            this._selectNonRegisteredParameter(nrpn, options);\n            this._setCurrentParameter(data, options);\n            this._deselectNonRegisteredParameter(options);\n            return this;\n        }\n        /**\n     * Sends a MIDI **pitch bend** message at the scheduled time. The resulting bend is relative to\n     * the pitch bend range that has been defined. The range can be set with\n     * [`sendPitchBendRange()`]{@link #sendPitchBendRange}. So, for example, if the pitch\n     * bend range has been set to 12 semitones, using a bend value of -1 will bend the note 1 octave\n     * below its nominal value.\n     *\n     * @param {number|number[]} [value] The intensity of the bend (between -1.0 and 1.0). A value of\n     * zero means no bend. If the `rawValue` option is set to `true`, the intensity of the bend can be\n     * defined by either using a single integer between 0 and 127 (MSB) or an array of two integers\n     * between 0 and 127 representing, respectively, the MSB (most significant byte) and the LSB\n     * (least significant byte). The MSB is expressed in semitones with `64` meaning no bend. A value\n     * lower than `64` bends downwards while a value higher than `64` bends upwards. The LSB is\n     * expressed in cents (1/100 of a semitone). An LSB of `64` also means no bend.\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n     * considered as a float between -1.0 and 1.0 (default) or as raw integer between 0 and 127 (or\n     * an array of 2 integers if using both MSB and LSB).\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */ sendPitchBend(value, options = {}) {\n            // @todo standardize the way msb/lsb are passed in\n            if (wm.validation) {\n                if (options.rawValue && Array.isArray(value)) {\n                    if (!(value[0] >= 0 && value[0] <= 127)) throw new RangeError(\"The pitch bend MSB must be an integer between 0 and 127.\");\n                    if (!(value[1] >= 0 && value[1] <= 127)) throw new RangeError(\"The pitch bend LSB must be an integer between 0 and 127.\");\n                } else if (options.rawValue && !Array.isArray(value)) {\n                    if (!(value >= 0 && value <= 127)) throw new RangeError(\"The pitch bend MSB must be an integer between 0 and 127.\");\n                } else {\n                    if (isNaN(value) || value === null) throw new RangeError(\"Invalid pitch bend value.\");\n                    if (!(value >= -1 && value <= 1)) throw new RangeError(\"The pitch bend value must be a float between -1 and 1.\");\n                }\n            }\n            let msb = 0;\n            let lsb = 0; // Calculate MSB and LSB for both scenarios\n            if (options.rawValue && Array.isArray(value)) {\n                msb = value[0];\n                lsb = value[1];\n            } else if (options.rawValue && !Array.isArray(value)) msb = value;\n            else {\n                const result = Utilities.fromFloatToMsbLsb((value + 1) / 2); // b/c value is -1 to 1\n                msb = result.msb;\n                lsb = result.lsb;\n            }\n            this.send([\n                (Enumerations.CHANNEL_MESSAGES.pitchbend << 4) + (this.number - 1),\n                lsb,\n                msb\n            ], {\n                time: Utilities.toTimestamp(options.time)\n            });\n            return this;\n        }\n        /**\n     * Sends a **pitch bend range** message at the scheduled time to adjust the range used by the\n     * pitch bend lever. The range is specified by using the `semitones` and `cents` parameters. For\n     * example, setting the `semitones` parameter to `12` means that the pitch bend range will be 12\n     * semitones above and below the nominal pitch.\n     *\n     * @param semitones {number} The desired adjustment value in semitones (between 0 and 127). While\n     * nothing imposes that in the specification, it is very common for manufacturers to limit the\n     * range to 2 octaves (-12 semitones to 12 semitones).\n     *\n     * @param [cents=0] {number} The desired adjustment value in cents (integer between 0-127).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {RangeError} The semitones value must be an integer between 0 and 127.\n     * @throws {RangeError} The cents value must be an integer between 0 and 127.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */ sendPitchBendRange(semitones, cents, options = {}) {\n            // @todo use single value as parameter or pair of msb/lsb\n            if (wm.validation) {\n                if (!Number.isInteger(semitones) || !(semitones >= 0 && semitones <= 127)) throw new RangeError(\"The semitones value must be an integer between 0 and 127.\");\n                if (!Number.isInteger(cents) || !(cents >= 0 && cents <= 127)) throw new RangeError(\"The cents value must be an integer between 0 and 127.\");\n            }\n            this.sendRpnValue(\"pitchbendrange\", [\n                semitones,\n                cents\n            ], options);\n            return this;\n        }\n        /**\n     * Sends a MIDI **program change** message at the scheduled time.\n     *\n     * @param [program=1] {number} The MIDI patch (program) number (integer between `0` and `127`).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index 1 is greater\n     * than 0xFF.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     *\n     */ sendProgramChange(program, options = {}) {\n            program = parseInt(program) || 0;\n            if (wm.validation) {\n                if (!(program >= 0 && program <= 127)) throw new RangeError(\"The program number must be between 0 and 127.\");\n            }\n            this.send([\n                (Enumerations.CHANNEL_MESSAGES.programchange << 4) + (this.number - 1),\n                program\n            ], {\n                time: Utilities.toTimestamp(options.time)\n            });\n            return this;\n        }\n        /**\n     * Sets the specified MIDI registered parameter to the desired value. The value is defined with\n     * up to two bytes of data (msb, lsb) that each can go from 0 to 127.\n     *\n     * MIDI\n     * [registered parameters](https://www.midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2)\n     * extend the original list of control change messages. The MIDI 1.0 specification lists only a\n     * limited number of them:\n     *\n     * | Numbers      | Function                 |\n     * |--------------|--------------------------|\n     * | (0x00, 0x00) | `pitchbendrange`         |\n     * | (0x00, 0x01) | `channelfinetuning`      |\n     * | (0x00, 0x02) | `channelcoarsetuning`    |\n     * | (0x00, 0x03) | `tuningprogram`          |\n     * | (0x00, 0x04) | `tuningbank`             |\n     * | (0x00, 0x05) | `modulationrange`        |\n     * | (0x3D, 0x00) | `azimuthangle`           |\n     * | (0x3D, 0x01) | `elevationangle`         |\n     * | (0x3D, 0x02) | `gain`                   |\n     * | (0x3D, 0x03) | `distanceratio`          |\n     * | (0x3D, 0x04) | `maximumdistance`        |\n     * | (0x3D, 0x05) | `maximumdistancegain`    |\n     * | (0x3D, 0x06) | `referencedistanceratio` |\n     * | (0x3D, 0x07) | `panspreadangle`         |\n     * | (0x3D, 0x08) | `rollangle`              |\n     *\n     * Note that the **Tuning Program** and **Tuning Bank** parameters are part of the *MIDI Tuning\n     * Standard*, which is not widely implemented.\n     *\n     * @param rpn {string|number[]} A string identifying the parameter's name (see above) or a\n     * two-position array specifying the two control bytes (e.g. `[0x65, 0x64]`) that identify the\n     * registered parameter.\n     *\n     * @param [data=[]] {number|number[]} An single integer or an array of integers with a maximum\n     * length of 2 specifying the desired data.\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */ sendRpnValue(rpn, data, options = {}) {\n            if (!Array.isArray(rpn)) rpn = Enumerations.REGISTERED_PARAMETERS[rpn];\n            if (wm.validation) {\n                if (!Number.isInteger(rpn[0]) || !Number.isInteger(rpn[1])) throw new TypeError(\"The specified NRPN is invalid.\");\n                if (!(rpn[0] >= 0 && rpn[0] <= 127)) throw new RangeError(\"The first byte of the RPN must be between 0 and 127.\");\n                if (!(rpn[1] >= 0 && rpn[1] <= 127)) throw new RangeError(\"The second byte of the RPN must be between 0 and 127.\");\n                [].concat(data).forEach((value)=>{\n                    if (!(value >= 0 && value <= 127)) throw new RangeError(\"The data bytes of the RPN must be between 0 and 127.\");\n                });\n            }\n            this._selectRegisteredParameter(rpn, options);\n            this._setCurrentParameter(data, options);\n            this._deselectRegisteredParameter(options);\n            return this;\n        }\n        /**\n     * Sets the MIDI tuning bank to use. Note that the **Tuning Bank** parameter is part of the\n     * *MIDI Tuning Standard*, which is not widely implemented.\n     *\n     * @param value {number} The desired tuning bank (integer between `0` and `127`).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {RangeError} The bank value must be between 0 and 127.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */ sendTuningBank(value, options = {}) {\n            if (wm.validation) {\n                if (!Number.isInteger(value) || !(value >= 0 && value <= 127)) throw new RangeError(\"The tuning bank number must be between 0 and 127.\");\n            }\n            this.sendRpnValue(\"tuningbank\", value, options);\n            return this;\n        }\n        /**\n     * Sets the MIDI tuning program to use. Note that the **Tuning Program** parameter is part of the\n     * *MIDI Tuning Standard*, which is not widely implemented.\n     *\n     * @param value {number} The desired tuning program (integer between `0` and `127`).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {RangeError} The program value must be between 0 and 127.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */ sendTuningProgram(value, options = {}) {\n            if (wm.validation) {\n                if (!Number.isInteger(value) || !(value >= 0 && value <= 127)) throw new RangeError(\"The tuning program number must be between 0 and 127.\");\n            }\n            this.sendRpnValue(\"tuningprogram\", value, options);\n            return this;\n        }\n        /**\n     * Turns local control on or off. Local control is usually enabled by default. If you disable it,\n     * the instrument will no longer trigger its own sounds. It will only send the MIDI messages to\n     * its out port.\n     *\n     * @param [state=false] {boolean} Whether to activate local control (`true`) or disable it\n     * (`false`).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */ sendLocalControl(state, options = {}) {\n            if (state) return this.sendChannelMode(\"localcontrol\", 127, options);\n            else return this.sendChannelMode(\"localcontrol\", 0, options);\n        }\n        /**\n     * Sends an **all notes off** channel mode message. This will make all currently playing notes\n     * fade out just as if their key had been released. This is different from the\n     * [`sendAllSoundOff()`]{@link #sendAllSoundOff} method which mutes all sounds immediately.\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */ sendAllNotesOff(options = {}) {\n            return this.sendChannelMode(\"allnotesoff\", 0, options);\n        }\n        /**\n     * Sends an **all sound off** channel mode message. This will silence all sounds playing on that\n     * channel but will not prevent new sounds from being triggered.\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */ sendAllSoundOff(options = {}) {\n            return this.sendChannelMode(\"allsoundoff\", 0, options);\n        }\n        /**\n     * Sends a **reset all controllers** channel mode message. This resets all controllers, such as\n     * the pitch bend, to their default value.\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */ sendResetAllControllers(options = {}) {\n            return this.sendChannelMode(\"resetallcontrollers\", 0, options);\n        }\n        /**\n     * Sets the polyphonic mode. In `\"poly\"` mode (usually the default), multiple notes can be played\n     * and heard at the same time. In `\"mono\"` mode, only one note will be heard at once even if\n     * multiple notes are being played.\n     *\n     * @param {string} [mode=poly] The mode to use: `\"mono\"` or `\"poly\"`.\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */ sendPolyphonicMode(mode, options = {}) {\n            if (mode === \"mono\") return this.sendChannelMode(\"monomodeon\", 0, options);\n            else return this.sendChannelMode(\"polymodeon\", 0, options);\n        }\n        /**\n     * An integer to offset the reported octave of outgoing note-specific messages (`noteon`,\n     * `noteoff` and `keyaftertouch`). By default, middle C (MIDI note number 60) is placed on the 4th\n     * octave (C4).\n     *\n     * Note that this value is combined with the global offset value defined in\n     * [`WebMidi.octaveOffset`](WebMidi#octaveOffset) and with the parent value defined in\n     * [`Output.octaveOffset`]{@link Output#octaveOffset}.\n     *\n     * @type {number}\n     *\n     * @since 3.0\n     */ get octaveOffset() {\n            return this._octaveOffset;\n        }\n        set octaveOffset(value) {\n            if (this.validation) {\n                value = parseInt(value);\n                if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n            }\n            this._octaveOffset = value;\n        }\n        /**\n     * The parent [`Output`]{@link Output} this channel belongs to.\n     * @type {Output}\n     * @since 3.0\n     */ get output() {\n            return this._output;\n        }\n        /**\n     * This channel's MIDI number (`1` - `16`).\n     * @type {number}\n     * @since 3.0\n     */ get number() {\n            return this._number;\n        }\n    }\n    /**\n   * The `Output` class represents a single MIDI output port (not to be confused with a MIDI channel).\n   * A port is made available by a MIDI device. A MIDI device can advertise several input and output\n   * ports. Each port has 16 MIDI channels which can be accessed via the [`channels`](#channels)\n   * property.\n   *\n   * The `Output` object is automatically instantiated by the library according to the host's MIDI\n   * subsystem and should not be directly instantiated.\n   *\n   * You can access all available `Output` objects by referring to the\n   * [`WebMidi.outputs`](WebMidi#outputs) array or by using methods such as\n   * [`WebMidi.getOutputByName()`](WebMidi#getOutputByName) or\n   * [`WebMidi.getOutputById()`](WebMidi#getOutputById).\n   *\n   * @fires Output#opened\n   * @fires Output#disconnected\n   * @fires Output#closed\n   *\n   * @extends EventEmitter\n   * @license Apache-2.0\n   */ class Output extends EventEmitter {\n        /**\n     * Creates an `Output` object.\n     *\n     * @param {MIDIOutput} midiOutput [`MIDIOutput`](https://developer.mozilla.org/en-US/docs/Web/API/MIDIOutput)\n     * object as provided by the MIDI subsystem.\n     */ constructor(midiOutput){\n            super();\n            /**\n       * A reference to the `MIDIOutput` object\n       * @type {MIDIOutput}\n       * @private\n       */ this._midiOutput = midiOutput;\n            /**\n       * @type {number}\n       * @private\n       */ this._octaveOffset = 0;\n            /**\n       * Array containing the 16 [`OutputChannel`]{@link OutputChannel} objects available provided by\n       * this `Output`. The channels are numbered 1 through 16.\n       *\n       * @type {OutputChannel[]}\n       */ this.channels = [];\n            for(let i = 1; i <= 16; i++)this.channels[i] = new OutputChannel(this, i);\n            this._midiOutput.onstatechange = this._onStateChange.bind(this);\n        }\n        /**\n     * Destroys the `Output`. All listeners are removed, all channels are destroyed and the MIDI\n     * subsystem is unlinked.\n     * @returns {Promise<void>}\n     */ async destroy() {\n            this.removeListener();\n            this.channels.forEach((ch)=>ch.destroy());\n            this.channels = [];\n            if (this._midiOutput) this._midiOutput.onstatechange = null;\n            await this.close();\n            this._midiOutput = null;\n        }\n        /**\n     * @private\n     */ _onStateChange(e) {\n            let event = {\n                timestamp: wm.time\n            };\n            if (e.port.connection === \"open\") {\n                /**\n         * Event emitted when the {@link Output} has been opened by calling the\n         * [open()]{@link Output#open} method.\n         *\n         * @event Output#opened\n         * @type {object}\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         * @property {string} type `\"opened\"`\n         * @property {Output} target The object to which the listener was originally added (`Output`).\n         * @property {Output} port The port that was opened\n         */ event.type = \"opened\";\n                event.target = this;\n                event.port = event.target; // for consistency\n                this.emit(\"opened\", event);\n            } else if (e.port.connection === \"closed\" && e.port.state === \"connected\") {\n                /**\n         * Event emitted when the {@link Output} has been closed by calling the\n         * [close()]{@link Output#close} method.\n         *\n         * @event Output#closed\n         * @type {object}\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         * @property {string} type `\"closed\"`\n         * @property {Output} target The object to which the listener was originally added (`Output`).\n         * @property {Output} port The port that was closed\n         */ event.type = \"closed\";\n                event.target = this;\n                event.port = event.target; // for consistency\n                this.emit(\"closed\", event);\n            } else if (e.port.connection === \"closed\" && e.port.state === \"disconnected\") {\n                /**\n         * Event emitted when the {@link Output} becomes unavailable. This event is typically fired\n         * when the MIDI device is unplugged.\n         *\n         * @event Output#disconnected\n         * @type {object}\n         * @property {number} timestamp The moment (DOMHighResTimeStamp0 when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         * @property {string} type `\"disconnected\"`\n         * @property {Output} target The object to which the listener was originally added (`Output`).\n         * @property {object} port Object with properties describing the {@link Output} that was\n         * disconnected. This is not the actual `Output` as it is no longer available.\n         */ event.type = \"disconnected\";\n                event.port = {\n                    connection: e.port.connection,\n                    id: e.port.id,\n                    manufacturer: e.port.manufacturer,\n                    name: e.port.name,\n                    state: e.port.state,\n                    type: e.port.type\n                };\n                this.emit(\"disconnected\", event);\n            } else if (e.port.connection === \"pending\" && e.port.state === \"disconnected\") ;\n            else console.warn(\"This statechange event was not caught:\", e.port.connection, e.port.state);\n        }\n        /**\n     * Opens the output for usage. When the library is enabled, all ports are automatically opened.\n     * This method is only useful for ports that have been manually closed.\n     *\n     * @returns {Promise<Output>} The promise is fulfilled with the `Output` object.\n     */ async open() {\n            // Explicitly opens the port for usage. This is not mandatory. When the port is not explicitly\n            // opened, it is implicitly opened (asynchronously) when calling `send()` on the `MIDIOutput`.\n            // We do it explicitly so that 'connected' events are dispatched immediately and we are ready to\n            // send.\n            try {\n                await this._midiOutput.open();\n                return Promise.resolve(this);\n            } catch (err) {\n                return Promise.reject(err);\n            }\n        }\n        /**\n     * Closes the output connection. When an output is closed, it cannot be used to send MIDI messages\n     * until the output is opened again by calling [`open()`]{@link #open}. You can check\n     * the connection status by looking at the [`connection`]{@link #connection} property.\n     *\n     * @returns {Promise<void>}\n     */ async close() {\n            // We close the port. This triggers a 'statechange' event which we listen to to re-trigger the\n            // 'closed' event.\n            if (this._midiOutput) await this._midiOutput.close();\n            else await Promise.resolve();\n        }\n        /**\n     * Sends a MIDI message on the MIDI output port. If no time is specified, the message will be\n     * sent immediately. The message should be an array of 8 bit unsigned integers (0-225), a\n     * [`Uint8Array`]{@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array}\n     * object or a [`Message`](Message) object.\n     *\n     * It is usually not necessary to use this method directly as you can use one of the simpler\n     * helper methods such as [`playNote()`](#playNote), [`stopNote()`](#stopNote),\n     * [`sendControlChange()`](#sendControlChange), etc.\n     *\n     * Details on the format of MIDI messages are available in the summary of\n     * [MIDI messages]{@link https://www.midi.org/specifications-old/item/table-1-summary-of-midi-message}\n     * from the MIDI Manufacturers Association.\n     *\n     * @param message {number[]|Uint8Array|Message} An array of 8bit unsigned integers, a `Uint8Array`\n     * object (not available in Node.js) containing the message bytes or a `Message` object.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {RangeError} The first byte (status) must be an integer between 128 and 255.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     *\n     * @license Apache-2.0\n     */ send(message, options = {\n            time: 0\n        }, legacy = 0) {\n            // If a Message object is passed in we extract the message data (the jzz plugin used on Node.js\n            // does not support using Uint8Array).\n            if (message instanceof Message) message = Utilities.isNode ? message.data : message.rawData;\n             // If the data is a Uint8Array and we are on Node, we must convert it to array so it works with\n            // the jzz module.\n            if (message instanceof Uint8Array && Utilities.isNode) message = Array.from(message);\n             // Validation\n            if (wm.validation) {\n                // If message is neither an array nor a Uint8Array, then we are in legacy mode\n                if (!Array.isArray(message) && !(message instanceof Uint8Array)) {\n                    message = [\n                        message\n                    ];\n                    if (Array.isArray(options)) message = message.concat(options);\n                    options = isNaN(legacy) ? {\n                        time: 0\n                    } : {\n                        time: legacy\n                    };\n                }\n                if (!(parseInt(message[0]) >= 128 && parseInt(message[0]) <= 255)) throw new RangeError(\"The first byte (status) must be an integer between 128 and 255.\");\n                message.slice(1).forEach((value)=>{\n                    value = parseInt(value);\n                    if (!(value >= 0 && value <= 255)) throw new RangeError(\"Data bytes must be integers between 0 and 255.\");\n                });\n                if (!options) options = {\n                    time: 0\n                };\n            } // Send message and return `Output` for chaining\n            this._midiOutput.send(message, Utilities.toTimestamp(options.time));\n            return this;\n        }\n        /**\n     * Sends a MIDI [**system exclusive**]{@link\n      * https://www.midi.org/specifications-old/item/table-4-universal-system-exclusive-messages}\n     * (*sysex*) message. There are two categories of system exclusive messages: manufacturer-specific\n     * messages and universal messages. Universal messages are further divided into three subtypes:\n     *\n     *   * Universal non-commercial (for research and testing): `0x7D`\n     *   * Universal non-realtime: `0x7E`\n     *   * Universal realtime: `0x7F`\n     *\n     * The method's first parameter (`identification`) identifies the type of message. If the value of\n     * `identification` is `0x7D` (125), `0x7E` (126) or `0x7F` (127), the message will be identified\n     * as a **universal non-commercial**, **universal non-realtime** or **universal realtime** message\n     * (respectively).\n     *\n     * If the `identification` value is an array or an integer between 0 and 124, it will be used to\n     * identify the manufacturer targeted by the message. The *MIDI Manufacturers Association*\n     * maintains a full list of\n     * [Manufacturer ID Numbers](https://www.midi.org/specifications-old/item/manufacturer-id-numbers).\n     *\n     * The `data` parameter should only contain the data of the message. When sending out the actual\n     * MIDI message, WEBMIDI.js will automatically prepend the data with the **sysex byte** (`0xF0`)\n     * and the identification byte(s). It will also automatically terminate the message with the\n     * **sysex end byte** (`0xF7`).\n     *\n     * To use the `sendSysex()` method, system exclusive message support must have been enabled. To\n     * do so, you must set the `sysex` option to `true` when calling\n     * [`WebMidi.enable()`]{@link WebMidi#enable}:\n     *\n     * ```js\n     * WebMidi.enable({sysex: true})\n     *   .then(() => console.log(\"System exclusive messages are enabled\");\n     * ```\n     *\n     * ##### Examples of manufacturer-specific system exclusive messages\n     *\n     * If you want to send a sysex message to a Korg device connected to the first output, you would\n     * use the following code:\n     *\n     * ```js\n     * WebMidi.outputs[0].sendSysex(0x42, [0x1, 0x2, 0x3, 0x4, 0x5]);\n     * ```\n     * In this case `0x42` is the ID of the manufacturer (Korg) and `[0x1, 0x2, 0x3, 0x4, 0x5]` is the\n     * data being sent.\n     *\n     * The parameters can be specified using any number notation (decimal, hex, binary, etc.).\n     * Therefore, the code above is equivalent to this code:\n     *\n     * ```js\n     * WebMidi.outputs[0].sendSysex(66, [1, 2, 3, 4, 5]);\n     * ```\n     *\n     * Some manufacturers are identified using 3 bytes. In this case, you would use a 3-position array\n     * as the first parameter. For example, to send the same sysex message to a\n     * *Native Instruments* device:\n     *\n     * ```js\n     * WebMidi.outputs[0].sendSysex([0x00, 0x21, 0x09], [0x1, 0x2, 0x3, 0x4, 0x5]);\n     * ```\n     *\n     * There is no limit for the length of the data array. However, it is generally suggested to keep\n     * system exclusive messages to 64Kb or less.\n     *\n     * ##### Example of universal system exclusive message\n     *\n     * If you want to send a universal sysex message, simply assign the correct identification number\n     * in the first parameter. Number `0x7D` (125) is for non-commercial, `0x7E` (126) is for\n     * non-realtime and `0x7F` (127) is for realtime.\n     *\n     * So, for example, if you wanted to send an identity request non-realtime message (`0x7E`), you\n     * could use the following:\n     *\n     * ```js\n     * WebMidi.outputs[0].sendSysex(0x7E, [0x7F, 0x06, 0x01]);\n     * ```\n     *\n     * For more details on the format of universal messages, consult the list of\n     * [universal sysex messages](https://www.midi.org/specifications-old/item/table-4-universal-system-exclusive-messages).\n     *\n     * @param {number|number[]} identification An unsigned integer or an array of three unsigned\n     * integers between `0` and `127` that either identify the manufacturer or sets the message to be\n     * a **universal non-commercial message** (`0x7D`), a **universal non-realtime message** (`0x7E`)\n     * or a **universal realtime message** (`0x7F`). The *MIDI Manufacturers Association* maintains a\n     * full list of\n     * [Manufacturer ID Numbers](https://www.midi.org/specifications-old/item/manufacturer-id-numbers).\n     *\n     * @param {number[]|Uint8Array} [data] A `Uint8Array` or an array of unsigned integers between `0`\n     * and `127`. This is the data you wish to transfer.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {DOMException} Failed to execute 'send' on 'MIDIOutput': System exclusive message is\n     * not allowed.\n     *\n     * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index x is greater\n     * than 0xFF.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */ sendSysex(identification, data = [], options = {}) {\n            identification = [].concat(identification); // Check if data is Uint8Array\n            if (data instanceof Uint8Array) {\n                const merged = new Uint8Array(1 + identification.length + data.length + 1);\n                merged[0] = Enumerations.SYSTEM_MESSAGES.sysex;\n                merged.set(Uint8Array.from(identification), 1);\n                merged.set(data, 1 + identification.length);\n                merged[merged.length - 1] = Enumerations.SYSTEM_MESSAGES.sysexend;\n                this.send(merged, {\n                    time: options.time\n                });\n            } else {\n                const merged = identification.concat(data, Enumerations.SYSTEM_MESSAGES.sysexend);\n                this.send([\n                    Enumerations.SYSTEM_MESSAGES.sysex\n                ].concat(merged), {\n                    time: options.time\n                });\n            }\n            return this;\n        }\n        /**\n     * Clears all messages that have been queued but not yet delivered.\n     *\n     * **Warning**: this method has been defined in the specification but has not been implemented\n     * yet. As soon as browsers implement it, it will work.\n     *\n     * You can check out the current status of this feature for Chromium (Chrome) here:\n     * https://bugs.chromium.org/p/chromium/issues/detail?id=471798\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */ clear() {\n            if (this._midiOutput.clear) this._midiOutput.clear();\n            else if (wm.validation) console.warn(\"The 'clear()' method has not yet been implemented in your environment.\");\n            return this;\n        }\n        /**\n     * Sends a MIDI **timecode quarter frame** message. Please note that no processing is being done\n     * on the data. It is up to the developer to format the data according to the\n     * [MIDI Timecode](https://en.wikipedia.org/wiki/MIDI_timecode) format.\n     *\n     * @param value {number} The quarter frame message content (integer between 0 and 127).\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */ sendTimecodeQuarterFrame(value, options = {}) {\n            if (wm.validation) {\n                value = parseInt(value);\n                if (isNaN(value) || !(value >= 0 && value <= 127)) throw new RangeError(\"The value must be an integer between 0 and 127.\");\n            }\n            this.send([\n                Enumerations.SYSTEM_MESSAGES.timecode,\n                value\n            ], {\n                time: options.time\n            });\n            return this;\n        }\n        /**\n     * Sends a **song position** MIDI message. The value is expressed in MIDI beats (between `0` and\n     * `16383`) which are 16th note. Position `0` is always the start of the song.\n     *\n     * @param {number} [value=0] The MIDI beat to cue to (integer between `0` and `16383`).\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     *\n     * @since 3.0.0\n     */ sendSongPosition(value = 0, options = {}) {\n            // @todo allow passing in 2-entries array for msb/lsb\n            value = Math.floor(value) || 0;\n            var msb = value >> 7 & 0x7F;\n            var lsb = value & 0x7F;\n            this.send([\n                Enumerations.SYSTEM_MESSAGES.songposition,\n                msb,\n                lsb\n            ], {\n                time: options.time\n            });\n            return this;\n        }\n        /**\n     * Sends a **song select** MIDI message.\n     *\n     * @param {number} [value=0] The number of the song to select (integer between `0` and `127`).\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws The song number must be between 0 and 127.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     *\n     * @since 3.0.0\n     */ sendSongSelect(value = 0, options = {}) {\n            if (wm.validation) {\n                value = parseInt(value);\n                if (isNaN(value) || !(value >= 0 && value <= 127)) throw new RangeError(\"The program value must be between 0 and 127\");\n            }\n            this.send([\n                Enumerations.SYSTEM_MESSAGES.songselect,\n                value\n            ], {\n                time: options.time\n            });\n            return this;\n        }\n        /**\n     * Sends a MIDI **tune request** real-time message.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     *\n     * @since 3.0.0\n     */ sendTuneRequest(options = {}) {\n            this.send([\n                Enumerations.SYSTEM_MESSAGES.tunerequest\n            ], {\n                time: options.time\n            });\n            return this;\n        }\n        /**\n     * Sends a MIDI **clock** real-time message. According to the standard, there are 24 MIDI clocks\n     * for every quarter note.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */ sendClock(options = {}) {\n            this.send([\n                Enumerations.SYSTEM_MESSAGES.clock\n            ], {\n                time: options.time\n            });\n            return this;\n        }\n        /**\n     * Sends a **start** real-time message. A MIDI Start message starts the playback of the current\n     * song at beat 0. To start playback elsewhere in the song, use the\n     * [`sendContinue()`]{@link #sendContinue} method.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */ sendStart(options = {}) {\n            this.send([\n                Enumerations.SYSTEM_MESSAGES.start\n            ], {\n                time: options.time\n            });\n            return this;\n        }\n        /**\n     * Sends a **continue** real-time message. This resumes song playback where it was previously\n     * stopped or where it was last cued with a song position message. To start playback from the\n     * start, use the [`sendStart()`]{@link Output#sendStart}` method.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */ sendContinue(options = {}) {\n            this.send([\n                Enumerations.SYSTEM_MESSAGES.continue\n            ], {\n                time: options.time\n            });\n            return this;\n        }\n        /**\n     * Sends a **stop** real-time message. This tells the device connected to this output to stop\n     * playback immediately (or at the scheduled time, if specified).\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */ sendStop(options = {}) {\n            this.send([\n                Enumerations.SYSTEM_MESSAGES.stop\n            ], {\n                time: options.time\n            });\n            return this;\n        }\n        /**\n     * Sends an **active sensing** real-time message. This tells the device connected to this port\n     * that the connection is still good. Active sensing messages are often sent every 300 ms if there\n     * was no other activity on the MIDI port.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */ sendActiveSensing(options = {}) {\n            this.send([\n                Enumerations.SYSTEM_MESSAGES.activesensing\n            ], {\n                time: options.time\n            });\n            return this;\n        }\n        /**\n     * Sends a **reset** real-time message. This tells the device connected to this output that it\n     * should reset itself to a default state.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */ sendReset(options = {}) {\n            this.send([\n                Enumerations.SYSTEM_MESSAGES.reset\n            ], {\n                time: options.time\n            });\n            return this;\n        }\n        /**\n     * @private\n     * @deprecated since version 3.0\n     */ sendTuningRequest(options = {}) {\n            if (wm.validation) console.warn(\"The sendTuningRequest() method has been deprecated. Use sendTuningRequest() instead.\");\n            return this.sendTuneRequest(options);\n        }\n        /**\n     * Sends a MIDI **key aftertouch** message to the specified channel(s) at the scheduled time. This\n     * is a key-specific aftertouch. For a channel-wide aftertouch message, use\n     * [`setChannelAftertouch()`]{@link #setChannelAftertouch}.\n     *\n     * @param note {number|Note|string|number[]|Note[]|string[]} The note(s) for which you are sending\n     * an aftertouch value. The notes can be specified by using a MIDI note number (`0` - `127`), a\n     * [`Note`](Note) object, a note identifier (e.g. `C3`, `G#4`, `F-1`, `Db7`) or an array of the\n     * previous types. When using a note identifier, octave range must be between `-1` and `9`. The\n     * lowest note is `C-1` (MIDI note number `0`) and the highest note is `G9` (MIDI note number\n     * `127`).\n     *\n     * @param [pressure=0.5] {number} The pressure level (between 0 and 1). An invalid pressure value\n     * will silently trigger the default behaviour. If the `rawValue` option is set to `true`, the\n     * pressure can be defined by using an integer between 0 and 127.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n     * considered a float between `0` and `1.0` (default) or a raw integer between `0` and `127`.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @return {Output} Returns the `Output` object so methods can be chained.\n     *\n     * @since 3.0.0\n     */ sendKeyAftertouch(note, pressure, options = {}) {\n            if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n            Utilities.sanitizeChannels(options.channels).forEach((ch)=>{\n                this.channels[ch].sendKeyAftertouch(note, pressure, options);\n            });\n            return this;\n        }\n        /**\n     * Sends a MIDI **control change** message to the specified channel(s) at the scheduled time. The\n     * control change message to send can be specified numerically (0-127) or by using one of the\n     * following common names:\n     *\n     * | Number | Name                          |\n     * |--------|-------------------------------|\n     * | 0      |`bankselectcoarse`             |\n     * | 1      |`modulationwheelcoarse`        |\n     * | 2      |`breathcontrollercoarse`       |\n     * | 4      |`footcontrollercoarse`         |\n     * | 5      |`portamentotimecoarse`         |\n     * | 6      |`dataentrycoarse`              |\n     * | 7      |`volumecoarse`                 |\n     * | 8      |`balancecoarse`                |\n     * | 10     |`pancoarse`                    |\n     * | 11     |`expressioncoarse`             |\n     * | 12     |`effectcontrol1coarse`         |\n     * | 13     |`effectcontrol2coarse`         |\n     * | 18     |`generalpurposeslider3`        |\n     * | 19     |`generalpurposeslider4`        |\n     * | 32     |`bankselectfine`               |\n     * | 33     |`modulationwheelfine`          |\n     * | 34     |`breathcontrollerfine`         |\n     * | 36     |`footcontrollerfine`           |\n     * | 37     |`portamentotimefine`           |\n     * | 38     |`dataentryfine`                |\n     * | 39     |`volumefine`                   |\n     * | 40     |`balancefine`                  |\n     * | 42     |`panfine`                      |\n     * | 43     |`expressionfine`               |\n     * | 44     |`effectcontrol1fine`           |\n     * | 45     |`effectcontrol2fine`           |\n     * | 64     |`holdpedal`                    |\n     * | 65     |`portamento`                   |\n     * | 66     |`sustenutopedal`               |\n     * | 67     |`softpedal`                    |\n     * | 68     |`legatopedal`                  |\n     * | 69     |`hold2pedal`                   |\n     * | 70     |`soundvariation`               |\n     * | 71     |`resonance`                    |\n     * | 72     |`soundreleasetime`             |\n     * | 73     |`soundattacktime`              |\n     * | 74     |`brightness`                   |\n     * | 75     |`soundcontrol6`                |\n     * | 76     |`soundcontrol7`                |\n     * | 77     |`soundcontrol8`                |\n     * | 78     |`soundcontrol9`                |\n     * | 79     |`soundcontrol10`               |\n     * | 80     |`generalpurposebutton1`        |\n     * | 81     |`generalpurposebutton2`        |\n     * | 82     |`generalpurposebutton3`        |\n     * | 83     |`generalpurposebutton4`        |\n     * | 91     |`reverblevel`                  |\n     * | 92     |`tremololevel`                 |\n     * | 93     |`choruslevel`                  |\n     * | 94     |`celestelevel`                 |\n     * | 95     |`phaserlevel`                  |\n     * | 96     |`dataincrement`                |\n     * | 97     |`datadecrement`                |\n     * | 98     |`nonregisteredparametercoarse` |\n     * | 99     |`nonregisteredparameterfine`   |\n     * | 100    |`registeredparametercoarse`    |\n     * | 101    |`registeredparameterfine`      |\n     * | 120    |`allsoundoff`                  |\n     * | 121    |`resetallcontrollers`          |\n     * | 122    |`localcontrol`                 |\n     * | 123    |`allnotesoff`                  |\n     * | 124    |`omnimodeoff`                  |\n     * | 125    |`omnimodeon`                   |\n     * | 126    |`monomodeon`                   |\n     * | 127    |`polymodeon`                   |\n     *\n     * Note: as you can see above, not all control change message have a matching name. This does not\n     * mean you cannot use the others. It simply means you will need to use their number (`0` - `127`)\n     * instead of their name. While you can still use them, numbers `120` to `127` are usually\n     * reserved for *channel mode* messages. See [`sendChannelMode()`]{@link #sendChannelMode} method\n     * for more info.\n     *\n     * To view a list of all available **control change** messages, please consult [Table 3 - Control\n     * Change Messages](https://www.midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2)\n     * from the MIDI specification.\n     *\n     * @param controller {number|string} The MIDI controller name or number (0-127).\n     *\n     * @param [value=0] {number} The value to send (0-127).\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {RangeError} Controller numbers must be between 0 and 127.\n     * @throws {RangeError} Invalid controller name.\n     *\n     * @return {Output} Returns the `Output` object so methods can be chained.\n     */ sendControlChange(controller, value, options = {}, legacy = {}) {\n            if (wm.validation) // Legacy compatibility\n            {\n                if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n                    const channels = options;\n                    options = legacy;\n                    options.channels = channels;\n                    if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n                }\n            }\n            if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n            Utilities.sanitizeChannels(options.channels).forEach((ch)=>{\n                this.channels[ch].sendControlChange(controller, value, options);\n            });\n            return this;\n        }\n        /**\n     * Sends a **pitch bend range** message to the specified channel(s) at the scheduled time so that\n     * they adjust the range used by their pitch bend lever. The range is specified by using the\n     * `semitones` and `cents` parameters. For example, setting the `semitones` parameter to `12`\n     * means that the pitch bend range will be 12 semitones above and below the nominal pitch.\n     *\n     * @param {number} [semitones=0] The desired adjustment value in semitones (between `0` and `127`).\n     * While nothing imposes that in the specification, it is very common for manufacturers to limit\n     * the range to 2 octaves (-12 semitones to 12 semitones).\n     *\n     * @param {number} [cents=0] The desired adjustment value in cents (integer between `0` and\n     * `127`).\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {RangeError} The msb value must be between 0 and 127.\n     * @throws {RangeError} The lsb value must be between 0 and 127.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     *\n     * @since 3.0.0\n     */ sendPitchBendRange(semitones = 0, cents = 0, options = {}) {\n            if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n            Utilities.sanitizeChannels(options.channels).forEach((ch)=>{\n                this.channels[ch].sendPitchBendRange(semitones, cents, options);\n            });\n            return this;\n        }\n        /**\n     * @private\n     * @deprecated since version 3.0\n     */ setPitchBendRange(semitones = 0, cents = 0, channel = \"all\", options = {}) {\n            if (wm.validation) {\n                console.warn(\"The setPitchBendRange() method is deprecated. Use sendPitchBendRange() instead.\");\n                options.channels = channel;\n                if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n            }\n            return this.sendPitchBendRange(semitones, cents, options);\n        }\n        /**\n     * Sets the specified MIDI registered parameter to the desired value. The value is defined with\n     * up to two bytes of data (msb, lsb) that each can go from `0` to `127`.\n     *\n     * MIDI\n     * [registered parameters](https://www.midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2)\n     * extend the original list of control change messages. The MIDI 1.0 specification lists only a\n     * limited number of them:\n     *\n     * | Numbers      | Function                 |\n     * |--------------|--------------------------|\n     * | (0x00, 0x00) | `pitchbendrange`         |\n     * | (0x00, 0x01) | `channelfinetuning`      |\n     * | (0x00, 0x02) | `channelcoarsetuning`    |\n     * | (0x00, 0x03) | `tuningprogram`          |\n     * | (0x00, 0x04) | `tuningbank`             |\n     * | (0x00, 0x05) | `modulationrange`        |\n     * | (0x3D, 0x00) | `azimuthangle`           |\n     * | (0x3D, 0x01) | `elevationangle`         |\n     * | (0x3D, 0x02) | `gain`                   |\n     * | (0x3D, 0x03) | `distanceratio`          |\n     * | (0x3D, 0x04) | `maximumdistance`        |\n     * | (0x3D, 0x05) | `maximumdistancegain`    |\n     * | (0x3D, 0x06) | `referencedistanceratio` |\n     * | (0x3D, 0x07) | `panspreadangle`         |\n     * | (0x3D, 0x08) | `rollangle`              |\n     *\n     * Note that the `tuningprogram` and `tuningbank` parameters are part of the *MIDI Tuning\n     * Standard*, which is not widely implemented.\n     *\n     * @param parameter {string|number[]} A string identifying the parameter's name (see above) or a\n     * two-position array specifying the two control bytes (e.g. `[0x65, 0x64]`) that identify the\n     * registered parameter.\n     *\n     * @param [data=[]] {number|number[]} A single integer or an array of integers with a maximum\n     * length of 2 specifying the desired data.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */ sendRpnValue(parameter, data, options = {}) {\n            if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n            Utilities.sanitizeChannels(options.channels).forEach((ch)=>{\n                this.channels[ch].sendRpnValue(parameter, data, options);\n            });\n            return this;\n        }\n        /**\n     * @private\n     * @deprecated since version 3.0\n     */ setRegisteredParameter(parameter, data = [], channel = \"all\", options = {}) {\n            if (wm.validation) {\n                console.warn(\"The setRegisteredParameter() method is deprecated. Use sendRpnValue() instead.\");\n                options.channels = channel;\n                if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n            }\n            return this.sendRpnValue(parameter, data, options);\n        }\n        /**\n     * Sends a MIDI **channel aftertouch** message to the specified channel(s). For key-specific\n     * aftertouch, you should instead use [`setKeyAftertouch()`]{@link #setKeyAftertouch}.\n     *\n     * @param [pressure=0.5] {number} The pressure level (between `0` and `1`). An invalid pressure\n     * value will silently trigger the default behaviour. If the `rawValue` option is set to `true`,\n     * the pressure can be defined by using an integer between `0` and `127`.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n     * considered a float between `0` and `1.0` (default) or a raw integer between `0` and `127`.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @return {Output} Returns the `Output` object so methods can be chained.\n     * @since 3.0.0\n     */ sendChannelAftertouch(pressure, options = {}, legacy = {}) {\n            if (wm.validation) // Legacy compatibility\n            {\n                if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n                    const channels = options;\n                    options = legacy;\n                    options.channels = channels;\n                    if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n                }\n            }\n            if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n            Utilities.sanitizeChannels(options.channels).forEach((ch)=>{\n                this.channels[ch].sendChannelAftertouch(pressure, options);\n            });\n            return this;\n        }\n        /**\n     * Sends a MIDI **pitch bend** message to the specified channel(s) at the scheduled time.\n     *\n     * The resulting bend is relative to the pitch bend range that has been defined. The range can be\n     * set with [`sendPitchBendRange()`]{@link #sendPitchBendRange}. So, for example, if the pitch\n     * bend range has been set to 12 semitones, using a bend value of `-1` will bend the note 1 octave\n     * below its nominal value.\n     *\n     * @param {number|number[]} value The intensity of the bend (between `-1.0` and `1.0`). A value of\n     * `0` means no bend. If an invalid value is specified, the nearest valid value will be used\n     * instead. If the `rawValue` option is set to `true`, the intensity of the bend can be defined by\n     * either using a single integer between `0` and `127` (MSB) or an array of two integers between\n     * `0` and `127` representing, respectively, the MSB (most significant byte) and the LSB (least\n     * significant byte). The MSB is expressed in semitones with `64` meaning no bend. A value lower\n     * than `64` bends downwards while a value higher than `64` bends upwards. The LSB is expressed\n     * in cents (1/100 of a semitone). An LSB of `64` also means no bend.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n     * considered as a float between `-1.0` and `1.0` (default) or as raw integer between `0` and\n     * 127` (or an array of 2 integers if using both MSB and LSB).\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     *\n     * @since 3.0.0\n     */ sendPitchBend(value, options = {}, legacy = {}) {\n            if (wm.validation) // Legacy compatibility\n            {\n                if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n                    const channels = options;\n                    options = legacy;\n                    options.channels = channels;\n                    if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n                }\n            }\n            if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n            Utilities.sanitizeChannels(options.channels).forEach((ch)=>{\n                this.channels[ch].sendPitchBend(value, options);\n            });\n            return this;\n        }\n        /**\n     * Sends a MIDI **program change** message to the specified channel(s) at the scheduled time.\n     *\n     * @param {number} [program=0] The MIDI patch (program) number (integer between `0` and `127`).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index 1 is greater\n     * than 0xFF.\n     *\n     * @return {Output} Returns the `Output` object so methods can be chained.\n     *\n     * @since 3.0.0\n     */ sendProgramChange(program = 0, options = {}, legacy = {}) {\n            if (wm.validation) // Legacy compatibility\n            {\n                if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n                    const channels = options;\n                    options = legacy;\n                    options.channels = channels;\n                    if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n                }\n            }\n            if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n            Utilities.sanitizeChannels(options.channels).forEach((ch)=>{\n                this.channels[ch].sendProgramChange(program, options);\n            });\n            return this;\n        }\n        /**\n     * Sends a **modulation depth range** message to the specified channel(s) so that they adjust the\n     * depth of their modulation wheel's range. The range can be specified with the `semitones`\n     * parameter, the `cents` parameter or by specifying both parameters at the same time.\n     *\n     * @param [semitones=0] {number} The desired adjustment value in semitones (integer between\n     * 0 and 127).\n     *\n     * @param [cents=0] {number} The desired adjustment value in cents (integer between 0 and 127).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {RangeError} The msb value must be between 0 and 127\n     * @throws {RangeError} The lsb value must be between 0 and 127\n     *\n     * @return {Output} Returns the `Output` object so methods can be chained.\n     *\n     * @since 3.0.0\n     */ sendModulationRange(semitones, cents, options = {}) {\n            if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n            Utilities.sanitizeChannels(options.channels).forEach((ch)=>{\n                this.channels[ch].sendModulationRange(semitones, cents, options);\n            });\n            return this;\n        }\n        /**\n     * @private\n     * @deprecated since version 3.0\n     */ setModulationRange(semitones = 0, cents = 0, channel = \"all\", options = {}) {\n            if (wm.validation) {\n                console.warn(\"The setModulationRange() method is deprecated. Use sendModulationRange() instead.\");\n                options.channels = channel;\n                if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n            }\n            return this.sendModulationRange(semitones, cents, options);\n        }\n        /**\n     * Sends a master tuning message to the specified channel(s). The value is decimal and must be\n     * larger than `-65` semitones and smaller than `64` semitones.\n     *\n     * Because of the way the MIDI specification works, the decimal portion of the value will be\n     * encoded with a resolution of 14bit. The integer portion must be between -64 and 63\n     * inclusively. This function actually generates two MIDI messages: a **Master Coarse Tuning** and\n     * a **Master Fine Tuning** RPN messages.\n     *\n     * @param [value=0.0] {number} The desired decimal adjustment value in semitones (-65 < x < 64)\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {RangeError} The value must be a decimal number between larger than -65 and smaller\n     * than 64.\n     *\n     * @return {Output} Returns the `Output` object so methods can be chained.\n     *\n     * @since 3.0.0\n     */ sendMasterTuning(value, options = {}) {\n            if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n            Utilities.sanitizeChannels(options.channels).forEach((ch)=>{\n                this.channels[ch].sendMasterTuning(value, options);\n            });\n            return this;\n        }\n        /**\n     * @private\n     * @deprecated since version 3.0\n     */ setMasterTuning(value, channel = {}, options = {}) {\n            if (wm.validation) {\n                console.warn(\"The setMasterTuning() method is deprecated. Use sendMasterTuning() instead.\");\n                options.channels = channel;\n                if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n            }\n            return this.sendMasterTuning(value, options);\n        }\n        /**\n     * Sets the MIDI tuning program to use. Note that the **Tuning Program** parameter is part of the\n     * *MIDI Tuning Standard*, which is not widely implemented.\n     *\n     * @param value {number} The desired tuning program (integer between `0` and `127`).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {RangeError} The program value must be between 0 and 127.\n     *\n     * @return {Output} Returns the `Output` object so methods can be chained.\n     *\n     * @since 3.0.0\n     */ sendTuningProgram(value, options = {}) {\n            if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n            Utilities.sanitizeChannels(options.channels).forEach((ch)=>{\n                this.channels[ch].sendTuningProgram(value, options);\n            });\n            return this;\n        }\n        /**\n     * @private\n     * @deprecated since version 3.0\n     */ setTuningProgram(value, channel = \"all\", options = {}) {\n            if (wm.validation) {\n                console.warn(\"The setTuningProgram() method is deprecated. Use sendTuningProgram() instead.\");\n                options.channels = channel;\n                if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n            }\n            return this.sendTuningProgram(value, options);\n        }\n        /**\n     * Sets the MIDI tuning bank to use. Note that the **Tuning Bank** parameter is part of the\n     * *MIDI Tuning Standard*, which is not widely implemented.\n     *\n     * @param {number} [value=0] The desired tuning bank (integer between `0` and `127`).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {RangeError} The bank value must be between 0 and 127.\n     *\n     * @return {Output} Returns the `Output` object so methods can be chained.\n     *\n     * @since 3.0.0\n     */ sendTuningBank(value = 0, options = {}) {\n            if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n            Utilities.sanitizeChannels(options.channels).forEach((ch)=>{\n                this.channels[ch].sendTuningBank(value, options);\n            });\n            return this;\n        }\n        /**\n     * @private\n     * @deprecated since version 3.0\n     */ setTuningBank(parameter, channel = \"all\", options = {}) {\n            if (wm.validation) {\n                console.warn(\"The setTuningBank() method is deprecated. Use sendTuningBank() instead.\");\n                options.channels = channel;\n                if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n            }\n            return this.sendTuningBank(parameter, options);\n        }\n        /**\n     * Sends a MIDI **channel mode** message to the specified channel(s). The channel mode message to\n     * send can be specified numerically or by using one of the following common names:\n     *\n     * |  Type                |Number| Shortcut Method                                               |\n     * | ---------------------|------|-------------------------------------------------------------- |\n     * | `allsoundoff`        | 120  | [`sendAllSoundOff()`]{@link #sendAllSoundOff}                 |\n     * | `resetallcontrollers`| 121  | [`sendResetAllControllers()`]{@link #sendResetAllControllers} |\n     * | `localcontrol`       | 122  | [`sendLocalControl()`]{@link #sendLocalControl}               |\n     * | `allnotesoff`        | 123  | [`sendAllNotesOff()`]{@link #sendAllNotesOff}                 |\n     * | `omnimodeoff`        | 124  | [`sendOmniMode(false)`]{@link #sendOmniMode}                  |\n     * | `omnimodeon`         | 125  | [`sendOmniMode(true)`]{@link #sendOmniMode}                   |\n     * | `monomodeon`         | 126  | [`sendPolyphonicMode(\"mono\")`]{@link #sendPolyphonicMode}     |\n     * | `polymodeon`         | 127  | [`sendPolyphonicMode(\"poly\")`]{@link #sendPolyphonicMode}     |\n     *\n     * Note: as you can see above, to make it easier, all channel mode messages also have a matching\n     * helper method.\n     *\n     * It should also be noted that, per the MIDI specification, only `localcontrol` and `monomodeon`\n     * may require a value that's not zero. For that reason, the `value` parameter is optional and\n     * defaults to 0.\n     *\n     * @param {number|string} command The numerical identifier of the channel mode message (integer\n     * between 120-127) or its name as a string.\n     *\n     * @param {number} [value=0] The value to send (integer between 0-127).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {TypeError} Invalid channel mode message name.\n     * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n     * @throws {RangeError} Value must be an integer between 0 and 127.\n     *\n     * @return {Output} Returns the `Output` object so methods can be chained.\n     *\n     */ sendChannelMode(command, value = 0, options = {}, legacy = {}) {\n            if (wm.validation) // Legacy compatibility\n            {\n                if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n                    const channels = options;\n                    options = legacy;\n                    options.channels = channels;\n                    if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n                }\n            }\n            if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n            Utilities.sanitizeChannels(options.channels).forEach((ch)=>{\n                this.channels[ch].sendChannelMode(command, value, options);\n            });\n            return this;\n        }\n        /**\n     * Sends an **all sound off** channel mode message. This will silence all sounds playing on that\n     * channel but will not prevent new sounds from being triggered.\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output}\n     *\n     * @since 3.0.0\n     */ sendAllSoundOff(options = {}) {\n            if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n            Utilities.sanitizeChannels(options.channels).forEach((ch)=>{\n                this.channels[ch].sendAllSoundOff(options);\n            });\n            return this;\n        }\n        /**\n     * Sends an **all notes off** channel mode message. This will make all currently playing notes\n     * fade out just as if their key had been released. This is different from the\n     * [`turnSoundOff()`]{@link #turnSoundOff} method which mutes all sounds immediately.\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output}\n     *\n     * @since 3.0.0\n     */ sendAllNotesOff(options = {}) {\n            if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n            Utilities.sanitizeChannels(options.channels).forEach((ch)=>{\n                this.channels[ch].sendAllNotesOff(options);\n            });\n            return this;\n        }\n        /**\n     * Sends a **reset all controllers** channel mode message. This resets all controllers, such as\n     * the pitch bend, to their default value.\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output}\n     */ sendResetAllControllers(options = {}, legacy = {}) {\n            if (wm.validation) // Legacy compatibility\n            {\n                if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n                    const channels = options;\n                    options = legacy;\n                    options.channels = channels;\n                    if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n                }\n            }\n            if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n            Utilities.sanitizeChannels(options.channels).forEach((ch)=>{\n                this.channels[ch].sendResetAllControllers(options);\n            });\n            return this;\n        }\n        /**\n     * Sets the polyphonic mode. In `poly` mode (usually the default), multiple notes can be played\n     * and heard at the same time. In `mono` mode, only one note will be heard at once even if\n     * multiple notes are being played.\n     *\n     * @param mode {string} The mode to use: `mono` or `poly`.\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @return {Output} Returns the `Output` object so methods can be chained.\n     *\n     * @since 3.0.0\n     */ sendPolyphonicMode(mode, options = {}, legacy = {}) {\n            if (wm.validation) // Legacy compatibility\n            {\n                if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n                    const channels = options;\n                    options = legacy;\n                    options.channels = channels;\n                    if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n                }\n            }\n            if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n            Utilities.sanitizeChannels(options.channels).forEach((ch)=>{\n                this.channels[ch].sendPolyphonicMode(mode, options);\n            });\n            return this;\n        }\n        /**\n     * Turns local control on or off. Local control is usually enabled by default. If you disable it,\n     * the instrument will no longer trigger its own sounds. It will only send the MIDI messages to\n     * its out port.\n     *\n     * @param [state=false] {boolean} Whether to activate local control (`true`) or disable it\n     * (`false`).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @return {Output} Returns the `Output` object so methods can be chained.\n     *\n     * @since 3.0.0\n     */ sendLocalControl(state, options = {}, legacy = {}) {\n            if (wm.validation) // Legacy compatibility\n            {\n                if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n                    const channels = options;\n                    options = legacy;\n                    options.channels = channels;\n                    if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n                }\n            }\n            if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n            Utilities.sanitizeChannels(options.channels).forEach((ch)=>{\n                this.channels[ch].sendLocalControl(state, options);\n            });\n            return this;\n        }\n        /**\n     * Sets OMNI mode to **on** or **off** for the specified channel(s). MIDI's OMNI mode causes the\n     * instrument to respond to messages from all channels.\n     *\n     * It should be noted that support for OMNI mode is not as common as it used to be.\n     *\n     * @param [state] {boolean} Whether to activate OMNI mode (`true`) or not (`false`).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {TypeError} Invalid channel mode message name.\n     * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n     * @throws {RangeError} Value must be an integer between 0 and 127.\n     *\n     * @return {Output} Returns the `Output` object so methods can be chained.\n     *\n     * @since 3.0.0\n     */ sendOmniMode(state, options = {}, legacy = {}) {\n            if (wm.validation) // Legacy compatibility\n            {\n                if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n                    const channels = options;\n                    options = legacy;\n                    options.channels = channels;\n                    if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n                }\n            }\n            if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n            Utilities.sanitizeChannels(options.channels).forEach((ch)=>{\n                this.channels[ch].sendOmniMode(state, options);\n            });\n            return this;\n        }\n        /**\n     * Sets a non-registered parameter to the specified value. The NRPN is selected by passing a\n     * two-position array specifying the values of the two control bytes. The value is specified by\n     * passing a single integer (most cases) or an array of two integers.\n     *\n     * NRPNs are not standardized in any way. Each manufacturer is free to implement them any way\n     * they see fit. For example, according to the Roland GS specification, you can control the\n     * **vibrato rate** using NRPN (`1`, `8`). Therefore, to set the **vibrato rate** value to `123`\n     * you would use:\n     *\n     * ```js\n     * WebMidi.outputs[0].sendNrpnValue([1, 8], 123);\n     * ```\n     *\n     * You probably want to should select a channel so the message is not sent to all channels. For\n     * instance, to send to channel `1` of the first output port, you would use:\n     *\n     * ```js\n     * WebMidi.outputs[0].sendNrpnValue([1, 8], 123, 1);\n     * ```\n     *\n     * In some rarer cases, you need to send two values with your NRPN messages. In such cases, you\n     * would use a 2-position array. For example, for its **ClockBPM** parameter (`2`, `63`), Novation\n     * uses a 14-bit value that combines an MSB and an LSB (7-bit values). So, for example, if the\n     * value to send was `10`, you could use:\n     *\n     * ```js\n     * WebMidi.outputs[0].sendNrpnValue([2, 63], [0, 10], 1);\n     * ```\n     *\n     * For further implementation details, refer to the manufacturer's documentation.\n     *\n     * @param parameter {number[]} A two-position array specifying the two control bytes (`0x63`,\n     * `0x62`) that identify the non-registered parameter.\n     *\n     * @param [data=[]] {number|number[]} An integer or an array of integers with a length of 1 or 2\n     * specifying the desired data.\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {RangeError} The control value must be between 0 and 127.\n     * @throws {RangeError} The msb value must be between 0 and 127\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */ sendNrpnValue(parameter, data, options = {}) {\n            if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n            Utilities.sanitizeChannels(options.channels).forEach((ch)=>{\n                this.channels[ch].sendNrpnValue(parameter, data, options);\n            });\n            return this;\n        }\n        /**\n     * @private\n     * @deprecated since version 3.0\n     */ setNonRegisteredParameter(parameter, data = [], channel = \"all\", options = {}) {\n            if (wm.validation) {\n                console.warn(\"The setNonRegisteredParameter() method is deprecated. Use sendNrpnValue() instead.\");\n                options.channels = channel;\n                if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n            }\n            return this.sendNrpnValue(parameter, data, options);\n        }\n        /**\n     * Increments the specified MIDI registered parameter by 1. Here is the full list of parameter\n     * names that can be used with this method:\n     *\n     *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n     *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n     *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n     *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n     *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n     *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n     *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n     *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n     *  * Gain (0x3D, 0x02): `\"gain\"`\n     *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n     *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n     *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n     *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n     *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n     *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n     *\n     * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n     * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n     * parameter.\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */ sendRpnIncrement(parameter, options = {}) {\n            if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n            Utilities.sanitizeChannels(options.channels).forEach((ch)=>{\n                this.channels[ch].sendRpnIncrement(parameter, options);\n            });\n            return this;\n        }\n        /**\n     * @private\n     * @deprecated since version 3.0\n     */ incrementRegisteredParameter(parameter, channel = \"all\", options = {}) {\n            if (wm.validation) {\n                console.warn(\"The incrementRegisteredParameter() method is deprecated. Use sendRpnIncrement() instead.\");\n                options.channels = channel;\n                if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n            }\n            return this.sendRpnIncrement(parameter, options);\n        }\n        /**\n     * Decrements the specified MIDI registered parameter by 1. Here is the full list of parameter\n     * names that can be used with this method:\n     *\n     *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n     *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n     *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n     *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n     *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n     *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n     *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n     *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n     *  * Gain (0x3D, 0x02): `\"gain\"`\n     *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n     *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n     *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n     *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n     *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n     *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n     *\n     * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n     * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n     * parameter.\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws TypeError The specified parameter is not available.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */ sendRpnDecrement(parameter, options = {}) {\n            if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n            Utilities.sanitizeChannels(options.channels).forEach((ch)=>{\n                this.channels[ch].sendRpnDecrement(parameter, options);\n            });\n            return this;\n        }\n        /**\n     * @private\n     * @deprecated since version 3.0\n     */ decrementRegisteredParameter(parameter, channel = \"all\", options = {}) {\n            if (wm.validation) {\n                console.warn(\"The decrementRegisteredParameter() method is deprecated. Use sendRpnDecrement() instead.\");\n                options.channels = channel;\n                if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n            }\n            return this.sendRpnDecrement(parameter, options);\n        }\n        /**\n     * Sends a **note off** message for the specified MIDI note number on the specified channel(s).\n     * The first parameter is the note to stop. It can be a single value or an array of the following\n     * valid values:\n     *\n     *  - A MIDI note number (integer between `0` and `127`)\n     *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n     *  - A [`Note`](Note) object\n     *\n     * The execution of the **note off** command can be delayed by using the `time` property of the\n     * `options` parameter.\n     *\n     * @param note {number|Note|string|number[]|Note[]|string[]} The note(s) to stop. The notes can be\n     * specified by using a MIDI note number (`0` - `127`), a note identifier (e.g. `C3`, `G#4`,\n     * `F-1`, `Db7`) or an array of the previous types. When using a note identifier, octave range\n     * must be between `-1` and `9`. The lowest note is `C-1` (MIDI note number `0`) and the highest\n     * note is `G9` (MIDI note number `127`).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number} [options.release=0.5] The velocity at which to release the note\n     * (between `0` and `1`).  If the `rawRelease` option is also defined, `rawRelease` will have\n     * priority. An invalid velocity value will silently trigger the default of `0.5`.\n     *\n     * @param {number} [options.rawRelease=64] The velocity at which to release the note\n     * (between `0` and `127`). If the `release` option is also defined, `rawRelease` will have\n     * priority. An invalid velocity value will silently trigger the default of `64`.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */ sendNoteOff(note, options = {}, legacy = {}) {\n            if (wm.validation) // Legacy compatibility\n            {\n                if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n                    const channels = options;\n                    options = legacy;\n                    options.channels = channels;\n                    if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n                }\n            }\n            if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n            Utilities.sanitizeChannels(options.channels).forEach((ch)=>{\n                this.channels[ch].sendNoteOff(note, options);\n            });\n            return this;\n        }\n        /**\n     * Sends a **note off** message for the specified MIDI note number on the specified channel(s).\n     * The first parameter is the note to stop. It can be a single value or an array of the following\n     * valid values:\n     *\n     *  - A MIDI note number (integer between `0` and `127`)\n     *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n     *  - A [`Note`](Note) object\n     *\n     * The execution of the **note off** command can be delayed by using the `time` property of the\n     * `options` parameter.\n     *\n     * @param note {number|Note|string|number[]|Note[]|string[]} The note(s) to stop. The notes can be\n     * specified by using a MIDI note number (`0` - `127`), a note identifier (e.g. `C3`, `G#4`, `F-1`,\n     * `Db7`) or an array of the previous types. When using a note identifier, octave range must be\n     * between `-1` and `9`. The lowest note is `C-1` (MIDI note number `0`) and the highest note is\n     * `G9` (MIDI note number `127`).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number} [options.release=0.5] The velocity at which to release the note\n     * (between `0` and `1`).  If the `rawRelease` option is also defined, `rawRelease` will have\n     * priority. An invalid velocity value will silently trigger the default of `0.5`.\n     *\n     * @param {number} [options.rawRelease=64] The velocity at which to release the note\n     * (between `0` and `127`). If the `release` option is also defined, `rawRelease` will have\n     * priority. An invalid velocity value will silently trigger the default of `64`.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */ stopNote(note, options) {\n            return this.sendNoteOff(note, options);\n        }\n        /**\n     * Plays a note or an array of notes on one or more channels of this output. If you intend to play\n     * notes on a single channel, you should probably use\n     * [`OutputChannel.playNote()`](OutputChannel#playNote) instead.\n     *\n     * The first parameter is the note to play. It can be a single value or an array of the following\n     * valid values:\n     *\n     *  - A MIDI note number (integer between `0` and `127`)\n     *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n     *  - A [`Note`]{@link Note} object\n     *\n     * The `playNote()` method sends a **note on** MIDI message for all specified notes on all\n     * specified channels. If no channel is specified, it will send to all channels. If a `duration`\n     * is set in the `options` parameter or in the [`Note`]{@link Note} object's\n     * [`duration`]{@link Note#duration} property, it will also schedule a **note off** message to end\n     * the note after said duration. If no `duration` is set, the note will simply play until a\n     * matching **note off** message is sent with [`stopNote()`]{@link #stopNote}.\n     *\n     * The execution of the **note on** command can be delayed by using the `time` property of the\n     * `options` parameter.\n     *\n     * When using [`Note`]{@link Note} objects, the durations and velocities defined in the\n     * [`Note`]{@link Note} objects have precedence over the ones specified via the method's `options`\n     * parameter.\n     *\n     * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n     * functionally equivalent to a **note off** message.\n     *\n     * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n     * specified by using a MIDI note number (0-127), a note identifier (e.g. C3, G#4, F-1, Db7), a\n     * [`Note`]{@link Note} object or an array of the previous types. When using a note identifier,\n     * octave range must be between -1 and 9. The lowest note is C-1 (MIDI note number `0`) and the\n     * highest note is G9 (MIDI note number `127`).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number} [options.duration=undefined] The number of milliseconds after which a\n     * **note off** message will be scheduled. If left undefined, only a **note on** message is sent.\n     *\n     * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n     * `1`). If the `rawAttack` option is also defined, it will have priority. An invalid velocity\n     * value will silently trigger the default of `0.5`.\n     *\n     * @param {number} [options.rawAttack=64] The attack velocity at which to play the note (between\n     * `0` and `127`). This has priority over the `attack` property. An invalid velocity value will\n     * silently trigger the default of 64.\n     *\n     * @param {number} [options.release=0.5] The velocity at which to release the note (between `0`\n     * and `1`). If the `rawRelease` option is also defined, it will have priority. An invalid\n     * velocity value will silently trigger the default of `0.5`. This is only used with the\n     * **note off** event triggered when `options.duration` is set.\n     *\n     * @param {number} [options.rawRelease=64] The velocity at which to release the note (between `0`\n     * and `127`). This has priority over the `release` property. An invalid velocity value will\n     * silently trigger the default of 64. This is only used with the **note off** event triggered\n     * when `options.duration` is set.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */ playNote(note, options = {}, legacy = {}) {\n            if (wm.validation) {\n                // Legacy-compatibility warnings\n                if (options.rawVelocity) console.warn(\"The 'rawVelocity' option is deprecated. Use 'rawAttack' instead.\");\n                if (options.velocity) console.warn(\"The 'velocity' option is deprecated. Use 'velocity' instead.\");\n                 // Legacy compatibility\n                if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n                    const channels = options;\n                    options = legacy;\n                    options.channels = channels;\n                    if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n                }\n            }\n            if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n            Utilities.sanitizeChannels(options.channels).forEach((ch)=>{\n                this.channels[ch].playNote(note, options);\n            });\n            return this;\n        }\n        /**\n     * Sends a **note on** message for the specified MIDI note number on the specified channel(s). The\n     * first parameter is the number. It can be a single value or an array of the following valid\n     * values:\n     *\n     *  - A MIDI note number (integer between `0` and `127`)\n     *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n     *  - A [`Note`](Note) object\n     *\n     *  The execution of the **note on** command can be delayed by using the `time` property of the\n     * `options` parameter.\n     *\n     * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n     * functionally equivalent to a **note off** message.\n     *\n     * @param note {number|Note|string|number[]|Note[]|string[]} The note(s) to stop. The notes can be\n     * specified by using a MIDI note number (`0` - `127`), a note identifier (e.g. `C3`, `G#4`, `F-1`,\n     * `Db7`) or an array of the previous types. When using a note identifier, octave range must be\n     * between `-1` and `9`. The lowest note is `C-1` (MIDI note number `0`) and the highest note is\n     * `G9` (MIDI note number `127`).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n     * `1`).  If the `rawAttack` option is also defined, `rawAttack` will have priority. An invalid\n     * velocity value will silently trigger the default of `0.5`.\n     *\n     * @param {number} [options.rawAttack=64] The velocity at which to release the note (between `0`\n     * and `127`). If the `attack` option is also defined, `rawAttack` will have priority. An invalid\n     * velocity value will silently trigger the default of `64`.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */ sendNoteOn(note, options = {}, legacy = {}) {\n            if (wm.validation) // Legacy compatibility\n            {\n                if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n                    const channels = options;\n                    options = legacy;\n                    options.channels = channels;\n                    if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n                }\n            }\n            if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS; // This actually supports passing a Note object even if, semantically, this does not make sense.\n            Utilities.sanitizeChannels(options.channels).forEach((ch)=>{\n                this.channels[ch].sendNoteOn(note, options);\n            });\n            return this;\n        }\n        /**\n     * Name of the MIDI output.\n     *\n     * @type {string}\n     * @readonly\n     */ get name() {\n            return this._midiOutput.name;\n        }\n        /**\n     * ID string of the MIDI output. The ID is host-specific. Do not expect the same ID on different\n     * platforms. For example, Google Chrome and the Jazz-Plugin report completely different IDs for\n     * the same port.\n     *\n     * @type {string}\n     * @readonly\n     */ get id() {\n            return this._midiOutput.id;\n        }\n        /**\n     * Output port's connection state: `pending`, `open` or `closed`.\n     *\n     * @type {string}\n     * @readonly\n     */ get connection() {\n            return this._midiOutput.connection;\n        }\n        /**\n     * Name of the manufacturer of the device that makes this output port available.\n     *\n     * @type {string}\n     * @readonly\n     */ get manufacturer() {\n            return this._midiOutput.manufacturer;\n        }\n        /**\n     * State of the output port: `connected` or `disconnected`.\n     *\n     * @type {string}\n     * @readonly\n     */ get state() {\n            return this._midiOutput.state;\n        }\n        /**\n     * Type of the output port (it will always be: `output`).\n     *\n     * @type {string}\n     * @readonly\n     */ get type() {\n            return this._midiOutput.type;\n        }\n        /**\n     * An integer to offset the octave of outgoing notes. By default, middle C (MIDI note number 60)\n     * is placed on the 4th octave (C4).\n     *\n     * Note that this value is combined with the global offset value defined in\n     * [`WebMidi.octaveOffset`](WebMidi#octaveOffset) (if any).\n     *\n     * @type {number}\n     *\n     * @since 3.0\n     */ get octaveOffset() {\n            return this._octaveOffset;\n        }\n        set octaveOffset(value) {\n            if (this.validation) {\n                value = parseInt(value);\n                if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n            }\n            this._octaveOffset = value;\n        }\n    }\n    /**\n   * The `Forwarder` class allows the forwarding of MIDI messages to predetermined outputs. When you\n   * call its [`forward()`](#forward) method, it will send the specified [`Message`](Message) object\n   * to all the outputs listed in its [`destinations`](#destinations) property.\n   *\n   * If specific channels or message types have been defined in the [`channels`](#channels) or\n   * [`types`](#types) properties, only messages matching the channels/types will be forwarded.\n   *\n   * While it can be manually instantiated, you are more likely to come across a `Forwarder` object as\n   * the return value of the [`Input.addForwarder()`](Input#addForwarder) method.\n   *\n   * @license Apache-2.0\n   * @since 3.0.0\n   */ class Forwarder {\n        /**\n     * Creates a `Forwarder` object.\n     *\n     * @param {Output|Output[]} [destinations=\\[\\]] An [`Output`](Output) object, or an array of such\n     * objects, to forward the message to.\n     *\n     * @param {object} [options={}]\n     * @param {string|string[]} [options.types=(all messages)] A MIDI message type or an array of such\n     * types (`\"noteon\"`, `\"controlchange\"`, etc.), that the specified message must match in order to\n     * be forwarded. If this option is not specified, all types of messages will be forwarded. Valid\n     * messages are the ones found in either\n     * [`SYSTEM_MESSAGES`](Enumerations#SYSTEM_MESSAGES)\n     * or [`CHANNEL_MESSAGES`](Enumerations#CHANNEL_MESSAGES).\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * A MIDI channel number or an array of channel numbers that the message must match in order to be\n     * forwarded. By default all MIDI channels are included (`1` to `16`).\n     */ constructor(destinations = [], options = {}){\n            /**\n       * An array of [`Output`](Output) objects to forward the message to.\n       * @type {Output[]}\n       */ this.destinations = [];\n            /**\n       * An array of message types (`\"noteon\"`, `\"controlchange\"`, etc.) that must be matched in order\n       * for messages to be forwarded. By default, this array includes all\n       * [`Enumerations.SYSTEM_MESSAGES`](Enumerations#SYSTEM_MESSAGES) and\n       * [`Enumerations.CHANNEL_MESSAGES`](Enumerations#CHANNEL_MESSAGES).\n       * @type {string[]}\n       */ this.types = [\n                ...Object.keys(Enumerations.SYSTEM_MESSAGES),\n                ...Object.keys(Enumerations.CHANNEL_MESSAGES)\n            ];\n            /**\n       * An array of MIDI channel numbers that the message must match in order to be forwarded. By\n       * default, this array includes all MIDI channels (`1` to `16`).\n       * @type {number[]}\n       */ this.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n            /**\n       * Indicates whether message forwarding is currently suspended or not in this forwarder.\n       * @type {boolean}\n       */ this.suspended = false; // Make sure parameters are arrays\n            if (!Array.isArray(destinations)) destinations = [\n                destinations\n            ];\n            if (options.types && !Array.isArray(options.types)) options.types = [\n                options.types\n            ];\n            if (options.channels && !Array.isArray(options.channels)) options.channels = [\n                options.channels\n            ];\n            if (wm.validation) {\n                // Validate destinations\n                destinations.forEach((destination)=>{\n                    if (!(destination instanceof Output)) throw new TypeError(\"Destinations must be of type 'Output'.\");\n                }); // Validate types\n                if (options.types !== undefined) options.types.forEach((type)=>{\n                    if (!Enumerations.SYSTEM_MESSAGES.hasOwnProperty(type) && !Enumerations.CHANNEL_MESSAGES.hasOwnProperty(type)) throw new TypeError(\"Type must be a valid message type.\");\n                });\n                 // Validate channels\n                if (options.channels !== undefined) options.channels.forEach((channel)=>{\n                    if (!Enumerations.MIDI_CHANNEL_NUMBERS.includes(channel)) throw new TypeError(\"MIDI channel must be between 1 and 16.\");\n                });\n            }\n            this.destinations = destinations;\n            if (options.types) this.types = options.types;\n            if (options.channels) this.channels = options.channels;\n        }\n        /**\n     * Sends the specified message to the forwarder's destination(s) if it matches the specified\n     * type(s) and channel(s).\n     *\n     * @param {Message} message The [`Message`](Message) object to forward.\n     */ forward(message) {\n            // Abort if forwarding is currently suspended\n            if (this.suspended) return; // Abort if this message type should not be forwarded\n            if (!this.types.includes(message.type)) return; // Abort if this channel should not be forwarded\n            if (message.channel && !this.channels.includes(message.channel)) return; // Forward\n            this.destinations.forEach((destination)=>{\n                if (wm.validation && !(destination instanceof Output)) return;\n                destination.send(message);\n            });\n        }\n    }\n    /**\n   * The `InputChannel` class represents a single MIDI input channel (1-16) from a single input\n   * device. This object is derived from the host's MIDI subsystem and should not be instantiated\n   * directly.\n   *\n   * All 16 `InputChannel` objects can be found inside the input's [`channels`](Input#channels)\n   * property.\n   *\n   * @fires InputChannel#midimessage\n   * @fires InputChannel#unknownmessage\n   *\n   * @fires InputChannel#noteoff\n   * @fires InputChannel#noteon\n   * @fires InputChannel#keyaftertouch\n   * @fires InputChannel#programchange\n   * @fires InputChannel#channelaftertouch\n   * @fires InputChannel#pitchbend\n   *\n   * @fires InputChannel#allnotesoff\n   * @fires InputChannel#allsoundoff\n   * @fires InputChannel#localcontrol\n   * @fires InputChannel#monomode\n   * @fires InputChannel#omnimode\n   * @fires InputChannel#resetallcontrollers\n   *\n   * @fires InputChannel#event:nrpn\n   * @fires InputChannel#event:nrpn-dataentrycoarse\n   * @fires InputChannel#event:nrpn-dataentryfine\n   * @fires InputChannel#event:nrpn-dataincrement\n   * @fires InputChannel#event:nrpn-datadecrement\n   * @fires InputChannel#event:rpn\n   * @fires InputChannel#event:rpn-dataentrycoarse\n   * @fires InputChannel#event:rpn-dataentryfine\n   * @fires InputChannel#event:rpn-dataincrement\n   * @fires InputChannel#event:rpn-datadecrement\n   *\n   * @fires InputChannel#controlchange\n   * @fires InputChannel#event:controlchange-controllerxxx\n   * @fires InputChannel#event:controlchange-bankselectcoarse\n   * @fires InputChannel#event:controlchange-modulationwheelcoarse\n   * @fires InputChannel#event:controlchange-breathcontrollercoarse\n   * @fires InputChannel#event:controlchange-footcontrollercoarse\n   * @fires InputChannel#event:controlchange-portamentotimecoarse\n   * @fires InputChannel#event:controlchange-dataentrycoarse\n   * @fires InputChannel#event:controlchange-volumecoarse\n   * @fires InputChannel#event:controlchange-balancecoarse\n   * @fires InputChannel#event:controlchange-pancoarse\n   * @fires InputChannel#event:controlchange-expressioncoarse\n   * @fires InputChannel#event:controlchange-effectcontrol1coarse\n   * @fires InputChannel#event:controlchange-effectcontrol2coarse\n   * @fires InputChannel#event:controlchange-generalpurposecontroller1\n   * @fires InputChannel#event:controlchange-generalpurposecontroller2\n   * @fires InputChannel#event:controlchange-generalpurposecontroller3\n   * @fires InputChannel#event:controlchange-generalpurposecontroller4\n   * @fires InputChannel#event:controlchange-bankselectfine\n   * @fires InputChannel#event:controlchange-modulationwheelfine\n   * @fires InputChannel#event:controlchange-breathcontrollerfine\n   * @fires InputChannel#event:controlchange-footcontrollerfine\n   * @fires InputChannel#event:controlchange-portamentotimefine\n   * @fires InputChannel#event:controlchange-dataentryfine\n   * @fires InputChannel#event:controlchange-channelvolumefine\n   * @fires InputChannel#event:controlchange-balancefine\n   * @fires InputChannel#event:controlchange-panfine\n   * @fires InputChannel#event:controlchange-expressionfine\n   * @fires InputChannel#event:controlchange-effectcontrol1fine\n   * @fires InputChannel#event:controlchange-effectcontrol2fine\n   * @fires InputChannel#event:controlchange-damperpedal\n   * @fires InputChannel#event:controlchange-portamento\n   * @fires InputChannel#event:controlchange-sostenuto\n   * @fires InputChannel#event:controlchange-softpedal\n   * @fires InputChannel#event:controlchange-legatopedal\n   * @fires InputChannel#event:controlchange-hold2\n   * @fires InputChannel#event:controlchange-soundvariation\n   * @fires InputChannel#event:controlchange-resonance\n   * @fires InputChannel#event:controlchange-releasetime\n   * @fires InputChannel#event:controlchange-attacktime\n   * @fires InputChannel#event:controlchange-brightness\n   * @fires InputChannel#event:controlchange-decaytime\n   * @fires InputChannel#event:controlchange-vibratorate\n   * @fires InputChannel#event:controlchange-vibratodepth\n   * @fires InputChannel#event:controlchange-vibratodelay\n   * @fires InputChannel#event:controlchange-generalpurposecontroller5\n   * @fires InputChannel#event:controlchange-generalpurposecontroller6\n   * @fires InputChannel#event:controlchange-generalpurposecontroller7\n   * @fires InputChannel#event:controlchange-generalpurposecontroller8\n   * @fires InputChannel#event:controlchange-portamentocontrol\n   * @fires InputChannel#event:controlchange-highresolutionvelocityprefix\n   * @fires InputChannel#event:controlchange-effect1depth\n   * @fires InputChannel#event:controlchange-effect2depth\n   * @fires InputChannel#event:controlchange-effect3depth\n   * @fires InputChannel#event:controlchange-effect4depth\n   * @fires InputChannel#event:controlchange-effect5depth\n   * @fires InputChannel#event:controlchange-dataincrement\n   * @fires InputChannel#event:controlchange-datadecrement\n   * @fires InputChannel#event:controlchange-nonregisteredparameterfine\n   * @fires InputChannel#event:controlchange-nonregisteredparametercoarse\n   * @fires InputChannel#event:controlchange-registeredparameterfine\n   * @fires InputChannel#event:controlchange-registeredparametercoarse\n   * @fires InputChannel#event:controlchange-allsoundoff\n   * @fires InputChannel#event:controlchange-resetallcontrollers\n   * @fires InputChannel#event:controlchange-localcontrol\n   * @fires InputChannel#event:controlchange-allnotesoff\n   * @fires InputChannel#event:controlchange-omnimodeoff\n   * @fires InputChannel#event:controlchange-omnimodeon\n   * @fires InputChannel#event:controlchange-monomodeon\n   * @fires InputChannel#event:controlchange-polymodeon\n   * @fires InputChannel#event:\n   *\n   * @extends EventEmitter\n   * @license Apache-2.0\n   * @since 3.0.0\n   */ class InputChannel extends EventEmitter {\n        /**\n     * Creates an `InputChannel` object.\n     *\n     * @param {Input} input The [`Input`](Input) object this channel belongs to.\n     * @param {number} number The channel's MIDI number (1-16).\n     */ constructor(input, number){\n            super();\n            /**\n       * @type {Input}\n       * @private\n       */ this._input = input;\n            /**\n       * @type {number}\n       * @private\n       */ this._number = number;\n            /**\n       * @type {number}\n       * @private\n       */ this._octaveOffset = 0;\n            /**\n       * An array of messages that form the current NRPN sequence\n       * @private\n       * @type {Message[]}\n       */ this._nrpnBuffer = [];\n            /**\n       * An array of messages that form the current RPN sequence\n       * @private\n       * @type {Message[]}\n       */ this._rpnBuffer = [];\n            /**\n       * Indicates whether events for **Registered Parameter Number** and **Non-Registered Parameter\n       * Number** should be dispatched. RPNs and NRPNs are composed of a sequence of specific\n       * **control change** messages. When a valid sequence of such control change messages is\n       * received, an [`rpn`](#event-rpn) or [`nrpn`](#event-nrpn) event will fire.\n       *\n       * If an invalid or out-of-order **control change** message is received, it will fall through\n       * the collector logic and all buffered **control change** messages will be discarded as\n       * incomplete.\n       *\n       * @type {boolean}\n       */ this.parameterNumberEventsEnabled = true;\n            /**\n       * Contains the current playing state of all MIDI notes of this channel (0-127). The state is\n       * `true` for a currently playing note and `false` otherwise.\n       * @type {boolean[]}\n       */ this.notesState = new Array(128).fill(false);\n        }\n        /**\n     * Destroys the `InputChannel` by removing all listeners and severing the link with the MIDI\n     * subsystem's input.\n     */ destroy() {\n            this._input = null;\n            this._number = null;\n            this._octaveOffset = 0;\n            this._nrpnBuffer = [];\n            this.notesState = new Array(128).fill(false);\n            this.parameterNumberEventsEnabled = false;\n            this.removeListener();\n        }\n        /**\n     * @param e MIDIMessageEvent\n     * @private\n     */ _processMidiMessageEvent(e) {\n            // Create and emit a new 'midimessage' event based on the incoming one\n            const event = Object.assign({}, e);\n            event.port = this.input;\n            event.target = this;\n            event.type = \"midimessage\";\n            /**\n       * Event emitted when a MIDI message of any kind is received by an `InputChannel`\n       *\n       * @event InputChannel#midimessage\n       *\n       * @type {object}\n       *\n       * @property {string} type `midimessage`\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       */ this.emit(event.type, event); // Parse the inbound event for regular MIDI messages\n            this._parseEventForStandardMessages(event);\n        }\n        /**\n     * Parses incoming channel events and emit standard MIDI message events (noteon, noteoff, etc.)\n     * @param e Event\n     * @private\n     */ _parseEventForStandardMessages(e) {\n            const event = Object.assign({}, e);\n            event.type = event.message.type || \"unknownmessage\";\n            const data1 = e.message.dataBytes[0];\n            const data2 = e.message.dataBytes[1];\n            if (event.type === \"noteoff\" || event.type === \"noteon\" && data2 === 0) {\n                this.notesState[data1] = false;\n                event.type = \"noteoff\"; // necessary for note on with 0 velocity\n                /**\n         * Event emitted when a **note off** MIDI message has been received on the channel.\n         *\n         * @event InputChannel#noteoff\n         *\n         * @type {object}\n         * @property {string} type `noteoff`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the incoming\n         * MIDI message.\n         * @property {number} timestamp The moment\n         * ([`DOMHighResTimeStamp`](https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp))\n         * when the event occurred (in milliseconds since the navigation start of the document).\n         *\n         * @property {object} note A [`Note`](Note) object containing information such as note name,\n         * octave and release velocity.\n         * @property {number} value The release velocity amount expressed as a float between 0 and 1.\n         * @property {number} rawValue The release velocity amount expressed as an integer (between 0\n         * and 127).\n         */ // The object created when a noteoff event arrives is a Note with an attack velocity of 0.\n                event.note = new Note(Utilities.offsetNumber(data1, this.octaveOffset + this.input.octaveOffset + wm.octaveOffset), {\n                    rawAttack: 0,\n                    rawRelease: data2\n                });\n                event.value = Utilities.from7bitToFloat(data2);\n                event.rawValue = data2; // Those are kept for backwards-compatibility but are gone from the documentation. They will\n                // be removed in future versions (@deprecated).\n                event.velocity = event.note.release;\n                event.rawVelocity = event.note.rawRelease;\n            } else if (event.type === \"noteon\") {\n                this.notesState[data1] = true;\n                /**\n         * Event emitted when a **note on** MIDI message has been received.\n         *\n         * @event InputChannel#noteon\n         *\n         * @type {object}\n         * @property {string} type `noteon`\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} note A [`Note`](Note) object containing information such as note name,\n         * octave and release velocity.\n         * @property {number} value The attack velocity amount expressed as a float between 0 and 1.\n         * @property {number} rawValue The attack velocity amount expressed as an integer (between 0\n         * and 127).\n         */ event.note = new Note(Utilities.offsetNumber(data1, this.octaveOffset + this.input.octaveOffset + wm.octaveOffset), {\n                    rawAttack: data2\n                });\n                event.value = Utilities.from7bitToFloat(data2);\n                event.rawValue = data2; // Those are kept for backwards-compatibility but are gone from the documentation. They will\n                // be removed in future versions (@deprecated).\n                event.velocity = event.note.attack;\n                event.rawVelocity = event.note.rawAttack;\n            } else if (event.type === \"keyaftertouch\") {\n                /**\n         * Event emitted when a **key-specific aftertouch** MIDI message has been received.\n         *\n         * @event InputChannel#keyaftertouch\n         *\n         * @type {object}\n         * @property {string} type `\"keyaftertouch\"`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} note A [`Note`](Note) object containing information such as note name\n         * and number.\n         * @property {number} value The aftertouch amount expressed as a float between 0 and 1.\n         * @property {number} rawValue The aftertouch amount expressed as an integer (between 0 and\n         * 127).\n         */ event.note = new Note(Utilities.offsetNumber(data1, this.octaveOffset + this.input.octaveOffset + wm.octaveOffset)); // Aftertouch value\n                event.value = Utilities.from7bitToFloat(data2);\n                event.rawValue = data2; // @deprecated\n                event.identifier = event.note.identifier;\n                event.key = event.note.number;\n                event.rawKey = data1;\n            } else if (event.type === \"controlchange\") {\n                /**\n         * Event emitted when a **control change** MIDI message has been received.\n         *\n         * @event InputChannel#controlchange\n         *\n         * @type {object}\n         * @property {string} type `controlchange`\n         * @property {string} subtype The type of control change message that was received.\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ event.controller = {\n                    number: data1,\n                    name: Enumerations.CONTROL_CHANGE_MESSAGES[data1].name,\n                    description: Enumerations.CONTROL_CHANGE_MESSAGES[data1].description,\n                    position: Enumerations.CONTROL_CHANGE_MESSAGES[data1].position\n                };\n                event.subtype = event.controller.name || \"controller\" + data1;\n                event.value = Utilities.from7bitToFloat(data2);\n                event.rawValue = data2;\n                /**\n         * Event emitted when a **control change** MIDI message has been received and that message is\n         * targeting the controller numbered \"xxx\". Of course, \"xxx\" should be replaced by a valid\n         * controller number (0-127).\n         *\n         * @event InputChannel#controlchange-controllerxxx\n         *\n         * @type {object}\n         * @property {string} type `controlchange-controllerxxx`\n         * @property {string} subtype The type of control change message that was received.\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ const numberedEvent = Object.assign({}, event);\n                numberedEvent.type = `${event.type}-controller${data1}`;\n                delete numberedEvent.subtype;\n                this.emit(numberedEvent.type, numberedEvent);\n                /**\n         * Event emitted when a **controlchange-bankselectcoarse** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-bankselectcoarse\n         *\n         * @type {object}\n         * @property {string} type `controlchange-bankselectcoarse`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-modulationwheelcoarse** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-modulationwheelcoarse\n         *\n         * @type {object}\n         * @property {string} type `controlchange-modulationwheelcoarse`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-breathcontrollercoarse** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-breathcontrollercoarse\n         *\n         * @type {object}\n         * @property {string} type `controlchange-breathcontrollercoarse`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-footcontrollercoarse** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-footcontrollercoarse\n         *\n         * @type {object}\n         * @property {string} type `controlchange-footcontrollercoarse`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-portamentotimecoarse** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-portamentotimecoarse\n         *\n         * @type {object}\n         * @property {string} type `controlchange-portamentotimecoarse`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-dataentrycoarse** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-dataentrycoarse\n         *\n         * @type {object}\n         * @property {string} type `controlchange-dataentrycoarse`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-volumecoarse** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-volumecoarse\n         *\n         * @type {object}\n         * @property {string} type `controlchange-volumecoarse`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-balancecoarse** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-balancecoarse\n         *\n         * @type {object}\n         * @property {string} type `controlchange-balancecoarse`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-pancoarse** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-pancoarse\n         *\n         * @type {object}\n         * @property {string} type `controlchange-pancoarse`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-expressioncoarse** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-expressioncoarse\n         *\n         * @type {object}\n         * @property {string} type `controlchange-expressioncoarse`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-effectcontrol1coarse** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-effectcontrol1coarse\n         *\n         * @type {object}\n         * @property {string} type `controlchange-effectcontrol1coarse`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-effectcontrol2coarse** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-effectcontrol2coarse\n         *\n         * @type {object}\n         * @property {string} type `controlchange-effectcontrol2coarse`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-generalpurposecontroller1** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-generalpurposecontroller1\n         *\n         * @type {object}\n         * @property {string} type `controlchange-generalpurposecontroller1`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-generalpurposecontroller2** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-generalpurposecontroller2\n         *\n         * @type {object}\n         * @property {string} type `controlchange-generalpurposecontroller2`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-generalpurposecontroller3** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-generalpurposecontroller3\n         *\n         * @type {object}\n         * @property {string} type `controlchange-generalpurposecontroller3`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-generalpurposecontroller4** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-generalpurposecontroller4\n         *\n         * @type {object}\n         * @property {string} type `controlchange-generalpurposecontroller4`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-bankselectfine** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-bankselectfine\n         *\n         * @type {object}\n         * @property {string} type `controlchange-bankselectfine`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-modulationwheelfine** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-modulationwheelfine\n         *\n         * @type {object}\n         * @property {string} type `controlchange-modulationwheelfine`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-breathcontrollerfine** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-breathcontrollerfine\n         *\n         * @type {object}\n         * @property {string} type `controlchange-breathcontrollerfine`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-footcontrollerfine** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-footcontrollerfine\n         *\n         * @type {object}\n         * @property {string} type `controlchange-footcontrollerfine`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-portamentotimefine** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-portamentotimefine\n         *\n         * @type {object}\n         * @property {string} type `controlchange-portamentotimefine`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-dataentryfine** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-dataentryfine\n         *\n         * @type {object}\n         * @property {string} type `controlchange-dataentryfine`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-channelvolumefine** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-channelvolumefine\n         *\n         * @type {object}\n         * @property {string} type `controlchange-channelvolumefine`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-balancefine** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-balancefine\n         *\n         * @type {object}\n         * @property {string} type `controlchange-balancefine`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-panfine** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-panfine\n         *\n         * @type {object}\n         * @property {string} type `controlchange-panfine`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-expressionfine** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-expressionfine\n         *\n         * @type {object}\n         * @property {string} type `controlchange-expressionfine`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-effectcontrol1fine** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-effectcontrol1fine\n         *\n         * @type {object}\n         * @property {string} type `controlchange-effectcontrol1fine`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-effectcontrol2fine** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-effectcontrol2fine\n         *\n         * @type {object}\n         * @property {string} type `controlchange-effectcontrol2fine`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-damperpedal** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-damperpedal\n         *\n         * @type {object}\n         * @property {string} type `controlchange-damperpedal`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-portamento** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-portamento\n         *\n         * @type {object}\n         * @property {string} type `controlchange-portamento`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-sostenuto** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-sostenuto\n         *\n         * @type {object}\n         * @property {string} type `controlchange-sostenuto`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-softpedal** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-softpedal\n         *\n         * @type {object}\n         * @property {string} type `controlchange-softpedal`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-legatopedal** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-legatopedal\n         *\n         * @type {object}\n         * @property {string} type `controlchange-legatopedal`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-hold2** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-hold2\n         *\n         * @type {object}\n         * @property {string} type `controlchange-hold2`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-soundvariation** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-soundvariation\n         *\n         * @type {object}\n         * @property {string} type `controlchange-soundvariation`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-resonance** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-resonance\n         *\n         * @type {object}\n         * @property {string} type `controlchange-resonance`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-releasetime** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-releasetime\n         *\n         * @type {object}\n         * @property {string} type `controlchange-releasetime`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-attacktime** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-attacktime\n         *\n         * @type {object}\n         * @property {string} type `controlchange-attacktime`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-brightness** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-brightness\n         *\n         * @type {object}\n         * @property {string} type `controlchange-brightness`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-decaytime** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-decaytime\n         *\n         * @type {object}\n         * @property {string} type `controlchange-decaytime`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-vibratorate** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-vibratorate\n         *\n         * @type {object}\n         * @property {string} type `controlchange-vibratorate`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-vibratodepth** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-vibratodepth\n         *\n         * @type {object}\n         * @property {string} type `controlchange-vibratodepth`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-vibratodelay** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-vibratodelay\n         *\n         * @type {object}\n         * @property {string} type `controlchange-vibratodelay`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-generalpurposecontroller5** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-generalpurposecontroller5\n         *\n         * @type {object}\n         * @property {string} type `controlchange-generalpurposecontroller5`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-generalpurposecontroller6** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-generalpurposecontroller6\n         *\n         * @type {object}\n         * @property {string} type `controlchange-generalpurposecontroller6`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-generalpurposecontroller7** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-generalpurposecontroller7\n         *\n         * @type {object}\n         * @property {string} type `controlchange-generalpurposecontroller7`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-generalpurposecontroller8** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-generalpurposecontroller8\n         *\n         * @type {object}\n         * @property {string} type `controlchange-generalpurposecontroller8`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-portamentocontrol** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-portamentocontrol\n         *\n         * @type {object}\n         * @property {string} type `controlchange-portamentocontrol`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-highresolutionvelocityprefix** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-highresolutionvelocityprefix\n         *\n         * @type {object}\n         * @property {string} type `controlchange-highresolutionvelocityprefix`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-effect1depth** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-effect1depth\n         *\n         * @type {object}\n         * @property {string} type `controlchange-effect1depth`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-effect2depth** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-effect2depth\n         *\n         * @type {object}\n         * @property {string} type `controlchange-effect2depth`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-effect3depth** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-effect3depth\n         *\n         * @type {object}\n         * @property {string} type `controlchange-effect3depth`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-effect4depth** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-effect4depth\n         *\n         * @type {object}\n         * @property {string} type `controlchange-effect4depth`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-effect5depth** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-effect5depth\n         *\n         * @type {object}\n         * @property {string} type `controlchange-effect5depth`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-dataincrement** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-dataincrement\n         *\n         * @type {object}\n         * @property {string} type `controlchange-dataincrement`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-datadecrement** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-datadecrement\n         *\n         * @type {object}\n         * @property {string} type `controlchange-datadecrement`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-nonregisteredparameterfine** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-nonregisteredparameterfine\n         *\n         * @type {object}\n         * @property {string} type `controlchange-nonregisteredparameterfine`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-nonregisteredparametercoarse** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-nonregisteredparametercoarse\n         *\n         * @type {object}\n         * @property {string} type `controlchange-nonregisteredparametercoarse`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-registeredparameterfine** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-registeredparameterfine\n         *\n         * @type {object}\n         * @property {string} type `controlchange-registeredparameterfine`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-registeredparametercoarse** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-registeredparametercoarse\n         *\n         * @type {object}\n         * @property {string} type `controlchange-registeredparametercoarse`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-allsoundoff** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-allsoundoff\n         *\n         * @type {object}\n         * @property {string} type `controlchange-allsoundoff`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-resetallcontrollers** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-resetallcontrollers\n         *\n         * @type {object}\n         * @property {string} type `controlchange-resetallcontrollers`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-localcontrol** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-localcontrol\n         *\n         * @type {object}\n         * @property {string} type `controlchange-localcontrol`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-allnotesoff** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-allnotesoff\n         *\n         * @type {object}\n         * @property {string} type `controlchange-allnotesoff`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-omnimodeoff** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-omnimodeoff\n         *\n         * @type {object}\n         * @property {string} type `controlchange-omnimodeoff`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-omnimodeon** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-omnimodeon\n         *\n         * @type {object}\n         * @property {string} type `controlchange-omnimodeon`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-monomodeon** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-monomodeon\n         *\n         * @type {object}\n         * @property {string} type `controlchange-monomodeon`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ /**\n         * Event emitted when a **controlchange-polymodeon** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-polymodeon\n         *\n         * @type {object}\n         * @property {string} type `controlchange-polymodeon`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */ const namedEvent = Object.assign({}, event);\n                namedEvent.type = `${event.type}-` + Enumerations.CONTROL_CHANGE_MESSAGES[data1].name;\n                delete namedEvent.subtype; // Dispatch controlchange-\"function\" events only if the \"function\" is defined (not the generic\n                // controllerXXX nomenclature)\n                if (namedEvent.type.indexOf(\"controller\") !== 0) this.emit(namedEvent.type, namedEvent);\n                 // Trigger channel mode message events (if appropriate)\n                if (event.message.dataBytes[0] >= 120) this._parseChannelModeMessage(event); // Parse the inbound event to see if its part of an RPN/NRPN sequence\n                if (this.parameterNumberEventsEnabled && this._isRpnOrNrpnController(event.message.dataBytes[0])) this._parseEventForParameterNumber(event);\n            } else if (event.type === \"programchange\") {\n                /**\n         * Event emitted when a **program change** MIDI message has been received.\n         *\n         * @event InputChannel#programchange\n         *\n         * @type {object}\n         * @property {string} type `programchange`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {number} value The value expressed as an integer between 0 and 127.\n         * @property {number} rawValue  The raw MIDI value expressed as an integer between 0 and 127.\n         */ event.value = data1;\n                event.rawValue = event.value;\n            } else if (event.type === \"channelaftertouch\") {\n                /**\n         * Event emitted when a control change MIDI message has been received.\n         *\n         * @event InputChannel#channelaftertouch\n         *\n         * @type {object}\n         * @property {string} type `channelaftertouch`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The raw MIDI value expressed as an integer between 0 and 127.\n         */ event.value = Utilities.from7bitToFloat(data1);\n                event.rawValue = data1;\n            } else if (event.type === \"pitchbend\") {\n                /**\n         * Event emitted when a pitch bend MIDI message has been received.\n         *\n         * @event InputChannel#pitchbend\n         *\n         * @type {object}\n         * @property {string} type `pitchbend`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The raw MIDI value expressed as an integer (between 0 and\n         * 16383).\n         */ event.value = ((data2 << 7) + data1 - 8192) / 8192;\n                event.rawValue = (data2 << 7) + data1;\n            } else event.type = \"unknownmessage\";\n            this.emit(event.type, event);\n        }\n        /**\n     * @param e {Object}\n     * @private\n     */ _parseChannelModeMessage(e) {\n            // Make a shallow copy of the incoming event so we can use it as the new event.\n            const event = Object.assign({}, e);\n            event.type = event.controller.name;\n            /**\n       * Event emitted when an \"all sound off\" channel-mode MIDI message has been received.\n       *\n       * @event InputChannel#allsoundoff\n       *\n       * @type {object}\n       * @property {string} type `allsoundoff`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       */ /**\n       * Event emitted when a \"reset all controllers\" channel-mode MIDI message has been received.\n       *\n       * @event InputChannel#resetallcontrollers\n       *\n       * @type {object}\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       */ /**\n       * Event emitted when a \"local control\" channel-mode MIDI message has been received. The value\n       * property of the event is set to either `true` (local control on) of `false` (local control\n       * off).\n       *\n       * @event InputChannel#localcontrol\n       *\n       * @type {object}\n       * @property {string} type `localcontrol`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {boolean} value For local control on, the value is `true`. For local control off,\n       * the value is `false`.\n       * @property {boolean} rawValue For local control on, the value is `127`. For local control off,\n       * the value is `0`.\n       */ if (event.type === \"localcontrol\") {\n                event.value = event.message.data[2] === 127 ? true : false;\n                event.rawValue = event.message.data[2];\n            }\n            /**\n       * Event emitted when an \"all notes off\" channel-mode MIDI message has been received.\n       *\n       * @event InputChannel#allnotesoff\n       *\n       * @type {object}\n       * @property {string} type `allnotesoff`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       */ /**\n       * Event emitted when an \"omni mode\" channel-mode MIDI message has been received. The value\n       * property of the event is set to either `true` (omni mode on) of `false` (omni mode off).\n       *\n       * @event InputChannel#omnimode\n       *\n       * @type {object}\n       * @property {string} type `\"omnimode\"`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {boolean} value The value is `true` for omni mode on and false for omni mode off.\n       * @property {boolean} rawValue The raw MIDI value\n       */ if (event.type === \"omnimodeon\") {\n                event.type = \"omnimode\";\n                event.value = true;\n                event.rawValue = event.message.data[2];\n            } else if (event.type === \"omnimodeoff\") {\n                event.type = \"omnimode\";\n                event.value = false;\n                event.rawValue = event.message.data[2];\n            }\n            /**\n       * Event emitted when a \"mono/poly mode\" MIDI message has been received. The value property of\n       * the event is set to either `true` (mono mode on / poly mode off) or `false` (mono mode off /\n       * poly mode on).\n       *\n       * @event InputChannel#monomode\n       *\n       * @type {object}\n       * @property {string} type `monomode`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {boolean} value The value is `true` for omni mode on and false for omni mode off.\n       * @property {boolean} rawValue The raw MIDI value\n       */ if (event.type === \"monomodeon\") {\n                event.type = \"monomode\";\n                event.value = true;\n                event.rawValue = event.message.data[2];\n            } else if (event.type === \"polymodeon\") {\n                event.type = \"monomode\";\n                event.value = false;\n                event.rawValue = event.message.data[2];\n            }\n            this.emit(event.type, event);\n        }\n        /**\n     * Parses inbound events to identify RPN/NRPN sequences.\n     * @param e Event\n     * @private\n     */ _parseEventForParameterNumber(event) {\n            // To make it more legible\n            const controller = event.message.dataBytes[0];\n            const value = event.message.dataBytes[1]; // A. Check if the message is the start of an RPN (101) or NRPN (99) parameter declaration.\n            if (controller === 99 || controller === 101) {\n                this._nrpnBuffer = [];\n                this._rpnBuffer = [];\n                if (controller === 99) // 99\n                this._nrpnBuffer = [\n                    event.message\n                ];\n                else // 101\n                // 127 is a reset so we ignore it\n                if (value !== 127) this._rpnBuffer = [\n                    event.message\n                ];\n                 // B. Check if the message is the end of an RPN (100) or NRPN (98) parameter declaration.\n            } else if (controller === 98 || controller === 100) {\n                if (controller === 98) {\n                    // 98\n                    // Flush the other buffer (they are mutually exclusive)\n                    this._rpnBuffer = []; // Check if we are in sequence\n                    if (this._nrpnBuffer.length === 1) this._nrpnBuffer.push(event.message);\n                    else this._nrpnBuffer = []; // out of sequence\n                } else {\n                    // 100\n                    // Flush the other buffer (they are mutually exclusive)\n                    this._nrpnBuffer = []; // 127 is a reset so we ignore it\n                    if (this._rpnBuffer.length === 1 && value !== 127) this._rpnBuffer.push(event.message);\n                    else this._rpnBuffer = []; // out of sequence or reset\n                } // C. Check if the message is for data entry (6, 38, 96 or 97). Those messages trigger events.\n            } else if (controller === 6 || controller === 38 || controller === 96 || controller === 97) {\n                if (this._rpnBuffer.length === 2) this._dispatchParameterNumberEvent(\"rpn\", this._rpnBuffer[0].dataBytes[1], this._rpnBuffer[1].dataBytes[1], event);\n                else if (this._nrpnBuffer.length === 2) this._dispatchParameterNumberEvent(\"nrpn\", this._nrpnBuffer[0].dataBytes[1], this._nrpnBuffer[1].dataBytes[1], event);\n                else {\n                    this._nrpnBuffer = [];\n                    this._rpnBuffer = [];\n                }\n            }\n        }\n        /**\n     * Indicates whether the specified controller can be part of an RPN or NRPN sequence\n     * @param controller\n     * @returns {boolean}\n     * @private\n     */ _isRpnOrNrpnController(controller) {\n            return controller === 6 || controller === 38 || controller === 96 || controller === 97 || controller === 98 || controller === 99 || controller === 100 || controller === 101;\n        }\n        /**\n     * @private\n     */ _dispatchParameterNumberEvent(type, paramMsb, paramLsb, e) {\n            type = type === \"nrpn\" ? \"nrpn\" : \"rpn\";\n            /**\n       * Event emitted when an **RPN data entry coarse** message is received on the input. The\n       * specific parameter to which the message applies can be found in the event's `parameter`\n       * property. It is one of the ones defined in\n       * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n       *\n       * @event InputChannel#rpn-dataentrycoarse\n       *\n       * @type {object}\n       *\n       * @property {string} type `rpn-dataentrycoarse`\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {string} parameter The registered parameter's name\n       * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n       * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n       * @property {number} value The received value as a normalized number between 0 and 1.\n       * @property {number} rawValue The value as received (0-127)\n       */ /**\n       * Event emitted when an **RPN data entry fine** message is received on the input. The\n       * specific parameter to which the message applies can be found in the event's `parameter`\n       * property. It is one of the ones defined in\n       * [`EnumerationsREGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n       *\n       * @event InputChannel#rpn-dataentryfine\n       *\n       * @type {object}\n       *\n       * @property {string} type `rpn-dataentryfine`\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {string} parameter The registered parameter's name\n       * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n       * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n       * @property {number} value The received value as a normalized number between 0 and 1.\n       * @property {number} rawValue The value as received (0-127)\n       */ /**\n       * Event emitted when an **RPN data increment** message is received on the input. The specific\n       * parameter to which the message applies can be found in the event's `parameter` property. It\n       * is one of the ones defined in\n       * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n       *\n       * @event InputChannel#rpn-dataincrement\n       *\n       * @type {object}\n       *\n       * @property {string} type `rpn-dataincrement`\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {string} parameter The registered parameter's name\n       * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n       * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n       * @property {number} value The received value as a normalized number between 0 and 1.\n       * @property {number} rawValue The value as received (0-127)\n       */ /**\n       * Event emitted when an **RPN data decrement** message is received on the input. The specific\n       * parameter to which the message applies can be found in the event's `parameter` property. It\n       * is one of the ones defined in\n       * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n       *\n       * @event InputChannel#rpn-datadecrement\n       *\n       * @type {object}\n       *\n       * @property {string} type `rpn-datadecrement`\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {string} parameter The registered parameter's name\n       * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n       * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n       * @property {number} value The received value as a normalized number between 0 and 1.\n       * @property {number} rawValue The value as received (0-127)\n       */ /**\n       * Event emitted when an **NRPN data entry coarse** message is received on the input. The\n       * specific parameter to which the message applies can be found in the event's `parameter`\n       * property. It is one of the ones defined in\n       * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n       *\n       * @event InputChannel#nrpn-dataentrycoarse\n       *\n       * @type {object}\n       *\n       * @property {string} type `nrpn-dataentrycoarse`\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {string} parameter The registered parameter's name\n       * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n       * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n       * @property {number} value The received value as a normalized number between 0 and 1.\n       * @property {number} rawValue The value as received (0-127)\n       */ /**\n       * Event emitted when an **NRPN data entry fine** message is received on the input. The\n       * specific parameter to which the message applies can be found in the event's `parameter`\n       * property. It is one of the ones defined in\n       * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n       *\n       * @event InputChannel#nrpn-dataentryfine\n       *\n       * @type {object}\n       *\n       * @property {string} type `nrpn-dataentryfine`\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {string} parameter The registered parameter's name\n       * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n       * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n       * @property {number} value The received value as a normalized number between 0 and 1.\n       * @property {number} rawValue The value as received (0-127)\n       */ /**\n       * Event emitted when an **NRPN data increment** message is received on the input. The specific\n       * parameter to which the message applies can be found in the event's `parameter` property. It\n       * is one of the ones defined in\n       * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n       *\n       * @event InputChannel#nrpn-dataincrement\n       *\n       * @type {object}\n       *\n       * @property {string} type `nrpn-dataincrement`\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {string} parameter The registered parameter's name\n       * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n       * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n       * @property {number} value The received value as a normalized number between 0 and 1.\n       * @property {number} rawValue The value as received (0-127)\n       */ /**\n       * Event emitted when an **NRPN data decrement** message is received on the input. The specific\n       * parameter to which the message applies can be found in the event's `parameter` property. It\n       * is one of the ones defined in\n       * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n       *\n       * @event InputChannel#nrpn-datadecrement\n       *\n       * @type {object}\n       *\n       * @property {string} type `nrpn-datadecrement`\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {string} parameter The registered parameter's name\n       * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n       * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n       * @property {number} value The received value as a normalized number between 0 and 1.\n       * @property {number} rawValue The value as received (0-127)\n       */ const event = {\n                target: e.target,\n                timestamp: e.timestamp,\n                message: e.message,\n                parameterMsb: paramMsb,\n                parameterLsb: paramLsb,\n                value: Utilities.from7bitToFloat(e.message.dataBytes[1]),\n                rawValue: e.message.dataBytes[1]\n            }; // Identify the parameter (by name for RPN and by number for NRPN)\n            if (type === \"rpn\") event.parameter = Object.keys(Enumerations.REGISTERED_PARAMETERS).find((key)=>{\n                return Enumerations.REGISTERED_PARAMETERS[key][0] === paramMsb && Enumerations.REGISTERED_PARAMETERS[key][1] === paramLsb;\n            });\n            else event.parameter = (paramMsb << 7) + paramLsb;\n             // Type and subtype\n            const subtype = Enumerations.CONTROL_CHANGE_MESSAGES[e.message.dataBytes[0]].name; // Emit specific event\n            event.type = `${type}-${subtype}`;\n            this.emit(event.type, event); // Begin Legacy Block (remove in v4)\n            const legacyEvent = Object.assign({}, event);\n            if (legacyEvent.type === \"nrpn-dataincrement\") legacyEvent.type = \"nrpn-databuttonincrement\";\n            else if (legacyEvent.type === \"nrpn-datadecrement\") legacyEvent.type = \"nrpn-databuttondecrement\";\n            else if (legacyEvent.type === \"rpn-dataincrement\") legacyEvent.type = \"rpn-databuttonincrement\";\n            else if (legacyEvent.type === \"rpn-datadecrement\") legacyEvent.type = \"rpn-databuttondecrement\";\n            this.emit(legacyEvent.type, legacyEvent); // End Legacy Block\n            /**\n       * Event emitted when any NRPN message is received on the input. There are four subtypes of NRPN\n       * messages:\n       *\n       *   * `nrpn-dataentrycoarse`\n       *   * `nrpn-dataentryfine`\n       *   * `nrpn-dataincrement`\n       *   * `nrpn-datadecrement`\n       *\n       * The parameter to which the message applies can be found in the event's `parameter` property.\n       *\n       * @event InputChannel#nrpn\n       *\n       * @type {object}\n       *\n       * @property {string} type `nrpn`\n       * @property {string} subtype The precise type of NRPN message that was received.\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} parameter The non-registered parameter number (0-16383)\n       * @property {number} parameterMsb The MSB portion of the non-registered parameter number\n       * (0-127)\n       * @property {number} parameterLsb: The LSB portion of the non-registered parameter number\n       * (0-127)\n       * @property {number} value The received value as a normalized number between 0 and 1.\n       * @property {number} rawValue The value as received (0-127)\n       */ /**\n       * Event emitted when any RPN message is received on the input. There are four subtypes of RPN\n       * messages:\n       *\n       *   * `rpn-dataentrycoarse`\n       *   * `rpn-dataentryfine`\n       *   * `rpn-dataincrement`\n       *   * `rpn-datadecrement`\n       *\n       * The parameter to which the message applies can be found in the event's `parameter` property.\n       * It is one of the ones defined in\n       * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n       *\n       * @event InputChannel#rpn\n       *\n       * @type {object}\n       *\n       * @property {string} type `rpn`\n       * @property {string} subtype The precise type of RPN message that was received.\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {string} parameter The registered parameter's name\n       * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n       * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n       * @property {number} value The received value as a normalized number between 0 and 1.\n       * @property {number} rawValue The value as received (0-127)\n       */ // Emit general event\n            event.type = type;\n            event.subtype = subtype;\n            this.emit(event.type, event);\n        }\n        /**\n     * @deprecated since version 3.\n     * @private\n     */ getChannelModeByNumber(number) {\n            if (wm.validation) {\n                console.warn(\"The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class.\");\n                number = Math.floor(number);\n            }\n            return Utilities.getChannelModeByNumber(number);\n        }\n        /**\n     * @deprecated since version 3.\n     * @private\n     */ getCcNameByNumber(number) {\n            if (wm.validation) {\n                console.warn(\"The 'getCcNameByNumber()' method has been moved to the 'Utilities' class.\");\n                number = parseInt(number);\n                if (!(number >= 0 && number <= 127)) throw new RangeError(\"Invalid control change number.\");\n            }\n            return Utilities.getCcNameByNumber(number);\n        }\n        /**\n     * Returns the playing status of the specified note (`true` if the note is currently playing,\n     * `false` if it is not). The `note` parameter can be an unsigned integer (0-127), a note\n     * identifier (`\"C4\"`, `\"G#5\"`, etc.) or a [`Note`]{@link Note} object.\n     *\n     * IF the note is specified using an integer (0-127), no octave offset will be applied.\n     *\n     * @param {number|string|Note} note The note to get the state for. The\n     * [`octaveOffset`](#octaveOffset) (channel, input and global) will be factored in for note\n     * identifiers and [`Note`]{@link Note} objects.\n     * @returns {boolean}\n     * @since version 3.0.0\n     */ getNoteState(note) {\n            // If it's a note object, we simply use the identifier\n            if (note instanceof Note) note = note.identifier;\n            const number = Utilities.guessNoteNumber(note, wm.octaveOffset + this.input.octaveOffset + this.octaveOffset);\n            return this.notesState[number];\n        }\n        /**\n     * An integer to offset the reported octave of incoming note-specific messages (`noteon`,\n     * `noteoff` and `keyaftertouch`). By default, middle C (MIDI note number 60) is placed on the 4th\n     * octave (C4).\n     *\n     * If, for example, `octaveOffset` is set to 2, MIDI note number 60 will be reported as C6. If\n     * `octaveOffset` is set to -1, MIDI note number 60 will be reported as C3.\n     *\n     * Note that this value is combined with the global offset value defined by\n     * [`WebMidi.octaveOffset`](WebMidi#octaveOffset) object and with the value defined on the parent\n     * input object with [`Input.octaveOffset`](Input#octaveOffset).\n     *\n     * @type {number}\n     *\n     * @since 3.0\n     */ get octaveOffset() {\n            return this._octaveOffset;\n        }\n        set octaveOffset(value) {\n            if (this.validation) {\n                value = parseInt(value);\n                if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n            }\n            this._octaveOffset = value;\n        }\n        /**\n     * The [`Input`](Input) this channel belongs to.\n     * @type {Input}\n     * @since 3.0\n     */ get input() {\n            return this._input;\n        }\n        /**\n     * This channel's MIDI number (1-16).\n     * @type {number}\n     * @since 3.0\n     */ get number() {\n            return this._number;\n        }\n        /**\n     * Whether RPN/NRPN events are parsed and dispatched.\n     * @type {boolean}\n     * @since 3.0\n     * @deprecated Use parameterNumberEventsEnabled instead.\n     * @private\n     */ get nrpnEventsEnabled() {\n            return this.parameterNumberEventsEnabled;\n        }\n        set nrpnEventsEnabled(value) {\n            if (this.validation) value = !!value;\n            this.parameterNumberEventsEnabled = value;\n        }\n    }\n    /**\n   * The `Message` class represents a single MIDI message. It has several properties that make it\n   * easy to make sense of the binary data it contains.\n   *\n   * @license Apache-2.0\n   * @since 3.0.0\n   */ class Message {\n        /**\n     * Creates a new `Message` object from raw MIDI data.\n     *\n     * @param {Uint8Array} data The raw data of the MIDI message as a\n     * [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)\n     * of integers between `0` and `255`.\n     */ constructor(data){\n            /**\n       * A\n       * [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)\n       * containing the bytes of the MIDI message. Each byte is an integer between `0` and `255`.\n       *\n       * @type {Uint8Array}\n       * @readonly\n       */ this.rawData = data;\n            /**\n       * An array containing all the bytes of the MIDI message. Each byte is an integer between `0`\n       * and `255`.\n       *\n       * @type {number[]}\n       * @readonly\n       */ this.data = Array.from(this.rawData);\n            /**\n       * The MIDI status byte of the message as an integer between `0` and `255`.\n       *\n       * @type {number}\n       * @readonly\n       */ this.statusByte = this.rawData[0];\n            /**\n       * A\n       * [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)\n       * of the data byte(s) of the MIDI message. When the message is a system exclusive message\n       * (sysex), `rawDataBytes` explicitly excludes the manufacturer ID and the sysex end byte so\n       * only the actual data is included.\n       *\n       * @type {Uint8Array}\n       * @readonly\n       */ this.rawDataBytes = this.rawData.slice(1);\n            /**\n       * An array of the the data byte(s) of the MIDI message (as opposed to the status byte). When\n       * the message is a system exclusive message (sysex), `dataBytes` explicitly excludes the\n       * manufacturer ID and the sysex end byte so only the actual data is included.\n       *\n       * @type {number[]}\n       * @readonly\n       */ this.dataBytes = this.data.slice(1);\n            /**\n       * A boolean indicating whether the MIDI message is a channel-specific message.\n       *\n       * @type {boolean}\n       * @readonly\n       */ this.isChannelMessage = false;\n            /**\n       * A boolean indicating whether the MIDI message is a system message (not specific to a\n       * channel).\n       *\n       * @type {boolean}\n       * @readonly\n       */ this.isSystemMessage = false;\n            /**\n       * An integer identifying the MIDI command. For channel-specific messages, the value is 4-bit\n       * and will be between `8` and `14`. For system messages, the value will be between `240` and\n       * `255`.\n       *\n       * @type {number}\n       * @readonly\n       */ this.command = undefined;\n            /**\n       * The MIDI channel number (`1` - `16`) that the message is targeting. This is only for\n       * channel-specific messages. For system messages, this will be left `undefined`.\n       *\n       * @type {number}\n       * @readonly\n       */ this.channel = undefined;\n            /**\n       * When the message is a system exclusive message (sysex), this property contains an array with\n       * either 1 or 3 entries that identify the manufacturer targeted by the message.\n       *\n       * To know how to translate these entries into manufacturer names, check out the official list:\n       * https://www.midi.org/specifications-old/item/manufacturer-id-numbers\n       *\n       * @type {number[]}\n       * @readonly\n       */ this.manufacturerId = undefined;\n            /**\n       * The type of message as a string (`\"noteon\"`, `\"controlchange\"`, `\"sysex\"`, etc.)\n       *\n       * @type {string}\n       * @readonly\n       */ this.type = undefined; // Assign values to property that vary according to whether they are channel-specific or system\n            if (this.statusByte < 240) {\n                this.isChannelMessage = true;\n                this.command = this.statusByte >> 4;\n                this.channel = (this.statusByte & 15) + 1;\n            } else {\n                this.isSystemMessage = true;\n                this.command = this.statusByte;\n            } // Assign type (depending on whether the message is channel-specific or system)\n            if (this.isChannelMessage) this.type = Utilities.getPropertyByValue(Enumerations.CHANNEL_MESSAGES, this.command);\n            else if (this.isSystemMessage) this.type = Utilities.getPropertyByValue(Enumerations.SYSTEM_MESSAGES, this.command);\n             // When the message is a sysex message, we add a manufacturer property and strip out the id from\n            // dataBytes and rawDataBytes.\n            if (this.statusByte === Enumerations.SYSTEM_MESSAGES.sysex) {\n                if (this.dataBytes[0] === 0) {\n                    this.manufacturerId = this.dataBytes.slice(0, 3);\n                    this.dataBytes = this.dataBytes.slice(3, this.rawDataBytes.length - 1);\n                    this.rawDataBytes = this.rawDataBytes.slice(3, this.rawDataBytes.length - 1);\n                } else {\n                    this.manufacturerId = [\n                        this.dataBytes[0]\n                    ];\n                    this.dataBytes = this.dataBytes.slice(1, this.dataBytes.length - 1);\n                    this.rawDataBytes = this.rawDataBytes.slice(1, this.rawDataBytes.length - 1);\n                }\n            }\n        }\n    }\n    /**\n   * The `Input` class represents a single MIDI input port. This object is automatically instantiated\n   * by the library according to the host's MIDI subsystem and does not need to be directly\n   * instantiated. Instead, you can access all `Input` objects by referring to the\n   * [`WebMidi.inputs`](WebMidi#inputs) array. You can also retrieve inputs by using methods such as\n   * [`WebMidi.getInputByName()`](WebMidi#getInputByName) and\n   * [`WebMidi.getInputById()`](WebMidi#getInputById).\n   *\n   * Note that a single MIDI device may expose several inputs and/or outputs.\n   *\n   * **Important**: the `Input` class does not directly fire channel-specific MIDI messages\n   * (such as [`noteon`](InputChannel#event:noteon) or\n   * [`controlchange`](InputChannel#event:controlchange), etc.). The [`InputChannel`](InputChannel)\n   * object does that. However, you can still use the\n   * [`Input.addListener()`](#addListener) method to listen to channel-specific events on multiple\n   * [`InputChannel`](InputChannel) objects at once.\n   *\n   * @fires Input#opened\n   * @fires Input#disconnected\n   * @fires Input#closed\n   * @fires Input#midimessage\n   *\n   * @fires Input#sysex\n   * @fires Input#timecode\n   * @fires Input#songposition\n   * @fires Input#songselect\n   * @fires Input#tunerequest\n   * @fires Input#clock\n   * @fires Input#start\n   * @fires Input#continue\n   * @fires Input#stop\n   * @fires Input#activesensing\n   * @fires Input#reset\n   *\n   * @fires Input#unknownmidimessage\n   *\n   * @extends EventEmitter\n   * @license Apache-2.0\n   */ class Input extends EventEmitter {\n        /**\n     * Creates an `Input` object.\n     *\n     * @param {MIDIInput} midiInput [`MIDIInput`](https://developer.mozilla.org/en-US/docs/Web/API/MIDIInput)\n     * object as provided by the MIDI subsystem (Web MIDI API).\n     */ constructor(midiInput){\n            super();\n            /**\n       * Reference to the actual MIDIInput object\n       * @private\n       */ this._midiInput = midiInput;\n            /**\n       * @type {number}\n       * @private\n       */ this._octaveOffset = 0;\n            /**\n       * Array containing the 16 [`InputChannel`](InputChannel) objects available for this `Input`. The\n       * channels are numbered 1 through 16.\n       *\n       * @type {InputChannel[]}\n       */ this.channels = [];\n            for(let i = 1; i <= 16; i++)this.channels[i] = new InputChannel(this, i);\n            /**\n       * @type {Forwarder[]}\n       * @private\n       */ this._forwarders = []; // Setup listeners\n            this._midiInput.onstatechange = this._onStateChange.bind(this);\n            this._midiInput.onmidimessage = this._onMidiMessage.bind(this);\n        }\n        /**\n     * Destroys the `Input` by removing all listeners, emptying the [`channels`](#channels) array and\n     * unlinking the MIDI subsystem. This is mostly for internal use.\n     *\n     * @returns {Promise<void>}\n     */ async destroy() {\n            this.removeListener();\n            this.channels.forEach((ch)=>ch.destroy());\n            this.channels = [];\n            this._forwarders = [];\n            if (this._midiInput) {\n                this._midiInput.onstatechange = null;\n                this._midiInput.onmidimessage = null;\n            }\n            await this.close();\n            this._midiInput = null;\n        }\n        /**\n     * Executed when a `\"statechange\"` event occurs.\n     *\n     * @param e\n     * @private\n     */ _onStateChange(e) {\n            let event = {\n                timestamp: wm.time,\n                target: this,\n                port: this // for consistency\n            };\n            if (e.port.connection === \"open\") {\n                /**\n         * Event emitted when the `Input` has been opened by calling the [`open()`]{@link #open}\n         * method.\n         *\n         * @event Input#opened\n         * @type {object}\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         * @property {string} type `opened`\n         * @property {Input} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         */ event.type = \"opened\";\n                this.emit(\"opened\", event);\n            } else if (e.port.connection === \"closed\" && e.port.state === \"connected\") {\n                /**\n         * Event emitted when the `Input` has been closed by calling the\n         * [`close()`]{@link #close} method.\n         *\n         * @event Input#closed\n         * @type {object}\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         * @property {string} type `closed`\n         * @property {Input} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         */ event.type = \"closed\";\n                this.emit(\"closed\", event);\n            } else if (e.port.connection === \"closed\" && e.port.state === \"disconnected\") {\n                /**\n         * Event emitted when the `Input` becomes unavailable. This event is typically fired\n         * when the MIDI device is unplugged.\n         *\n         * @event Input#disconnected\n         * @type {object}\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         * @property {string} type `disconnected`\n         * @property {Input} port Object with properties describing the {@link Input} that was\n         * disconnected. This is not the actual `Input` as it is no longer available.\n         * @property {Input} target The object that dispatched the event.\n         */ event.type = \"disconnected\";\n                event.port = {\n                    connection: e.port.connection,\n                    id: e.port.id,\n                    manufacturer: e.port.manufacturer,\n                    name: e.port.name,\n                    state: e.port.state,\n                    type: e.port.type\n                };\n                this.emit(\"disconnected\", event);\n            } else if (e.port.connection === \"pending\" && e.port.state === \"disconnected\") ;\n            else console.warn(\"This statechange event was not caught: \", e.port.connection, e.port.state);\n        }\n        /**\n     * Executed when a `\"midimessage\"` event is received\n     * @param e\n     * @private\n     */ _onMidiMessage(e) {\n            // Create Message object from MIDI data\n            const message = new Message(e.data);\n            /**\n       * Event emitted when any MIDI message is received on an `Input`.\n       *\n       * @event Input#midimessage\n       *\n       * @type {object}\n       *\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Input} target The object that dispatched the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `midimessage`\n       *\n       * @since 2.1\n       */ const event = {\n                port: this,\n                target: this,\n                message: message,\n                timestamp: e.timeStamp,\n                type: \"midimessage\",\n                data: message.data,\n                // @deprecated (will be removed in v4)\n                rawData: message.data,\n                // @deprecated (will be removed in v4)\n                statusByte: message.data[0],\n                // @deprecated (will be removed in v4)\n                dataBytes: message.dataBytes // @deprecated (will be removed in v4)\n            };\n            this.emit(\"midimessage\", event); // Messages are forwarded to InputChannel if they are channel messages or parsed locally for\n            // system messages.\n            if (message.isSystemMessage) // system messages\n            this._parseEvent(event);\n            else if (message.isChannelMessage) // channel messages\n            this.channels[message.channel]._processMidiMessageEvent(event);\n             // Forward message if forwarders have been defined\n            this._forwarders.forEach((forwarder)=>forwarder.forward(message));\n        }\n        /**\n     * @private\n     */ _parseEvent(e) {\n            // Make a shallow copy of the incoming event so we can use it as the new event.\n            const event = Object.assign({}, e);\n            event.type = event.message.type || \"unknownmidimessage\"; // Add custom property for 'songselect'\n            if (event.type === \"songselect\") {\n                event.song = e.data[1] + 1; // deprecated\n                event.value = e.data[1];\n                event.rawValue = event.value;\n            } // Emit event\n            this.emit(event.type, event);\n        }\n        /**\n     * Opens the input for usage. This is usually unnecessary as the port is opened automatically when\n     * WebMidi is enabled.\n     *\n     * @returns {Promise<Input>} The promise is fulfilled with the `Input` object.\n     */ async open() {\n            // Explicitly opens the port for usage. This is not mandatory. When the port is not explicitly\n            // opened, it is implicitly opened (asynchronously) when assigning a listener to the\n            // `onmidimessage` property of the `MIDIInput`. We do it explicitly so that 'connected' events\n            // are dispatched immediately and that we are ready to listen.\n            try {\n                await this._midiInput.open();\n            } catch (err) {\n                return Promise.reject(err);\n            }\n            return Promise.resolve(this);\n        }\n        /**\n     * Closes the input. When an input is closed, it cannot be used to listen to MIDI messages until\n     * the input is opened again by calling [`Input.open()`](Input#open).\n     *\n     * **Note**: if what you want to do is stop events from being dispatched, you should use\n     * [`eventsSuspended`](#eventsSuspended) instead.\n     *\n     * @returns {Promise<Input>} The promise is fulfilled with the `Input` object\n     */ async close() {\n            // We close the port. This triggers a statechange event which, in turn, will emit the 'closed'\n            // event.\n            if (!this._midiInput) return Promise.resolve(this);\n            try {\n                await this._midiInput.close();\n            } catch (err) {\n                return Promise.reject(err);\n            }\n            return Promise.resolve(this);\n        }\n        /**\n     * @private\n     * @deprecated since v3.0.0 (moved to 'Utilities' class)\n     */ getChannelModeByNumber() {\n            if (wm.validation) console.warn(\"The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class.\");\n        }\n        /**\n     * Adds an event listener that will trigger a function callback when the specified event is\n     * dispatched. The event usually is **input-wide** but can also be **channel-specific**.\n     *\n     * Input-wide events do not target a specific MIDI channel so it makes sense to listen for them\n     * at the `Input` level and not at the [`InputChannel`](InputChannel) level. Channel-specific\n     * events target a specific channel. Usually, in this case, you would add the listener to the\n     * [`InputChannel`](InputChannel) object. However, as a convenience, you can also listen to\n     * channel-specific events directly on an `Input`. This allows you to react to a channel-specific\n     * event no matter which channel it actually came through.\n     *\n     * When listening for an event, you simply need to specify the event name and the function to\n     * execute:\n     *\n     * ```javascript\n     * const listener = WebMidi.inputs[0].addListener(\"midimessage\", e => {\n     *   console.log(e);\n     * });\n     * ```\n     *\n     * Calling the function with an input-wide event (such as\n     * [`\"midimessage\"`]{@link #event:midimessage}), will return the [`Listener`](Listener) object\n     * that was created.\n     *\n     * If you call the function with a channel-specific event (such as\n     * [`\"noteon\"`]{@link InputChannel#event:noteon}), it will return an array of all\n     * [`Listener`](Listener) objects that were created (one for each channel):\n     *\n     * ```javascript\n     * const listeners = WebMidi.inputs[0].addListener(\"noteon\", someFunction);\n     * ```\n     *\n     * You can also specify which channels you want to add the listener to:\n     *\n     * ```javascript\n     * const listeners = WebMidi.inputs[0].addListener(\"noteon\", someFunction, {channels: [1, 2, 3]});\n     * ```\n     *\n     * In this case, `listeners` is an array containing 3 [`Listener`](Listener) objects. The order of\n     * the listeners in the array follows the order the channels were specified in.\n     *\n     * Note that, when adding channel-specific listeners, it is the [`InputChannel`](InputChannel)\n     * instance that actually gets a listener added and not the `Input` instance. You can check that\n     * by calling [`InputChannel.hasListener()`](InputChannel#hasListener()).\n     *\n     * There are 8 families of events you can listen to:\n     *\n     * 1. **MIDI System Common** Events (input-wide)\n     *\n     *    * [`songposition`]{@link Input#event:songposition}\n     *    * [`songselect`]{@link Input#event:songselect}\n     *    * [`sysex`]{@link Input#event:sysex}\n     *    * [`timecode`]{@link Input#event:timecode}\n     *    * [`tunerequest`]{@link Input#event:tunerequest}\n     *\n     * 2. **MIDI System Real-Time** Events (input-wide)\n     *\n     *    * [`clock`]{@link Input#event:clock}\n     *    * [`start`]{@link Input#event:start}\n     *    * [`continue`]{@link Input#event:continue}\n     *    * [`stop`]{@link Input#event:stop}\n     *    * [`activesensing`]{@link Input#event:activesensing}\n     *    * [`reset`]{@link Input#event:reset}\n     *\n     * 3. **State Change** Events (input-wide)\n     *\n     *    * [`opened`]{@link Input#event:opened}\n     *    * [`closed`]{@link Input#event:closed}\n     *    * [`disconnected`]{@link Input#event:disconnected}\n     *\n     * 4. **Catch-All** Events (input-wide)\n     *\n     *    * [`midimessage`]{@link Input#event:midimessage}\n     *    * [`unknownmidimessage`]{@link Input#event:unknownmidimessage}\n     *\n     * 5. **Channel Voice** Events (channel-specific)\n     *\n     *    * [`channelaftertouch`]{@link InputChannel#event:channelaftertouch}\n     *    * [`controlchange`]{@link InputChannel#event:controlchange}\n     *      * [`controlchange-controller0`]{@link InputChannel#event:controlchange-controller0}\n     *      * [`controlchange-controller1`]{@link InputChannel#event:controlchange-controller1}\n     *      * [`controlchange-controller2`]{@link InputChannel#event:controlchange-controller2}\n     *      * (...)\n     *      * [`controlchange-controller127`]{@link InputChannel#event:controlchange-controller127}\n     *    * [`keyaftertouch`]{@link InputChannel#event:keyaftertouch}\n     *    * [`noteoff`]{@link InputChannel#event:noteoff}\n     *    * [`noteon`]{@link InputChannel#event:noteon}\n     *    * [`pitchbend`]{@link InputChannel#event:pitchbend}\n     *    * [`programchange`]{@link InputChannel#event:programchange}\n     *\n     *    Note: you can listen for a specific control change message by using an event name like this:\n     *    `controlchange-controller23`, `controlchange-controller99`, `controlchange-controller122`,\n     *    etc.\n     *\n     * 6. **Channel Mode** Events (channel-specific)\n     *\n     *    * [`allnotesoff`]{@link InputChannel#event:allnotesoff}\n     *    * [`allsoundoff`]{@link InputChannel#event:allsoundoff}\n     *    * [`localcontrol`]{@link InputChannel#event:localcontrol}\n     *    * [`monomode`]{@link InputChannel#event:monomode}\n     *    * [`omnimode`]{@link InputChannel#event:omnimode}\n     *    * [`resetallcontrollers`]{@link InputChannel#event:resetallcontrollers}\n     *\n     * 7. **NRPN** Events (channel-specific)\n     *\n     *    * [`nrpn`]{@link InputChannel#event:nrpn}\n     *    * [`nrpn-dataentrycoarse`]{@link InputChannel#event:nrpn-dataentrycoarse}\n     *    * [`nrpn-dataentryfine`]{@link InputChannel#event:nrpn-dataentryfine}\n     *    * [`nrpn-dataincrement`]{@link InputChannel#event:nrpn-dataincrement}\n     *    * [`nrpn-datadecrement`]{@link InputChannel#event:nrpn-datadecrement}\n     *\n     * 8. **RPN** Events (channel-specific)\n     *\n     *    * [`rpn`]{@link InputChannel#event:rpn}\n     *    * [`rpn-dataentrycoarse`]{@link InputChannel#event:rpn-dataentrycoarse}\n     *    * [`rpn-dataentryfine`]{@link InputChannel#event:rpn-dataentryfine}\n     *    * [`rpn-dataincrement`]{@link InputChannel#event:rpn-dataincrement}\n     *    * [`rpn-datadecrement`]{@link InputChannel#event:rpn-datadecrement}\n     *\n     * @param event {string | EventEmitter.ANY_EVENT} The type of the event.\n     *\n     * @param listener {function} A callback function to execute when the specified event is detected.\n     * This function will receive an event parameter object. For details on this object's properties,\n     * check out the documentation for the various events (links above).\n     *\n     * @param {object} [options={}]\n     *\n     * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n     * callback function. This array is stored in the [`arguments`](Listener#arguments) property of\n     * the [`Listener`](Listener) object and can be retrieved or modified as desired.\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * An integer between 1 and 16 or an array of such integers representing the MIDI channel(s) to\n     * listen on. If no channel is specified, all channels will be used. This parameter is ignored for\n     * input-wide events.\n     *\n     * @param {object} [options.context=this] The value of `this` in the callback function.\n     *\n     * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n     * automatically expires.\n     *\n     * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n     * of the listeners array and thus be triggered before others.\n     *\n     * @param {number} [options.remaining=Infinity] The number of times after which the callback\n     * should automatically be removed.\n     *\n     * @returns {Listener|Listener[]} If the event is input-wide, a single [`Listener`](Listener)\n     * object is returned. If the event is channel-specific, an array of all the\n     * [`Listener`](Listener) objects is returned (one for each channel).\n     */ addListener(event, listener, options = {}) {\n            if (wm.validation) // Legacy compatibility\n            {\n                if (typeof options === \"function\") {\n                    let channels = listener != undefined ? [].concat(listener) : undefined; // clone\n                    listener = options;\n                    options = {\n                        channels: channels\n                    };\n                }\n            } // Check if the event is channel-specific or input-wide\n            if (Enumerations.CHANNEL_EVENTS.includes(event)) {\n                // If no channel defined, use all.\n                if (options.channels === undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n                let listeners = [];\n                Utilities.sanitizeChannels(options.channels).forEach((ch)=>{\n                    listeners.push(this.channels[ch].addListener(event, listener, options));\n                });\n                return listeners;\n            } else return super.addListener(event, listener, options);\n        }\n        /**\n     * Adds a one-time event listener that will trigger a function callback when the specified event\n     * happens. The event can be **channel-bound** or **input-wide**. Channel-bound events are\n     * dispatched by [`InputChannel`]{@link InputChannel} objects and are tied to a specific MIDI\n     * channel while input-wide events are dispatched by the `Input` object itself and are not tied\n     * to a specific channel.\n     *\n     * Calling the function with an input-wide event (such as\n     * [`\"midimessage\"`]{@link #event:midimessage}), will return the [`Listener`](Listener) object\n     * that was created.\n     *\n     * If you call the function with a channel-specific event (such as\n     * [`\"noteon\"`]{@link InputChannel#event:noteon}), it will return an array of all\n     * [`Listener`](Listener) objects that were created (one for each channel):\n     *\n     * ```javascript\n     * const listeners = WebMidi.inputs[0].addOneTimeListener(\"noteon\", someFunction);\n     * ```\n     *\n     * You can also specify which channels you want to add the listener to:\n     *\n     * ```javascript\n     * const listeners = WebMidi.inputs[0].addOneTimeListener(\"noteon\", someFunction, {channels: [1, 2, 3]});\n     * ```\n     *\n     * In this case, the `listeners` variable contains an array of 3 [`Listener`](Listener) objects.\n     *\n     * The code above will add a listener for the `\"noteon\"` event and call `someFunction` when the\n     * event is triggered on MIDI channels `1`, `2` or `3`.\n     *\n     * Note that, when adding events to channels, it is the [`InputChannel`](InputChannel) instance\n     * that actually gets a listener added and not the `Input` instance.\n     *\n     * Note: if you want to add a listener to a single MIDI channel you should probably do so directly\n     * on the [`InputChannel`](InputChannel) object itself.\n     *\n     * There are 8 families of events you can listen to:\n     *\n     * 1. **MIDI System Common** Events (input-wide)\n     *\n     *    * [`songposition`]{@link Input#event:songposition}\n     *    * [`songselect`]{@link Input#event:songselect}\n     *    * [`sysex`]{@link Input#event:sysex}\n     *    * [`timecode`]{@link Input#event:timecode}\n     *    * [`tunerequest`]{@link Input#event:tunerequest}\n     *\n     * 2. **MIDI System Real-Time** Events (input-wide)\n     *\n     *    * [`clock`]{@link Input#event:clock}\n     *    * [`start`]{@link Input#event:start}\n     *    * [`continue`]{@link Input#event:continue}\n     *    * [`stop`]{@link Input#event:stop}\n     *    * [`activesensing`]{@link Input#event:activesensing}\n     *    * [`reset`]{@link Input#event:reset}\n     *\n     * 3. **State Change** Events (input-wide)\n     *\n     *    * [`opened`]{@link Input#event:opened}\n     *    * [`closed`]{@link Input#event:closed}\n     *    * [`disconnected`]{@link Input#event:disconnected}\n     *\n     * 4. **Catch-All** Events (input-wide)\n     *\n     *    * [`midimessage`]{@link Input#event:midimessage}\n     *    * [`unknownmidimessage`]{@link Input#event:unknownmidimessage}\n     *\n     * 5. **Channel Voice** Events (channel-specific)\n     *\n     *    * [`channelaftertouch`]{@link InputChannel#event:channelaftertouch}\n     *    * [`controlchange`]{@link InputChannel#event:controlchange}\n     *      * [`controlchange-controller0`]{@link InputChannel#event:controlchange-controller0}\n     *      * [`controlchange-controller1`]{@link InputChannel#event:controlchange-controller1}\n     *      * [`controlchange-controller2`]{@link InputChannel#event:controlchange-controller2}\n     *      * (...)\n     *      * [`controlchange-controller127`]{@link InputChannel#event:controlchange-controller127}\n     *    * [`keyaftertouch`]{@link InputChannel#event:keyaftertouch}\n     *    * [`noteoff`]{@link InputChannel#event:noteoff}\n     *    * [`noteon`]{@link InputChannel#event:noteon}\n     *    * [`pitchbend`]{@link InputChannel#event:pitchbend}\n     *    * [`programchange`]{@link InputChannel#event:programchange}\n     *\n     *    Note: you can listen for a specific control change message by using an event name like this:\n     *    `controlchange-controller23`, `controlchange-controller99`, `controlchange-controller122`,\n     *    etc.\n     *\n     * 6. **Channel Mode** Events (channel-specific)\n     *\n     *    * [`allnotesoff`]{@link InputChannel#event:allnotesoff}\n     *    * [`allsoundoff`]{@link InputChannel#event:allsoundoff}\n     *    * [`localcontrol`]{@link InputChannel#event:localcontrol}\n     *    * [`monomode`]{@link InputChannel#event:monomode}\n     *    * [`omnimode`]{@link InputChannel#event:omnimode}\n     *    * [`resetallcontrollers`]{@link InputChannel#event:resetallcontrollers}\n     *\n     * 7. **NRPN** Events (channel-specific)\n     *\n     *    * [`nrpn`]{@link InputChannel#event:nrpn}\n     *    * [`nrpn-dataentrycoarse`]{@link InputChannel#event:nrpn-dataentrycoarse}\n     *    * [`nrpn-dataentryfine`]{@link InputChannel#event:nrpn-dataentryfine}\n     *    * [`nrpn-dataincrement`]{@link InputChannel#event:nrpn-dataincrement}\n     *    * [`nrpn-datadecrement`]{@link InputChannel#event:nrpn-datadecrement}\n     *\n     * 8. **RPN** Events (channel-specific)\n     *\n     *    * [`rpn`]{@link InputChannel#event:rpn}\n     *    * [`rpn-dataentrycoarse`]{@link InputChannel#event:rpn-dataentrycoarse}\n     *    * [`rpn-dataentryfine`]{@link InputChannel#event:rpn-dataentryfine}\n     *    * [`rpn-dataincrement`]{@link InputChannel#event:rpn-dataincrement}\n     *    * [`rpn-datadecrement`]{@link InputChannel#event:rpn-datadecrement}\n     *\n     * @param event {string} The type of the event.\n     *\n     * @param listener {function} A callback function to execute when the specified event is detected.\n     * This function will receive an event parameter object. For details on this object's properties,\n     * check out the documentation for the various events (links above).\n     *\n     * @param {object} [options={}]\n     *\n     * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n     * callback function. This array is stored in the [`arguments`](Listener#arguments) property of\n     * the [`Listener`](Listener) object and can be retrieved or modified as desired.\n     *\n     * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of\n     * such integers representing the MIDI channel(s) to listen on. This parameter is ignored for\n     * input-wide events.\n     *\n     * @param {object} [options.context=this] The value of `this` in the callback function.\n     *\n     * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n     * automatically expires.\n     *\n     * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n     * of the listeners array and thus be triggered before others.\n     *\n     * @returns {Listener[]} An array of all [`Listener`](Listener) objects that were created.\n     */ addOneTimeListener(event, listener, options = {}) {\n            options.remaining = 1;\n            return this.addListener(event, listener, options);\n        }\n        /**\n     * This is an alias to the [Input.addListener()]{@link Input#addListener} method.\n     * @since 2.0.0\n     * @deprecated since v3.0\n     * @private\n     */ on(event, channel, listener, options) {\n            return this.addListener(event, channel, listener, options);\n        }\n        /**\n     * Checks if the specified event type is already defined to trigger the specified callback\n     * function. For channel-specific events, the function will return `true` only if all channels\n     * have the listener defined.\n     *\n     * @param event {string|Symbol} The type of the event.\n     *\n     * @param listener {function} The callback function to check for.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of such\n     * integers representing the MIDI channel(s) to check. This parameter is ignored for input-wide\n     * events.\n     *\n     * @returns {boolean} Boolean value indicating whether or not the `Input` or\n     * [`InputChannel`](InputChannel) already has this listener defined.\n     */ hasListener(event, listener, options = {}) {\n            if (wm.validation) // Legacy compatibility\n            {\n                if (typeof options === \"function\") {\n                    let channels = [].concat(listener); // clone\n                    listener = options;\n                    options = {\n                        channels: channels\n                    };\n                }\n            }\n            if (Enumerations.CHANNEL_EVENTS.includes(event)) {\n                // If no channel defined, use all.\n                if (options.channels === undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n                return Utilities.sanitizeChannels(options.channels).every((ch)=>{\n                    return this.channels[ch].hasListener(event, listener);\n                });\n            } else return super.hasListener(event, listener);\n        }\n        /**\n     * Removes the specified event listener. If no listener is specified, all listeners matching the\n     * specified event will be removed. If the event is channel-specific, the listener will be removed\n     * from all [`InputChannel`]{@link InputChannel} objects belonging to that channel. If no event is\n     * specified, all listeners for the `Input` as well as all listeners for all\n     * [`InputChannel`]{@link InputChannel} objects belonging to the `Input` will be removed.\n     *\n     * By default, channel-specific listeners will be removed from all\n     * [`InputChannel`]{@link InputChannel} objects unless the `options.channel` narrows it down.\n     *\n     * @param [type] {string} The type of the event.\n     *\n     * @param [listener] {function} The callback function to check for.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of\n     * such integers representing the MIDI channel(s) to match. This parameter is ignored for\n     * input-wide events.\n     *\n     * @param {*} [options.context] Only remove the listeners that have this exact context.\n     *\n     * @param {number} [options.remaining] Only remove the listener if it has exactly that many\n     * remaining times to be executed.\n     */ removeListener(event, listener, options = {}) {\n            if (wm.validation) // Legacy compatibility\n            {\n                if (typeof options === \"function\") {\n                    let channels = [].concat(listener); // clone\n                    listener = options;\n                    options = {\n                        channels: channels\n                    };\n                }\n            }\n            if (options.channels === undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS; // If the event is not specified, remove everything (channel-specific and input-wide)!\n            if (event == undefined) {\n                Utilities.sanitizeChannels(options.channels).forEach((ch)=>{\n                    if (this.channels[ch]) this.channels[ch].removeListener();\n                });\n                return super.removeListener();\n            } // If the event is specified, check if it's channel-specific or input-wide.\n            if (Enumerations.CHANNEL_EVENTS.includes(event)) Utilities.sanitizeChannels(options.channels).forEach((ch)=>{\n                this.channels[ch].removeListener(event, listener, options);\n            });\n            else super.removeListener(event, listener, options);\n        }\n        /**\n     * Adds a forwarder that will forward all incoming MIDI messages matching the criteria to the\n     * specified [`Output`](Output) destination(s). This is akin to the hardware MIDI THRU port, with\n     * the added benefit of being able to filter which data is forwarded.\n     *\n     * @param {Output|Output[]} output An [`Output`](Output) object, or an array of such\n     * objects, to forward messages to.\n     * @param {object} [options={}]\n     * @param {string|string[]} [options.types=(all messages)] A message type, or an array of such\n     * types (`noteon`, `controlchange`, etc.), that the message type must match in order to be\n     * forwarded. If this option is not specified, all types of messages will be forwarded. Valid\n     * messages are the ones found in either\n     * [`SYSTEM_MESSAGES`](Enumerations#SYSTEM_MESSAGES) or\n     * [`CHANNEL_MESSAGES`](Enumerations#CHANNEL_MESSAGES).\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * A MIDI channel number or an array of channel numbers that the message must match in order to be\n     * forwarded. By default all MIDI channels are included (`1` to `16`).\n     *\n     * @returns {Forwarder} The [`Forwarder`](Forwarder) object created to handle the forwarding. This\n     * is useful if you wish to manipulate or remove the [`Forwarder`](Forwarder) later on.\n     */ addForwarder(output, options = {}) {\n            let forwarder; // Unless 'output' is a forwarder, create a new forwarder\n            if (output instanceof Forwarder) forwarder = output;\n            else forwarder = new Forwarder(output, options);\n            this._forwarders.push(forwarder);\n            return forwarder;\n        }\n        /**\n     * Removes the specified [`Forwarder`](Forwarder) object from the input.\n     *\n     * @param {Forwarder} forwarder The [`Forwarder`](Forwarder) to remove (the\n     * [`Forwarder`](Forwarder) object is returned when calling `addForwarder()`.\n     */ removeForwarder(forwarder) {\n            this._forwarders = this._forwarders.filter((item)=>item !== forwarder);\n        }\n        /**\n     * Checks whether the specified [`Forwarder`](Forwarder) object has already been attached to this\n     * input.\n     *\n     * @param {Forwarder} forwarder The [`Forwarder`](Forwarder) to check for (the\n     * [`Forwarder`](Forwarder) object is returned when calling [`addForwarder()`](#addForwarder).\n     * @returns {boolean}\n     */ hasForwarder(forwarder) {\n            return this._forwarders.includes(forwarder);\n        }\n        /**\n     * Name of the MIDI input.\n     *\n     * @type {string}\n     * @readonly\n     */ get name() {\n            return this._midiInput.name;\n        }\n        /**\n     * ID string of the MIDI port. The ID is host-specific. Do not expect the same ID on different\n     * platforms. For example, Google Chrome and the Jazz-Plugin report completely different IDs for\n     * the same port.\n     *\n     * @type {string}\n     * @readonly\n     */ get id() {\n            return this._midiInput.id;\n        }\n        /**\n     * Input port's connection state: `pending`, `open` or `closed`.\n     *\n     * @type {string}\n     * @readonly\n     */ get connection() {\n            return this._midiInput.connection;\n        }\n        /**\n     * Name of the manufacturer of the device that makes this input port available.\n     *\n     * @type {string}\n     * @readonly\n     */ get manufacturer() {\n            return this._midiInput.manufacturer;\n        }\n        /**\n     * An integer to offset the reported octave of incoming notes. By default, middle C (MIDI note\n     * number 60) is placed on the 4th octave (C4).\n     *\n     * If, for example, `octaveOffset` is set to 2, MIDI note number 60 will be reported as C6. If\n     * `octaveOffset` is set to -1, MIDI note number 60 will be reported as C3.\n     *\n     * Note that this value is combined with the global offset value defined in the\n     * [`WebMidi.octaveOffset`](WebMidi#octaveOffset) property (if any).\n     *\n     * @type {number}\n     *\n     * @since 3.0\n     */ get octaveOffset() {\n            return this._octaveOffset;\n        }\n        set octaveOffset(value) {\n            if (this.validation) {\n                value = parseInt(value);\n                if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n            }\n            this._octaveOffset = value;\n        }\n        /**\n     * State of the input port: `connected` or `disconnected`.\n     *\n     * @type {string}\n     * @readonly\n     */ get state() {\n            return this._midiInput.state;\n        }\n        /**\n     * The port type. In the case of the `Input` object, this is always: `input`.\n     *\n     * @type {string}\n     * @readonly\n     */ get type() {\n            return this._midiInput.type;\n        }\n        /**\n     * @type {boolean}\n     * @private\n     * @deprecated since v3.0.0 (moved to 'InputChannel' class)\n     */ get nrpnEventsEnabled() {\n            if (wm.validation) console.warn(\"The 'nrpnEventsEnabled' property has been moved to the 'InputChannel' class.\");\n            return false;\n        }\n    } // Events that do not have code below them must be placed outside the class definition (?!)\n    /**\n   * Input-wide (system) event emitted when a **system exclusive** message has been received.\n   * You should note that, to receive `sysex` events, you must call the\n   * [`WebMidi.enable()`](WebMidi#enable()) method with the `sysex` option set to `true`:\n   *\n   * ```js\n   * WebMidi.enable({sysex: true})\n   *  .then(() => console.log(\"WebMidi has been enabled with sysex support.\"))\n   * ```\n   *\n   * @event Input#sysex\n   *\n   * @type {object}\n   *\n   * @property {Input} port The `Input` that triggered the event.\n   * @property {Input} target The object that dispatched the event.\n   * @property {Message} message A [`Message`](Message) object containing information about the\n   * incoming MIDI message.\n   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n   * milliseconds since the navigation start of the document).\n   * @property {string} type `sysex`\n   *\n   */ /**\n   * Input-wide (system) event emitted when a **time code quarter frame** message has been\n   * received.\n   *\n   * @event Input#timecode\n   *\n   * @type {object}\n   *\n   * @property {Input} port The `Input` that triggered the event.\n   * @property {Input} target The object that dispatched the event.\n   * @property {Message} message A [`Message`](Message) object containing information about the\n   * incoming MIDI message.\n   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n   * milliseconds since the navigation start of the document).\n   * @property {string} type `timecode`\n   *\n   * @since 2.1\n   */ /**\n   * Input-wide (system) event emitted when a **song position** message has been received.\n   *\n   * @event Input#songposition\n   *\n   * @type {object}\n   *\n   * @property {Input} port The `Input` that triggered the event.\n   * @property {Input} target The object that dispatched the event.\n   * @property {Message} message A [`Message`](Message) object containing information about the\n   * incoming MIDI message.\n   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n   * milliseconds since the navigation start of the document).\n   * @property {string} type `songposition`\n   *\n   * @since 2.1\n   */ /**\n   * Input-wide (system) event emitted when a **song select** message has been received.\n   *\n   * @event Input#songselect\n   *\n   * @type {object}\n   *\n   * @property {Input} port The `Input` that triggered the event.\n   * @property {Input} target The object that dispatched the event.\n   * @property {Message} message A [`Message`](Message) object containing information about the\n   * incoming MIDI message.\n   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n   * milliseconds since the navigation start of the document).\n   * @property {string} value Song (or sequence) number to select (0-127)\n   * @property {string} rawValue Song (or sequence) number to select (0-127)\n   *\n   * @since 2.1\n   */ /**\n   * Input-wide (system) event emitted when a **tune request** message has been received.\n   *\n   * @event Input#tunerequest\n   *\n   * @type {object}\n   *\n   * @property {Input} port The `Input` that triggered the event.\n   * @property {Input} target The object that dispatched the event.\n   * @property {Message} message A [`Message`](Message) object containing information about the\n   * incoming MIDI message.\n   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n   * milliseconds since the navigation start of the document).\n   * @property {string} type `tunerequest`\n   *\n   * @since 2.1\n   */ /**\n   * Input-wide (system) event emitted when a **timing clock** message has been received.\n   *\n   * @event Input#clock\n   *\n   * @type {object}\n   *\n   * @property {Input} port The `Input` that triggered the event.\n   * @property {Input} target The object that dispatched the event.\n   * @property {Message} message A [`Message`](Message) object containing information about the\n   * incoming MIDI message.\n   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n   * milliseconds since the navigation start of the document).\n   * @property {string} type `clock`\n   *\n   * @since 2.1\n   */ /**\n   * Input-wide (system) event emitted when a **start** message has been received.\n   *\n   * @event Input#start\n   *\n   * @type {object}\n   *\n   * @property {Input} port The `Input` that triggered the event.\n   * @property {Input} target The object that dispatched the event.\n   * @property {Message} message A [`Message`](Message) object containing information about the\n   * incoming MIDI message.\n   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n   * milliseconds since the navigation start of the document).\n   * @property {string} type `start`\n   *\n   * @since 2.1\n   */ /**\n   * Input-wide (system) event emitted when a **continue** message has been received.\n   *\n   * @event Input#continue\n   *\n   * @type {object}\n   *\n   * @property {Input} port The `Input` that triggered the event.\n   * @property {Input} target The object that dispatched the event.\n   * @property {Message} message A [`Message`](Message) object containing information about the\n   * incoming MIDI message.\n   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n   * milliseconds since the navigation start of the document).\n   * @property {string} type `continue`\n   *\n   * @since 2.1\n   */ /**\n   * Input-wide (system) event emitted when a **stop** message has been received.\n   *\n   * @event Input#stop\n   *\n   * @type {object}\n   *\n   * @property {Input} port The `Input` that triggered the event.\n   * @property {Input} target The object that dispatched the event.\n   * @property {Message} message A [`Message`](Message) object containing information about the\n   * incoming MIDI message.\n   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n   * milliseconds since the navigation start of the document).\n   * @property {string} type `stop`\n   *\n   * @since 2.1\n   */ /**\n   * Input-wide (system) event emitted when an **active sensing** message has been received.\n   *\n   * @event Input#activesensing\n   *\n   * @type {object}\n   *\n   * @property {Input} port The `Input` that triggered the event.\n   * @property {Input} target The object that dispatched the event.\n   * @property {Message} message A [`Message`](Message) object containing information about the\n   * incoming MIDI message.\n   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n   * milliseconds since the navigation start of the document).\n   * @property {string} type `activesensing`\n   *\n   * @since 2.1\n   */ /**\n   * Input-wide (system) event emitted when a **reset** message has been received.\n   *\n   * @event Input#reset\n   *\n   * @type {object}\n   *\n   * @property {Input} port The `Input` that triggered the event.\n   * @property {Input} target The object that dispatched the event.\n   * @property {Message} message A [`Message`](Message) object containing information about the\n   * incoming MIDI message.\n   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n   * milliseconds since the navigation start of the document).\n   * @property {string} type `reset`\n   *\n   * @since 2.1\n   */ /**\n   * Input-wide (system) event emitted when an unknown MIDI message has been received. It could\n   * be, for example, one of the undefined/reserved messages.\n   *\n   * @event Input#unknownmessage\n   *\n   * @type {Object}\n   *\n   * @property {Input} port The `Input` that triggered the event.\n   * @property {Input} target The object that dispatched the event.\n   * @property {Message} message A [`Message`](Message) object containing information about the\n   * incoming MIDI message.\n   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n   * milliseconds since the navigation start of the document).\n   * @property {string} type `unknownmessage`\n   *\n   * @since 2.1\n   */ /**\n   * The `WebMidi` object makes it easier to work with the low-level Web MIDI API. Basically, it\n   * simplifies sending outgoing MIDI messages and reacting to incoming MIDI messages.\n   *\n   * When using the WebMidi.js library, you should know that the `WebMidi` class has already been\n   * instantiated. You cannot instantiate it yourself. If you use the **IIFE** version, you should\n   * simply use the global object called `WebMidi`. If you use the **CJS** (CommonJS) or **ESM** (ES6\n   * module) version, you get an already-instantiated object when you import the module.\n   *\n   * @fires WebMidi#connected\n   * @fires WebMidi#disabled\n   * @fires WebMidi#disconnected\n   * @fires WebMidi#enabled\n   * @fires WebMidi#error\n   * @fires WebMidi#midiaccessgranted\n   * @fires WebMidi#portschanged\n   *\n   * @extends EventEmitter\n   * @license Apache-2.0\n   */ class WebMidi extends EventEmitter {\n        /**\n     * The WebMidi class is a singleton and you cannot instantiate it directly. It has already been\n     * instantiated for you.\n     */ constructor(){\n            super();\n            /**\n       * Object containing system-wide default values that can be changed to customize how the library\n       * works.\n       *\n       * @type {object}\n       *\n       * @property {object}  defaults.note - Default values relating to note\n       * @property {number}  defaults.note.attack - A number between 0 and 127 representing the\n       * default attack velocity of notes. Initial value is 64.\n       * @property {number}  defaults.note.release - A number between 0 and 127 representing the\n       * default release velocity of notes. Initial value is 64.\n       * @property {number}  defaults.note.duration - A number representing the default duration of\n       * notes (in seconds). Initial value is Infinity.\n       */ this.defaults = {\n                note: {\n                    attack: Utilities.from7bitToFloat(64),\n                    release: Utilities.from7bitToFloat(64),\n                    duration: Infinity\n                }\n            };\n            /**\n       * The [`MIDIAccess`](https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess)\n       * instance used to talk to the lower-level Web MIDI API. This should not be used directly\n       * unless you know what you are doing.\n       *\n       * @type {MIDIAccess}\n       * @readonly\n       */ this.interface = null;\n            /**\n       * Indicates whether argument validation and backwards-compatibility checks are performed\n       * throughout the WebMidi.js library for object methods and property setters.\n       *\n       * This is an advanced setting that should be used carefully. Setting `validation` to `false`\n       * improves performance but should only be done once the project has been thoroughly tested with\n       * `validation` turned on.\n       *\n       * @type {boolean}\n       */ this.validation = true;\n            /**\n       * Array of all (Input) objects\n       * @type {Input[]}\n       * @private\n       */ this._inputs = [];\n            /**\n       * Array of disconnected [`Input`](Input) objects. This is used when inputs are plugged back in\n       * to retain their previous state.\n       * @type {Input[]}\n       * @private\n       */ this._disconnectedInputs = [];\n            /**\n       * Array of all [`Output`](Output) objects\n       * @type {Output[]}\n       * @private\n       */ this._outputs = [];\n            /**\n       * Array of disconnected [`Output`](Output) objects. This is used when outputs are plugged back\n       * in to retain their previous state.\n       * @type {Output[]}\n       * @private\n       */ this._disconnectedOutputs = [];\n            /**\n       * Array of statechange events to process. These events must be parsed synchronously so they do\n       * not override each other.\n       *\n       * @type {string[]}\n       * @private\n       */ this._stateChangeQueue = [];\n            /**\n       * @type {number}\n       * @private\n       */ this._octaveOffset = 0;\n        }\n        /**\n     * Checks if the Web MIDI API is available in the current environment and then tries to connect to\n     * the host's MIDI subsystem. This is an asynchronous operation and it causes a security prompt to\n     * be displayed to the user.\n     *\n     * To enable the use of MIDI system exclusive messages, the `sysex` option should be set to\n     * `true`. However, under some environments (e.g. Jazz-Plugin), the `sysex` option is ignored\n     * and system exclusive messages are always enabled. You can check the\n     * [`sysexEnabled`](#sysexEnabled) property to confirm.\n     *\n     * To enable access to software synthesizers available on the host, you would set the `software`\n     * option to `true`. However, this option is only there to future-proof the library as support for\n     * software synths has not yet been implemented in any browser (as of September 2021).\n     *\n     * By the way, if you call the [`enable()`](#enable) method while WebMidi.js is already enabled,\n     * the callback function will be executed (if any), the promise will resolve but the events\n     * ([`\"midiaccessgranted\"`](#event:midiaccessgranted), [`\"connected\"`](#event:connected) and\n     * [`\"enabled\"`](#event:enabled)) will not be fired.\n     *\n     * There are 3 ways to execute code after `WebMidi` has been enabled:\n     *\n     * - Pass a callback function in the `options`\n     * - Listen to the [`\"enabled\"`](#event:enabled) event\n     * - Wait for the promise to resolve\n     *\n     * In order, this is what happens towards the end of the enabling process:\n     *\n     * 1. [`\"midiaccessgranted\"`](#event:midiaccessgranted) event is triggered once the user has\n     * granted access to use MIDI.\n     * 2. [`\"connected\"`](#event:connected) events are triggered (for each available input and output)\n     * 3. [`\"enabled\"`](#event:enabled) event is triggered when WebMidi.js is fully ready\n     * 4. specified callback (if any) is executed\n     * 5. promise is resolved and fulfilled with the `WebMidi` object.\n     *\n     * **Important note**: starting with Chrome v77, a page using Web MIDI API must be hosted on a\n     * secure origin (`https://`, `localhost` or `file:///`) and the user will always be prompted to\n     * authorize the operation (no matter if the `sysex` option is `true` or not).\n     *\n     * ##### Example\n     * ```js\n     * // Enabling WebMidi and using the promise\n     * WebMidi.enable().then(() => {\n     *   console.log(\"WebMidi.js has been enabled!\");\n     * })\n     * ```\n     *\n     * @param [options] {object}\n     *\n     * @param [options.callback] {function} A function to execute once the operation completes. This\n     * function will receive an `Error` object if enabling the Web MIDI API failed.\n     *\n     * @param [options.sysex=false] {boolean} Whether to enable MIDI system exclusive messages or not.\n     *\n     * @param [options.validation=true] {boolean} Whether to enable library-wide validation of method\n     * arguments and setter values. This is an advanced setting that should be used carefully. Setting\n     * [`validation`](#validation) to `false` improves performance but should only be done once the\n     * project has been thoroughly tested with [`validation`](#validation)  turned on.\n     *\n     * @param [options.software=false] {boolean} Whether to request access to software synthesizers on\n     * the host system. This is part of the spec but has not yet been implemented by most browsers as\n     * of April 2020.\n     *\n     * @param [options.requestMIDIAccessFunction] {function} A custom function to use to return\n     * the MIDIAccess object. This is useful if you want to use a polyfill for the Web MIDI API\n     * or if you want to use a custom implementation of the Web MIDI API - probably for testing\n     * purposes.\n     *\n     * @async\n     *\n     * @returns {Promise.<WebMidi>} The promise is fulfilled with the `WebMidi` object for\n     * chainability\n     *\n     * @throws {Error} The Web MIDI API is not supported in your environment.\n     * @throws {Error} Jazz-Plugin must be installed to use WebMIDIAPIShim.\n     */ async enable(options = {}, legacy = false) {\n            this.validation = options.validation !== false;\n            if (this.validation) {\n                // Backwards-compatibility. Previous syntax was: enable(callback, sysex)\n                if (typeof options === \"function\") options = {\n                    callback: options,\n                    sysex: legacy\n                };\n                if (legacy) options.sysex = true;\n            } // If already enabled, trigger callback and resolve promise but do not dispatch events.\n            if (this.enabled) {\n                if (typeof options.callback === \"function\") options.callback();\n                return Promise.resolve();\n            } // The Jazz-Plugin takes a while to be available (even after the Window's 'load' event has been\n            // fired). Therefore, we wait a little while to give it time to finish loading (initiqted in\n            // constructor).\n            // if (!this.supported) {\n            //\n            //   await new Promise((resolve, reject) => {\n            //\n            //     const start = this.time;\n            //\n            //     const intervalID = setInterval(() => {\n            //\n            //       if (this.supported) {\n            //         clearInterval(intervalID);\n            //         resolve();\n            //       } else {\n            //         if (this.time > start + 1500) {\n            //           clearInterval(intervalID);\n            //           let error = new Error(\"The Web MIDI API is not available in your environment.\");\n            //           if (typeof options.callback === \"function\") options.callback(error);\n            //           reject(error);\n            //         }\n            //       }\n            //\n            //     }, 25);\n            //\n            //   });\n            //\n            // }\n            /**\n       * Event emitted when an error occurs trying to enable `WebMidi`\n       *\n       * @event WebMidi#error\n       * @type {object}\n       * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {WebMidi} target The object that triggered the event\n       * @property {string} type `error`\n       * @property {*} error Actual error that occurred\n       */ const errorEvent = {\n                timestamp: this.time,\n                target: this,\n                type: \"error\",\n                error: undefined\n            };\n            /**\n       * Event emitted once the MIDI interface has been successfully created (which implies user has\n       * granted access to MIDI).\n       *\n       * @event WebMidi#midiaccessgranted\n       * @type {object}\n       * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds\n       * since the navigation start of the document).\n       * @property {WebMidi} target The object that triggered the event\n       * @property {string} type `midiaccessgranted`\n       */ const midiAccessGrantedEvent = {\n                timestamp: this.time,\n                target: this,\n                type: \"midiaccessgranted\"\n            };\n            /**\n       * Event emitted once `WebMidi` has been fully enabled\n       *\n       * @event WebMidi#enabled\n       * @type {object}\n       * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds\n       * since the navigation start of the document).\n       * @property {WebMidi} target The object that triggered the event\n       * @property {string} type `\"enabled\"`\n       */ const enabledEvent = {\n                timestamp: this.time,\n                target: this,\n                type: \"enabled\"\n            }; // Request MIDI access (this is where the prompt will appear)\n            try {\n                if (typeof options.requestMIDIAccessFunction === \"function\") this.interface = await options.requestMIDIAccessFunction({\n                    sysex: options.sysex,\n                    software: options.software\n                });\n                else this.interface = await navigator.requestMIDIAccess({\n                    sysex: options.sysex,\n                    software: options.software\n                });\n            } catch (err) {\n                errorEvent.error = err;\n                this.emit(\"error\", errorEvent);\n                if (typeof options.callback === \"function\") options.callback(err);\n                return Promise.reject(err);\n            } // Now that the Web MIDI API interface has been created, we trigger the 'midiaccessgranted'\n            // event. This allows the developer an occasion to assign listeners on 'connected' events.\n            this.emit(\"midiaccessgranted\", midiAccessGrantedEvent); // We setup the state change listener before creating the ports so that it properly catches the\n            // the ports' `connected` events\n            this.interface.onstatechange = this._onInterfaceStateChange.bind(this); // Update inputs and outputs (this is where `Input` and `Output` objects are created).\n            try {\n                await this._updateInputsAndOutputs();\n            } catch (err) {\n                errorEvent.error = err;\n                this.emit(\"error\", errorEvent);\n                if (typeof options.callback === \"function\") options.callback(err);\n                return Promise.reject(err);\n            } // If we make it here, the ports have been successfully created, so we trigger the 'enabled'\n            // event.\n            this.emit(\"enabled\", enabledEvent); // Execute the callback (if any) and resolve the promise with 'this' (for chainability)\n            if (typeof options.callback === \"function\") options.callback();\n            return Promise.resolve(this);\n        }\n        /**\n     * Completely disables **WebMidi.js** by unlinking the MIDI subsystem's interface and closing all\n     * [`Input`](Input) and [`Output`](Output) objects that may have been opened. This also means that\n     * listeners added to [`Input`](Input) objects, [`Output`](Output) objects or to `WebMidi` itself\n     * are also destroyed.\n     *\n     * @async\n     * @returns {Promise<Array>}\n     *\n     * @throws {Error} The Web MIDI API is not supported by your environment.\n     *\n     * @since 2.0.0\n     */ async disable() {\n            // This needs to be done right away to prevent racing conditions in listeners while the inputs\n            // are being destroyed.\n            if (this.interface) this.interface.onstatechange = undefined;\n            return this._destroyInputsAndOutputs().then(()=>{\n                if (navigator && typeof navigator.close === \"function\") navigator.close(); // jzz\n                this.interface = null; // also resets enabled, sysexEnabled\n                /**\n         * Event emitted once `WebMidi` has been successfully disabled.\n         *\n         * @event WebMidi#disabled\n         * @type {object}\n         * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         * @property {WebMidi} target The object that triggered the event\n         * @property {string} type `\"disabled\"`\n         */ let event = {\n                    timestamp: this.time,\n                    target: this,\n                    type: \"disabled\"\n                }; // Finally, trigger the 'disabled' event and then remove all listeners.\n                this.emit(\"disabled\", event);\n                this.removeListener();\n            });\n        }\n        /**\n     * Returns the [`Input`](Input) object that matches the specified ID string or `false` if no\n     * matching input is found. As per the Web MIDI API specification, IDs are strings (not integers).\n     *\n     * Please note that IDs change from one host to another. For example, Chrome does not use the same\n     * kind of IDs as Jazz-Plugin.\n     *\n     * @param id {string} The ID string of the input. IDs can be viewed by looking at the\n     * [`WebMidi.inputs`](WebMidi#inputs) array. Even though they sometimes look like integers, IDs\n     * are strings.\n     * @param [options] {object}\n     * @param [options.disconnected] {boolean} Whether to retrieve a disconnected input\n     *\n     * @returns {Input} An [`Input`](Input) object matching the specified ID string or `undefined`\n     * if no matching input can be found.\n     *\n     * @throws {Error} WebMidi is not enabled.\n     *\n     * @since 2.0.0\n     */ getInputById(id, options = {\n            disconnected: false\n        }) {\n            if (this.validation) {\n                if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n                if (!id) return;\n            }\n            if (options.disconnected) for(let i = 0; i < this._disconnectedInputs.length; i++){\n                if (this._disconnectedInputs[i].id === id.toString()) return this._disconnectedInputs[i];\n            }\n            else for(let i = 0; i < this.inputs.length; i++){\n                if (this.inputs[i].id === id.toString()) return this.inputs[i];\n            }\n        }\n        /**\n     * Returns the first [`Input`](Input) object whose name **contains** the specified string. Note\n     * that the port names change from one environment to another. For example, Chrome does not report\n     * input names in the same way as the Jazz-Plugin does.\n     *\n     * @param name {string} The non-empty string to look for within the name of MIDI inputs (such as\n     * those visible in the [inputs](WebMidi#inputs) array).\n     *\n     * @returns {Input} The [`Input`](Input) that was found or `undefined` if no input contained the\n     * specified name.\n     * @param [options] {object}\n     * @param [options.disconnected] {boolean} Whether to retrieve a disconnected input\n     *\n     * @throws {Error} WebMidi is not enabled.\n     *\n     * @since 2.0.0\n     */ getInputByName(name, options = {\n            disconnected: false\n        }) {\n            if (this.validation) {\n                if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n                if (!name) return;\n                name = name.toString();\n            }\n            if (options.disconnected) for(let i = 0; i < this._disconnectedInputs.length; i++){\n                if (~this._disconnectedInputs[i].name.indexOf(name)) return this._disconnectedInputs[i];\n            }\n            else for(let i = 0; i < this.inputs.length; i++){\n                if (~this.inputs[i].name.indexOf(name)) return this.inputs[i];\n            }\n        }\n        /**\n     * Returns the first [`Output`](Output) object whose name **contains** the specified string. Note\n     * that the port names change from one environment to another. For example, Chrome does not report\n     * input names in the same way as the Jazz-Plugin does.\n     *\n     * @param name {string} The non-empty string to look for within the name of MIDI inputs (such as\n     * those visible in the [`outputs`](#outputs) array).\n     * @param [options] {object}\n     * @param [options.disconnected] {boolean} Whether to retrieve a disconnected output\n     *\n     * @returns {Output} The [`Output`](Output) that was found or `undefined` if no output matched\n     * the specified name.\n     *\n     * @throws {Error} WebMidi is not enabled.\n     *\n     * @since 2.0.0\n     */ getOutputByName(name, options = {\n            disconnected: false\n        }) {\n            if (this.validation) {\n                if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n                if (!name) return;\n                name = name.toString();\n            }\n            if (options.disconnected) for(let i = 0; i < this._disconnectedOutputs.length; i++){\n                if (~this._disconnectedOutputs[i].name.indexOf(name)) return this._disconnectedOutputs[i];\n            }\n            else for(let i = 0; i < this.outputs.length; i++){\n                if (~this.outputs[i].name.indexOf(name)) return this.outputs[i];\n            }\n        }\n        /**\n     * Returns the [`Output`](Output) object that matches the specified ID string or `false` if no\n     * matching output is found. As per the Web MIDI API specification, IDs are strings (not\n     * integers).\n     *\n     * Please note that IDs change from one host to another. For example, Chrome does not use the same\n     * kind of IDs as Jazz-Plugin.\n     *\n     * @param id {string} The ID string of the port. IDs can be viewed by looking at the\n     * [`WebMidi.outputs`](WebMidi#outputs) array.\n     * @param [options] {object}\n     * @param [options.disconnected] {boolean} Whether to retrieve a disconnected output\n     *\n     * @returns {Output} An [`Output`](Output) object matching the specified ID string. If no\n     * matching output can be found, the method returns `undefined`.\n     *\n     * @throws {Error} WebMidi is not enabled.\n     *\n     * @since 2.0.0\n     */ getOutputById(id, options = {\n            disconnected: false\n        }) {\n            if (this.validation) {\n                if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n                if (!id) return;\n            }\n            if (options.disconnected) for(let i = 0; i < this._disconnectedOutputs.length; i++){\n                if (this._disconnectedOutputs[i].id === id.toString()) return this._disconnectedOutputs[i];\n            }\n            else for(let i = 0; i < this.outputs.length; i++){\n                if (this.outputs[i].id === id.toString()) return this.outputs[i];\n            }\n        }\n        /**\n     * @private\n     * @deprecated since version 3.0.0, use Utilities.toNoteNumber() instead.\n     */ noteNameToNumber(name) {\n            if (this.validation) console.warn(\"The noteNameToNumber() method is deprecated. Use Utilities.toNoteNumber() instead.\");\n            return Utilities.toNoteNumber(name, this.octaveOffset);\n        }\n        /**\n     * @private\n     * @deprecated since 3.0.0, use Utilities.getNoteDetails() instead.\n     */ getOctave(number) {\n            if (this.validation) {\n                console.warn(\"The getOctave()is deprecated. Use Utilities.getNoteDetails() instead\");\n                number = parseInt(number);\n            }\n            if (!isNaN(number) && number >= 0 && number <= 127) return Utilities.getNoteDetails(Utilities.offsetNumber(number, this.octaveOffset)).octave;\n            else return false;\n        }\n        /**\n     * @private\n     * @deprecated since 3.0.0, use Utilities.sanitizeChannels() instead.\n     */ sanitizeChannels(channel) {\n            if (this.validation) console.warn(\"The sanitizeChannels() method has been moved to the utilities class.\");\n            return Utilities.sanitizeChannels(channel);\n        }\n        /**\n     * @private\n     * @deprecated since version 3.0.0, use Utilities.sanitizeChannels() instead.\n     */ toMIDIChannels(channel) {\n            if (this.validation) console.warn(\"The toMIDIChannels() method has been deprecated. Use Utilities.sanitizeChannels() instead.\");\n            return Utilities.sanitizeChannels(channel);\n        }\n        /**\n     * @private\n     * @deprecated since version 3.0.0, use Utilities.guessNoteNumber() instead.\n     */ guessNoteNumber(input) {\n            if (this.validation) console.warn(\"The guessNoteNumber() method has been deprecated. Use Utilities.guessNoteNumber() instead.\");\n            return Utilities.guessNoteNumber(input, this.octaveOffset);\n        }\n        /**\n     * @private\n     * @deprecated since version 3.0.0, use Utilities.buildNoteArray() instead.\n     */ getValidNoteArray(notes, options = {}) {\n            if (this.validation) console.warn(\"The getValidNoteArray() method has been moved to the Utilities.buildNoteArray()\");\n            return Utilities.buildNoteArray(notes, options);\n        }\n        /**\n     * @private\n     * @deprecated since version 3.0.0, use Utilities.toTimestamp() instead.\n     */ convertToTimestamp(time) {\n            if (this.validation) console.warn(\"The convertToTimestamp() method has been moved to Utilities.toTimestamp().\");\n            return Utilities.toTimestamp(time);\n        }\n        /**\n     * @return {Promise<void>}\n     * @private\n     */ async _destroyInputsAndOutputs() {\n            let promises = [];\n            this.inputs.forEach((input)=>promises.push(input.destroy()));\n            this.outputs.forEach((output)=>promises.push(output.destroy()));\n            return Promise.all(promises).then(()=>{\n                this._inputs = [];\n                this._outputs = [];\n            });\n        }\n        /**\n     * @private\n     */ _onInterfaceStateChange(e) {\n            this._updateInputsAndOutputs();\n            /**\n       * Event emitted when an [`Input`](Input) or [`Output`](Output) port is connected or\n       * disconnected. This event is typically fired whenever a MIDI device is plugged in or\n       * unplugged. Please note that it may fire several times if a device possesses multiple inputs\n       * and/or outputs (which is often the case).\n       *\n       * @event WebMidi#portschanged\n       * @type {object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred\n       * (in milliseconds since the navigation start of the document).\n       * @property {string} type `portschanged`\n       * @property {WebMidi} target The object to which the listener was originally added (`WebMidi`)\n       * @property {Input|Output} port The [`Input`](Input) or [`Output`](Output) object that\n       * triggered the event.\n       *\n       * @since 3.0.2\n       */ /**\n       * Event emitted when an [`Input`](Input) or [`Output`](Output) becomes available. This event is\n       * typically fired whenever a MIDI device is plugged in. Please note that it may fire several\n       * times if a device possesses multiple inputs and/or outputs (which is often the case).\n       *\n       * @event WebMidi#connected\n       * @type {object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred\n       * (in milliseconds since the navigation start of the document).\n       * @property {string} type `connected`\n       * @property {WebMidi} target The object to which the listener was originally added (`WebMidi`)\n       * @property {Input|Output} port The [`Input`](Input) or [`Output`](Output) object that\n       * triggered the event.\n       */ /**\n       * Event emitted when an [`Input`](Input) or [`Output`](Output) becomes unavailable. This event\n       * is typically fired whenever a MIDI device is unplugged. Please note that it may fire several\n       * times if a device possesses multiple inputs and/or outputs (which is often the case).\n       *\n       * @event WebMidi#disconnected\n       * @type {object}\n       * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds\n       * since the navigation start of the document).\n       * @property {string} type `disconnected`\n       * @property {WebMidi} target The object to which the listener was originally added (`WebMidi`)\n       * @property {Input|Output} port The [`Input`](Input) or [`Output`](Output) object that\n       * triggered the event.\n       */ let event = {\n                timestamp: e.timeStamp,\n                type: e.port.state,\n                target: this\n            }; // We check if \"connection\" is \"open\" because connected events are also triggered with\n            // \"connection=closed\"\n            if (e.port.state === \"connected\" && e.port.connection === \"open\") {\n                if (e.port.type === \"output\") event.port = this.getOutputById(e.port.id);\n                else if (e.port.type === \"input\") event.port = this.getInputById(e.port.id);\n                 // Emit \"connected\" event\n                this.emit(e.port.state, event); // Make a shallow copy of the event so we can use it for the \"portschanged\" event\n                const portsChangedEvent = Object.assign({}, event);\n                portsChangedEvent.type = \"portschanged\";\n                this.emit(portsChangedEvent.type, portsChangedEvent); // We check if \"connection\" is \"pending\" because we do not always get the \"closed\" event\n            } else if (e.port.state === \"disconnected\" && e.port.connection === \"pending\") {\n                if (e.port.type === \"input\") event.port = this.getInputById(e.port.id, {\n                    disconnected: true\n                });\n                else if (e.port.type === \"output\") event.port = this.getOutputById(e.port.id, {\n                    disconnected: true\n                });\n                 // Emit \"disconnected\" event\n                this.emit(e.port.state, event); // Make a shallow copy of the event so we can use it for the \"portschanged\" event\n                const portsChangedEvent = Object.assign({}, event);\n                portsChangedEvent.type = \"portschanged\";\n                this.emit(portsChangedEvent.type, portsChangedEvent);\n            }\n        }\n        /**\n     * @private\n     */ async _updateInputsAndOutputs() {\n            return Promise.all([\n                this._updateInputs(),\n                this._updateOutputs()\n            ]);\n        }\n        /**\n     * @private\n     */ async _updateInputs() {\n            // We must check for the existence of this.interface because it might have been closed via\n            // WebMidi.disable().\n            if (!this.interface) return; // Check for items to remove from the existing array (because they are no longer being reported\n            // by the MIDI back-end).\n            for(let i = this._inputs.length - 1; i >= 0; i--){\n                const current = this._inputs[i];\n                const inputs = Array.from(this.interface.inputs.values());\n                if (!inputs.find((input)=>input === current._midiInput)) {\n                    // Instead of destroying removed inputs, we stash them in case they come back (which is the\n                    // case when the computer goes to sleep and is later brought back online).\n                    this._disconnectedInputs.push(current);\n                    this._inputs.splice(i, 1);\n                }\n            } // Array to hold pending promises from trying to open all input ports\n            let promises = []; // Add new inputs (if not already present)\n            this.interface.inputs.forEach((nInput)=>{\n                // Check if the input is currently absent from the 'inputs' array.\n                if (!this._inputs.find((input)=>input._midiInput === nInput)) {\n                    // If the input has previously been stashed away, reuse it. If not, create a new one.\n                    let input = this._disconnectedInputs.find((input)=>input._midiInput === nInput);\n                    if (!input) input = new Input(nInput);\n                    this._inputs.push(input);\n                    promises.push(input.open());\n                }\n            }); // Return a promise that resolves when all promises have resolved\n            return Promise.all(promises);\n        }\n        /**\n     * @private\n     */ async _updateOutputs() {\n            // We must check for the existence of this.interface because it might have been closed via\n            // WebMidi.disable().\n            if (!this.interface) return; // Check for items to remove from the existing array (because they are no longer being reported\n            // by the MIDI back-end).\n            for(let i = this._outputs.length - 1; i >= 0; i--){\n                const current = this._outputs[i];\n                const outputs = Array.from(this.interface.outputs.values());\n                if (!outputs.find((output)=>output === current._midiOutput)) {\n                    // Instead of destroying removed inputs, we stash them in case they come back (which is the\n                    // case when the computer goes to sleep and is later brought back online).\n                    this._disconnectedOutputs.push(current);\n                    this._outputs.splice(i, 1);\n                }\n            } // Array to hold pending promises from trying to open all output ports\n            let promises = []; // Add new outputs (if not already present)\n            this.interface.outputs.forEach((nOutput)=>{\n                // Check if the output is currently absent from the 'outputs' array.\n                if (!this._outputs.find((output)=>output._midiOutput === nOutput)) {\n                    // If the output has previously been stashed away, reuse it. If not, create a new one.\n                    let output = this._disconnectedOutputs.find((output)=>output._midiOutput === nOutput);\n                    if (!output) output = new Output(nOutput);\n                    this._outputs.push(output);\n                    promises.push(output.open());\n                }\n            }); // Return a promise that resolves when all sub-promises have resolved\n            return Promise.all(promises);\n        }\n        // injectPluginMarkup(parent) {\n        //\n        //   // Silently ignore on Node.js\n        //   if (Utilities.isNode) return;\n        //\n        //   // Default to <body> if no parent is specified\n        //   if (!(parent instanceof Element) && !(parent instanceof HTMLDocument)) {\n        //     parent = document.body;\n        //   }\n        //\n        //   // IE10 needs this:\n        //   // <meta http-equiv=\"X-UA-Compatible\" content=\"requiresActiveX=true\"/>\n        //\n        //   // Create markup and add to parent\n        //   const obj = document.createElement(\"object\");\n        //   obj.classid = \"CLSID:1ACE1618-1C7D-4561-AEE1-34842AA85E90\"; // IE\n        //   if (!obj.isJazz) obj.type = \"audio/x-jazz\";                 // Standards-compliant\n        //   obj.style.visibility = \"hidden\";\n        //   obj.style.width = obj.style.height = \"0px\";\n        //   parent.appendChild(obj);\n        //\n        // }\n        /**\n     * Indicates whether access to the host's MIDI subsystem is active or not.\n     *\n     * @readonly\n     * @type {boolean}\n     */ get enabled() {\n            return this.interface !== null;\n        }\n        /**\n     * An array of all currently available MIDI inputs.\n     *\n     * @readonly\n     * @type {Input[]}\n     */ get inputs() {\n            return this._inputs;\n        }\n        /**\n     * @private\n     * @deprecated\n     */ get isNode() {\n            if (this.validation) console.warn(\"WebMidi.isNode has been deprecated. Use Utilities.isNode instead.\");\n            return Utilities.isNode;\n        }\n        /**\n     * @private\n     * @deprecated\n     */ get isBrowser() {\n            if (this.validation) console.warn(\"WebMidi.isBrowser has been deprecated. Use Utilities.isBrowser instead.\");\n            return Utilities.isBrowser;\n        }\n        /**\n     * An integer to offset the octave of notes received from external devices or sent to external\n     * devices.\n     *\n     * When a MIDI message comes in on an input channel the reported note name will be offset. For\n     * example, if the `octaveOffset` is set to `-1` and a [`\"noteon\"`](InputChannel#event:noteon)\n     * message with MIDI number 60 comes in, the note will be reported as C3 (instead of C4).\n     *\n     * By the same token, when [`OutputChannel.playNote()`](OutputChannel#playNote) is called, the\n     * MIDI note number being sent will be offset. If `octaveOffset` is set to `-1`, the MIDI note\n     * number sent will be 72 (instead of 60).\n     *\n     * @type {number}\n     *\n     * @since 2.1\n     */ get octaveOffset() {\n            return this._octaveOffset;\n        }\n        set octaveOffset(value) {\n            if (this.validation) {\n                value = parseInt(value);\n                if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n            }\n            this._octaveOffset = value;\n        }\n        /**\n     * An array of all currently available MIDI outputs as [`Output`](Output) objects.\n     *\n     * @readonly\n     * @type {Output[]}\n     */ get outputs() {\n            return this._outputs;\n        }\n        /**\n     * Indicates whether the environment provides support for the Web MIDI API or not.\n     *\n     * **Note**: in environments that do not offer built-in MIDI support, this will report `true` if\n     * the\n     * [`navigator.requestMIDIAccess`](https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess)\n     * function is available. For example, if you have installed WebMIDIAPIShim.js but no plugin, this\n     * property will be `true` even though actual support might not be there.\n     *\n     * @readonly\n     * @type {boolean}\n     */ get supported() {\n            return typeof navigator !== \"undefined\" && navigator.requestMIDIAccess;\n        }\n        /**\n     * Indicates whether MIDI system exclusive messages have been activated when WebMidi.js was\n     * enabled via the [`enable()`](#enable) method.\n     *\n     * @readonly\n     * @type boolean\n     */ get sysexEnabled() {\n            return !!(this.interface && this.interface.sysexEnabled);\n        }\n        /**\n     * The elapsed time, in milliseconds, since the time\n     * [origin](https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp#The_time_origin).\n     * Said simply, it is the number of milliseconds that passed since the page was loaded. Being a\n     * floating-point number, it has sub-millisecond accuracy. According to the\n     * [documentation](https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp), the\n     * time should be accurate to 5 µs (microseconds). However, due to various constraints, the\n     * browser might only be accurate to one millisecond.\n     *\n     * Note: `WebMidi.time` is simply an alias to `performance.now()`.\n     *\n     * @type {DOMHighResTimeStamp}\n     * @readonly\n     */ get time() {\n            return performance.now();\n        }\n        /**\n     * The version of the library as a [semver](https://semver.org/) string.\n     *\n     * @readonly\n     * @type string\n     */ get version() {\n            return \"3.1.6\";\n        }\n        /**\n     * The flavour of the library. Can be one of:\n     *\n     * * `esm`: ECMAScript Module\n     * * `cjs`: CommonJS Module\n     * * `iife`: Immediately-Invoked Function Expression\n     *\n     * @readonly\n     * @type string\n     * @since 3.0.25\n     */ get flavour() {\n            return \"iife\"; // will be replaced during bundling by the correct identifier\n        }\n        /**\n     * @private\n     * @deprecated since 3.0.0. Use Enumerations.CHANNEL_EVENTS instead.\n     */ get CHANNEL_EVENTS() {\n            if (this.validation) console.warn(\"The CHANNEL_EVENTS enum has been moved to Enumerations.CHANNEL_EVENTS.\");\n            return Enumerations.CHANNEL_EVENTS;\n        }\n        /**\n     * @private\n     * @deprecated since 3.0.0. Use Enumerations.SYSTEM_MESSAGES instead.\n     */ get MIDI_SYSTEM_MESSAGES() {\n            if (this.validation) console.warn(\"The MIDI_SYSTEM_MESSAGES enum has been moved to Enumerations.SYSTEM_MESSAGES.\");\n            return Enumerations.SYSTEM_MESSAGES;\n        }\n        /**\n     * @private\n     * @deprecated since 3.0.0. Use Enumerations.CHANNEL_MODE_MESSAGES instead\n     */ get MIDI_CHANNEL_MODE_MESSAGES() {\n            if (this.validation) console.warn(\"The MIDI_CHANNEL_MODE_MESSAGES enum has been moved to Enumerations.CHANNEL_MODE_MESSAGES.\");\n            return Enumerations.CHANNEL_MODE_MESSAGES;\n        }\n        /**\n     * @private\n     * @deprecated since 3.0.0. Use Enumerations.CONTROL_CHANGE_MESSAGES instead.\n     */ get MIDI_CONTROL_CHANGE_MESSAGES() {\n            if (this.validation) console.warn(\"The MIDI_CONTROL_CHANGE_MESSAGES enum has been replaced by the Enumerations.CONTROL_CHANGE_MESSAGES array.\");\n            return Enumerations.MIDI_CONTROL_CHANGE_MESSAGES;\n        }\n        /**\n     * @deprecated since 3.0.0. Use Enumerations.REGISTERED_PARAMETERS instead.\n     * @private\n     */ get MIDI_REGISTERED_PARAMETER() {\n            if (this.validation) console.warn(\"The MIDI_REGISTERED_PARAMETER enum has been moved to Enumerations.REGISTERED_PARAMETERS.\");\n            return Enumerations.REGISTERED_PARAMETERS;\n        }\n        /**\n     * @deprecated since 3.0.0.\n     * @private\n     */ get NOTES() {\n            if (this.validation) console.warn(\"The NOTES enum has been deprecated.\");\n            return [\n                \"C\",\n                \"C#\",\n                \"D\",\n                \"D#\",\n                \"E\",\n                \"F\",\n                \"F#\",\n                \"G\",\n                \"G#\",\n                \"A\",\n                \"A#\",\n                \"B\"\n            ];\n        }\n    } // Export singleton instance of WebMidi class. The 'constructor' is nulled so that it cannot be used\n    // to instantiate a new WebMidi object or extend it. However, it is not freezed so it remains\n    // extensible (properties can be added at will).\n    const wm = new WebMidi();\n    wm.constructor = null;\n    exports.Enumerations = Enumerations;\n    exports.Forwarder = Forwarder;\n    exports.Input = Input;\n    exports.InputChannel = InputChannel;\n    exports.Message = Message;\n    exports.Note = Note;\n    exports.Output = Output;\n    exports.OutputChannel = OutputChannel;\n    exports.Utilities = Utilities;\n    exports.WebMidi = wm;\n})(this.window = this.window || {});\n\n//# sourceMappingURL=index.b4642bf0.js.map\n","/**\n * WEBMIDI.js v3.1.6\n * A JavaScript library to kickstart your MIDI projects\n * https://webmidijs.org\n * Build generated on June 4th, 2023.\n *\n * © Copyright 2015-2023, Jean-Philippe Côté.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\n\n/* Version: 3.1.6 - June 4, 2023 10:51:46 */\n(function (exports) {\n  'use strict';\n\n  /**\n   * The `EventEmitter` class provides methods to implement the _observable_ design pattern. This\n   * pattern allows one to _register_ a function to execute when a specific event is _emitted_ by the\n   * emitter.\n   *\n   * It is intended to be an abstract class meant to be extended by (or mixed into) other objects.\n   */\n  class EventEmitter {\n    /**\n     * Creates a new `EventEmitter`object.\n     *\n     * @param {boolean} [eventsSuspended=false] Whether the `EventEmitter` is initially in a suspended\n     * state (i.e. not executing callbacks).\n     */\n    constructor(eventsSuspended = false) {\n      /**\n       * An object containing a property for each event with at least one registered listener. Each\n       * event property contains an array of all the [`Listener`]{@link Listener} objects registered\n       * for the event.\n       *\n       * @type {Object}\n       * @readonly\n       */\n      this.eventMap = {};\n      /**\n       * Whether or not the execution of callbacks is currently suspended for this emitter.\n       *\n       * @type {boolean}\n       */\n\n      this.eventsSuspended = eventsSuspended == true ? true : false;\n    }\n    /**\n     * The callback function is executed when the associated event is triggered via [`emit()`](#emit).\n     * The [`emit()`](#emit) method relays all additional arguments it received to the callback\n     * functions. Since [`emit()`](#emit) can be passed a variable number of arguments, it is up to\n     * the developer to make sure the arguments match those of the associated callback. In addition,\n     * the callback also separately receives all the arguments present in the listener's\n     * [`arguments`](Listener#arguments) property. This makes it easy to pass data from where the\n     * listener is added to where the listener is executed.\n     *\n     * @callback EventEmitter~callback\n     * @param {...*} [args] A variable number of arguments matching the ones (if any) that were passed\n     * to the [`emit()`](#emit) method (except, the first one) followed by the arguments found in the\n     * listener's [`arguments`](Listener#arguments) array.\n     */\n\n    /**\n     * Adds a listener for the specified event. It returns the [`Listener`]{@link Listener} object\n     * that was created and attached to the event.\n     *\n     * To attach a global listener that will be triggered for any events, use\n     * [`EventEmitter.ANY_EVENT`]{@link #ANY_EVENT} as the first parameter. Note that a global\n     * listener will also be triggered by non-registered events.\n     *\n     * @param {string|Symbol} event The event to listen to.\n     * @param {EventEmitter~callback} callback The callback function to execute when the event occurs.\n     * @param {Object} [options={}]\n     * @param {Object} [options.context=this] The value of `this` in the callback function.\n     * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n     * of the listeners array and thus executed first.\n     * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n     * automatically expires.\n     * @param {number} [options.remaining=Infinity] The number of times after which the callback\n     * should automatically be removed.\n     * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n     * callback function. This array is stored in the [`arguments`]{@link Listener#arguments}\n     * property of the [`Listener`]{@link Listener} object and can be retrieved or modified as\n     * desired.\n     *\n     * @returns {Listener} The newly created [`Listener`]{@link Listener} object.\n     *\n     * @throws {TypeError} The `event` parameter must be a string or\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}.\n     * @throws {TypeError} The `callback` parameter must be a function.\n     */\n\n\n    addListener(event, callback, options = {}) {\n      if (typeof event === \"string\" && event.length < 1 || event instanceof String && event.length < 1 || typeof event !== \"string\" && !(event instanceof String) && event !== EventEmitter.ANY_EVENT) {\n        throw new TypeError(\"The 'event' parameter must be a string or EventEmitter.ANY_EVENT.\");\n      }\n\n      if (typeof callback !== \"function\") throw new TypeError(\"The callback must be a function.\");\n      const listener = new Listener(event, this, callback, options);\n      if (!this.eventMap[event]) this.eventMap[event] = [];\n\n      if (options.prepend) {\n        this.eventMap[event].unshift(listener);\n      } else {\n        this.eventMap[event].push(listener);\n      }\n\n      return listener;\n    }\n    /**\n     * Adds a one-time listener for the specified event. The listener will be executed once and then\n     * destroyed. It returns the [`Listener`]{@link Listener} object that was created and attached\n     * to the event.\n     *\n     * To attach a global listener that will be triggered for any events, use\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} as the first parameter. Note that a\n     * global listener will also be triggered by non-registered events.\n     *\n     * @param {string|Symbol} event The event to listen to\n     * @param {EventEmitter~callback} callback The callback function to execute when the event occurs\n     * @param {Object} [options={}]\n     * @param {Object} [options.context=this] The context to invoke the callback function in.\n     * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n     * of the listeners array and thus executed first.\n     * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n     * automatically expires.\n     * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n     * callback function. This array is stored in the [`arguments`]{@link Listener#arguments}\n     * property of the [`Listener`]{@link Listener} object and can be retrieved or modified as\n     * desired.\n     *\n     * @returns {Listener} The newly created [`Listener`]{@link Listener} object.\n     *\n     * @throws {TypeError} The `event` parameter must be a string or\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}.\n     * @throws {TypeError} The `callback` parameter must be a function.\n     */\n\n\n    addOneTimeListener(event, callback, options = {}) {\n      options.remaining = 1;\n      this.addListener(event, callback, options);\n    }\n    /**\n     * Identifier to use when adding or removing a listener that should be triggered when any events\n     * occur.\n     *\n     * @type {Symbol}\n     */\n\n\n    static get ANY_EVENT() {\n      return Symbol.for(\"Any event\");\n    }\n    /**\n     * Returns `true` if the specified event has at least one registered listener. If no event is\n     * specified, the method returns `true` if any event has at least one listener registered (this\n     * includes global listeners registered to\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}).\n     *\n     * Note: to specifically check for global listeners added with\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}, use\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} as the parameter.\n     *\n     * @param {string|Symbol} [event=(any event)] The event to check\n     * @param {function|Listener} [callback=(any callback)] The actual function that was added to the\n     * event or the {@link Listener} object returned by `addListener()`.\n     * @returns {boolean}\n     */\n\n\n    hasListener(event, callback) {\n      if (event === undefined) {\n        // Check for ANY_EVENT\n        if (this.eventMap[EventEmitter.ANY_EVENT] && this.eventMap[EventEmitter.ANY_EVENT].length > 0) {\n          return true;\n        } // Check for any regular events\n\n\n        return Object.entries(this.eventMap).some(([, value]) => {\n          return value.length > 0;\n        });\n      } else {\n        if (this.eventMap[event] && this.eventMap[event].length > 0) {\n          if (callback instanceof Listener) {\n            let result = this.eventMap[event].filter(listener => listener === callback);\n            return result.length > 0;\n          } else if (typeof callback === \"function\") {\n            let result = this.eventMap[event].filter(listener => listener.callback === callback);\n            return result.length > 0;\n          } else if (callback != undefined) {\n            return false;\n          }\n\n          return true;\n        } else {\n          return false;\n        }\n      }\n    }\n    /**\n     * An array of all the unique event names for which the emitter has at least one registered\n     * listener.\n     *\n     * Note: this excludes global events registered with\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} because they are not tied to a\n     * specific event.\n     *\n     * @type {string[]}\n     * @readonly\n     */\n\n\n    get eventNames() {\n      return Object.keys(this.eventMap);\n    }\n    /**\n     * Returns an array of all the [`Listener`]{@link Listener} objects that have been registered for\n     * a specific event.\n     *\n     * Please note that global events (those added with\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}) are not returned for \"regular\"\n     * events. To get the list of global listeners, specifically use\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} as the parameter.\n     *\n     * @param {string|Symbol} event The event to get listeners for.\n     * @returns {Listener[]} An array of [`Listener`]{@link Listener} objects.\n     */\n\n\n    getListeners(event) {\n      return this.eventMap[event] || [];\n    }\n    /**\n     * Suspends execution of all callbacks functions registered for the specified event type.\n     *\n     * You can suspend execution of callbacks registered with\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} by passing\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} to `suspendEvent()`. Beware that this\n     * will not suspend all callbacks but only those registered with\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}. While this may seem counter-intuitive\n     * at first glance, it allows the selective suspension of global listeners while leaving other\n     * listeners alone. If you truly want to suspends all callbacks for a specific\n     * [`EventEmitter`]{@link EventEmitter}, simply set its `eventsSuspended` property to `true`.\n     *\n     * @param {string|Symbol} event The event name (or `EventEmitter.ANY_EVENT`) for which to suspend\n     * execution of all callback functions.\n     */\n\n\n    suspendEvent(event) {\n      this.getListeners(event).forEach(listener => {\n        listener.suspended = true;\n      });\n    }\n    /**\n     * Resumes execution of all suspended callback functions registered for the specified event type.\n     *\n     * You can resume execution of callbacks registered with\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} by passing\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} to `unsuspendEvent()`. Beware that\n     * this will not resume all callbacks but only those registered with\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}. While this may seem\n     * counter-intuitive, it allows the selective unsuspension of global listeners while leaving other\n     * callbacks alone.\n     *\n     * @param {string|Symbol} event The event name (or `EventEmitter.ANY_EVENT`) for which to resume\n     * execution of all callback functions.\n     */\n\n\n    unsuspendEvent(event) {\n      this.getListeners(event).forEach(listener => {\n        listener.suspended = false;\n      });\n    }\n    /**\n     * Returns the number of listeners registered for a specific event.\n     *\n     * Please note that global events (those added with\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}) do not count towards the remaining\n     * number for a \"regular\" event. To get the number of global listeners, specifically use\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} as the parameter.\n     *\n     * @param {string|Symbol} event The event which is usually a string but can also be the special\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} symbol.\n     * @returns {number} An integer representing the number of listeners registered for the specified\n     * event.\n     */\n\n\n    getListenerCount(event) {\n      return this.getListeners(event).length;\n    }\n    /**\n     * Executes the callback function of all the [`Listener`]{@link Listener} objects registered for\n     * a given event. The callback functions are passed the additional arguments passed to `emit()`\n     * (if any) followed by the arguments present in the [`arguments`](Listener#arguments) property of\n     * the [`Listener`](Listener) object (if any).\n     *\n     * If the [`eventsSuspended`]{@link #eventsSuspended} property is `true` or the\n     * [`Listener.suspended`]{@link Listener#suspended} property is `true`, the callback functions\n     * will not be executed.\n     *\n     * This function returns an array containing the return values of each of the callbacks.\n     *\n     * It should be noted that the regular listeners are triggered first followed by the global\n     * listeners (those added with [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}).\n     *\n     * @param {string} event The event\n     * @param {...*} args Arbitrary number of arguments to pass along to the callback functions\n     *\n     * @returns {Array} An array containing the return value of each of the executed listener\n     * functions.\n     *\n     * @throws {TypeError} The `event` parameter must be a string.\n     */\n\n\n    emit(event, ...args) {\n      if (typeof event !== \"string\" && !(event instanceof String)) {\n        throw new TypeError(\"The 'event' parameter must be a string.\");\n      }\n\n      if (this.eventsSuspended) return; // We collect return values from all listeners here\n\n      let results = []; // We must make sure that we do not have undefined otherwise concat() will add an undefined\n      // entry in the array.\n\n      let listeners = this.eventMap[EventEmitter.ANY_EVENT] || [];\n      if (this.eventMap[event]) listeners = listeners.concat(this.eventMap[event]);\n      listeners.forEach(listener => {\n        // This is the per-listener suspension check\n        if (listener.suspended) return;\n        let params = [...args];\n        if (Array.isArray(listener.arguments)) params = params.concat(listener.arguments);\n\n        if (listener.remaining > 0) {\n          results.push(listener.callback.apply(listener.context, params));\n          listener.count++;\n        }\n\n        if (--listener.remaining < 1) listener.remove();\n      });\n      return results;\n    }\n    /**\n     * Removes all the listeners that were added to the object upon which the method is called and\n     * that match the specified criterias. If no parameters are passed, all listeners added to this\n     * object will be removed. If only the `event` parameter is passed, all listeners for that event\n     * will be removed from that object. You can remove global listeners by using\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} as the first parameter.\n     *\n     * To use more granular options, you must at least define the `event`. Then, you can specify the\n     * callback to match or one or more of the additional options.\n     *\n     * @param {string} [event] The event name.\n     * @param {EventEmitter~callback} [callback] Only remove the listeners that match this exact\n     * callback function.\n     * @param {Object} [options]\n     * @param {*} [options.context] Only remove the listeners that have this exact context.\n     * @param {number} [options.remaining] Only remove the listener if it has exactly that many\n     * remaining times to be executed.\n     */\n\n\n    removeListener(event, callback, options = {}) {\n      if (event === undefined) {\n        this.eventMap = {};\n        return;\n      } else if (!this.eventMap[event]) {\n        return;\n      } // Find listeners that do not match the criterias (those are the ones we will keep)\n\n\n      let listeners = this.eventMap[event].filter(listener => {\n        return callback && listener.callback !== callback || options.remaining && options.remaining !== listener.remaining || options.context && options.context !== listener.context;\n      });\n\n      if (listeners.length) {\n        this.eventMap[event] = listeners;\n      } else {\n        delete this.eventMap[event];\n      }\n    }\n    /**\n     * The `waitFor()` method is an async function which returns a promise. The promise is fulfilled\n     * when the specified event occurs. The event can be a regular event or\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} (if you want to resolve as soon as any\n     * event is emitted).\n     *\n     * If the `duration` option is set, the promise will only be fulfilled if the event is emitted\n     * within the specified duration. If the event has not been fulfilled after the specified\n     * duration, the promise is rejected. This makes it super easy to wait for an event and timeout\n     * after a certain time if the event is not triggered.\n     *\n     * @param {string|Symbol} event The event to wait for\n     * @param {Object} [options={}]\n     * @param {number} [options.duration=Infinity] The number of milliseconds to wait before the\n     * promise is automatically rejected.\n     */\n\n\n    async waitFor(event, options = {}) {\n      options.duration = parseInt(options.duration);\n      if (isNaN(options.duration) || options.duration <= 0) options.duration = Infinity;\n      return new Promise((resolve, reject) => {\n        let timeout;\n        let listener = this.addListener(event, () => {\n          clearTimeout(timeout);\n          resolve();\n        }, {\n          remaining: 1\n        });\n\n        if (options.duration !== Infinity) {\n          timeout = setTimeout(() => {\n            listener.remove();\n            reject(\"The duration expired before the event was emitted.\");\n          }, options.duration);\n        }\n      });\n    }\n    /**\n     * The number of unique events that have registered listeners.\n     *\n     * Note: this excludes global events registered with\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} because they are not tied to a\n     * specific event.\n     *\n     * @type {number}\n     * @readonly\n     */\n\n\n    get eventCount() {\n      return Object.keys(this.eventMap).length;\n    }\n\n  }\n  /**\n   * The `Listener` class represents a single event listener object. Such objects keep all relevant\n   * contextual information such as the event being listened to, the object the listener was attached\n   * to, the callback function and so on.\n   *\n   */\n\n  class Listener {\n    /**\n     * Creates a new `Listener` object\n     *\n     * @param {string|Symbol} event The event being listened to\n     * @param {EventEmitter} target The [`EventEmitter`]{@link EventEmitter} object that the listener\n     * is attached to.\n     * @param {EventEmitter~callback} callback The function to call when the listener is triggered\n     * @param {Object} [options={}]\n     * @param {Object} [options.context=target] The context to invoke the listener in (a.k.a. the\n     * value of `this` inside the callback function).\n     * @param {number} [options.remaining=Infinity] The remaining number of times after which the\n     * callback should automatically be removed.\n     * @param {array} [options.arguments] An array of arguments that will be passed separately to the\n     * callback function upon execution. The array is stored in the [`arguments`]{@link #arguments}\n     * property and can be retrieved or modified as desired.\n     *\n     * @throws {TypeError} The `event` parameter must be a string or\n     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}.\n     * @throws {ReferenceError} The `target` parameter is mandatory.\n     * @throws {TypeError} The `callback` must be a function.\n     */\n    constructor(event, target, callback, options = {}) {\n      if (typeof event !== \"string\" && !(event instanceof String) && event !== EventEmitter.ANY_EVENT) {\n        throw new TypeError(\"The 'event' parameter must be a string or EventEmitter.ANY_EVENT.\");\n      }\n\n      if (!target) {\n        throw new ReferenceError(\"The 'target' parameter is mandatory.\");\n      }\n\n      if (typeof callback !== \"function\") {\n        throw new TypeError(\"The 'callback' must be a function.\");\n      } // Convert single value argument to array\n\n\n      if (options.arguments !== undefined && !Array.isArray(options.arguments)) {\n        options.arguments = [options.arguments];\n      } // Define default options and merge declared options into them,\n\n\n      options = Object.assign({\n        context: target,\n        remaining: Infinity,\n        arguments: undefined,\n        duration: Infinity\n      }, options); // Make sure it is eventually deleted if a duration is supplied\n\n      if (options.duration !== Infinity) {\n        setTimeout(() => this.remove(), options.duration);\n      }\n      /**\n       * An array of arguments to pass to the callback function upon execution.\n       * @type {array}\n       */\n\n\n      this.arguments = options.arguments;\n      /**\n       * The callback function to execute.\n       * @type {Function}\n       */\n\n      this.callback = callback;\n      /**\n       * The context to execute the callback function in (a.k.a. the value of `this` inside the\n       * callback function)\n       * @type {Object}\n       */\n\n      this.context = options.context;\n      /**\n       * The number of times the listener function was executed.\n       * @type {number}\n       */\n\n      this.count = 0;\n      /**\n       * The event name.\n       * @type {string}\n       */\n\n      this.event = event;\n      /**\n       * The remaining number of times after which the callback should automatically be removed.\n       * @type {number}\n       */\n\n      this.remaining = parseInt(options.remaining) >= 1 ? parseInt(options.remaining) : Infinity;\n      /**\n       * Whether this listener is currently suspended or not.\n       * @type {boolean}\n       */\n\n      this.suspended = false;\n      /**\n       * The object that the event is attached to (or that emitted the event).\n       * @type {EventEmitter}\n       */\n\n      this.target = target;\n    }\n    /**\n     * Removes the listener from its target.\n     */\n\n\n    remove() {\n      this.target.removeListener(this.event, this.callback, {\n        context: this.context,\n        remaining: this.remaining\n      });\n    }\n\n  }\n\n  /**\n   * The `Enumerations` class contains enumerations and arrays of elements used throughout the\n   * library. All its properties are static and should be referenced using the class name. For\n   * example: `Enumerations.CHANNEL_MESSAGES`.\n   *\n   * @license Apache-2.0\n   * @since 3.0.0\n   */\n  class Enumerations {\n    /**\n     * @enum {Object.<string, number>}\n     * @readonly\n     * @deprecated since 3.1 (use Enumerations.CHANNEL_MESSAGES instead)\n     * @private\n     * @static\n     */\n    static get MIDI_CHANNEL_MESSAGES() {\n      if (this.validation) {\n        console.warn(\"The MIDI_CHANNEL_MESSAGES enum has been deprecated. Use the \" + \"Enumerations.CHANNEL_MESSAGES enum instead.\");\n      }\n\n      return Enumerations.CHANNEL_MESSAGES;\n    }\n    /**\n     * Enumeration of all MIDI channel message names and their associated 4-bit numerical value:\n     *\n     * | Message Name        | Hexadecimal | Decimal |\n     * |---------------------|-------------|---------|\n     * | `noteoff`           | 0x8         | 8       |\n     * | `noteon`            | 0x9         | 9       |\n     * | `keyaftertouch`     | 0xA         | 10      |\n     * | `controlchange`     | 0xB         | 11      |\n     * | `programchange`     | 0xC         | 12      |\n     * | `channelaftertouch` | 0xD         | 13      |\n     * | `pitchbend`         | 0xE         | 14      |\n     *\n     * @enum {Object.<string, number>}\n     * @readonly\n     * @since 3.1\n     * @static\n     */\n\n\n    static get CHANNEL_MESSAGES() {\n      return {\n        noteoff: 0x8,\n        // 8\n        noteon: 0x9,\n        // 9\n        keyaftertouch: 0xA,\n        // 10\n        controlchange: 0xB,\n        // 11\n        programchange: 0xC,\n        // 12\n        channelaftertouch: 0xD,\n        // 13\n        pitchbend: 0xE // 14\n\n      };\n    }\n    /**\n     * A simple array of the 16 valid MIDI channel numbers (`1` to `16`):\n     *\n     * @type {number[]}\n     * @readonly\n     * @since 3.1\n     * @static\n     */\n\n\n    static get CHANNEL_NUMBERS() {\n      return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n    }\n    /**\n     * @type {number[]}\n     * @readonly\n     * @deprecated since 3.1 (use Enumerations.CHANNEL_NUMBERS instead)\n     * @private\n     * @static\n     */\n\n\n    static get MIDI_CHANNEL_NUMBERS() {\n      if (this.validation) {\n        console.warn(\"The MIDI_CHANNEL_NUMBERS array has been deprecated. Use the \" + \"Enumerations.CHANNEL_NUMBERS array instead.\");\n      }\n\n      return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n    }\n    /**\n     * Enumeration of all MIDI channel mode message names and their associated numerical value:\n     *\n     *\n     * | Message Name          | Hexadecimal | Decimal |\n     * |-----------------------|-------------|---------|\n     * | `allsoundoff`         | 0x78        | 120     |\n     * | `resetallcontrollers` | 0x79        | 121     |\n     * | `localcontrol`        | 0x7A        | 122     |\n     * | `allnotesoff`         | 0x7B        | 123     |\n     * | `omnimodeoff`         | 0x7C        | 124     |\n     * | `omnimodeon`          | 0x7D        | 125     |\n     * | `monomodeon`          | 0x7E        | 126     |\n     * | `polymodeon`          | 0x7F        | 127     |\n     *\n     * @enum {Object.<string, number>}\n     * @readonly\n     * @since 3.1\n     * @static\n     */\n\n\n    static get CHANNEL_MODE_MESSAGES() {\n      return {\n        allsoundoff: 120,\n        resetallcontrollers: 121,\n        localcontrol: 122,\n        allnotesoff: 123,\n        omnimodeoff: 124,\n        omnimodeon: 125,\n        monomodeon: 126,\n        polymodeon: 127\n      };\n    }\n    /**\n     * @enum {Object.<string, number>}\n     * @deprecated since 3.1 (use Enumerations.CHANNEL_MODE_MESSAGES instead)\n     * @private\n     * @readonly\n     * @static\n     */\n\n\n    static get MIDI_CHANNEL_MODE_MESSAGES() {\n      if (this.validation) {\n        console.warn(\"The MIDI_CHANNEL_MODE_MESSAGES enum has been deprecated. Use the \" + \"Enumerations.CHANNEL_MODE_MESSAGES enum instead.\");\n      }\n\n      return Enumerations.CHANNEL_MODE_MESSAGES;\n    }\n    /**\n     * @enum {Object.<string, number>}\n     * @readonly\n     * @static\n     * @private\n     * @deprecated since version 3.0.26 (use `CONTROL_CHANGE_MESSAGES` instead)\n     */\n\n\n    static get MIDI_CONTROL_CHANGE_MESSAGES() {\n      if (this.validation) {\n        console.warn(\"The MIDI_CONTROL_CHANGE_MESSAGES enum has been deprecated. Use the \" + \"Enumerations.CONTROL_CHANGE_MESSAGES array instead.\");\n      }\n\n      return {\n        bankselectcoarse: 0,\n        modulationwheelcoarse: 1,\n        breathcontrollercoarse: 2,\n        controller3: 3,\n        footcontrollercoarse: 4,\n        portamentotimecoarse: 5,\n        dataentrycoarse: 6,\n        volumecoarse: 7,\n        balancecoarse: 8,\n        controller9: 9,\n        pancoarse: 10,\n        expressioncoarse: 11,\n        effectcontrol1coarse: 12,\n        effectcontrol2coarse: 13,\n        controller14: 14,\n        controller15: 15,\n        generalpurposeslider1: 16,\n        generalpurposeslider2: 17,\n        generalpurposeslider3: 18,\n        generalpurposeslider4: 19,\n        controller20: 20,\n        controller21: 21,\n        controller22: 22,\n        controller23: 23,\n        controller24: 24,\n        controller25: 25,\n        controller26: 26,\n        controller27: 27,\n        controller28: 28,\n        controller29: 29,\n        controller30: 30,\n        controller31: 31,\n        bankselectfine: 32,\n        modulationwheelfine: 33,\n        breathcontrollerfine: 34,\n        controller35: 35,\n        footcontrollerfine: 36,\n        portamentotimefine: 37,\n        dataentryfine: 38,\n        volumefine: 39,\n        balancefine: 40,\n        controller41: 41,\n        panfine: 42,\n        expressionfine: 43,\n        effectcontrol1fine: 44,\n        effectcontrol2fine: 45,\n        controller46: 46,\n        controller47: 47,\n        controller48: 48,\n        controller49: 49,\n        controller50: 50,\n        controller51: 51,\n        controller52: 52,\n        controller53: 53,\n        controller54: 54,\n        controller55: 55,\n        controller56: 56,\n        controller57: 57,\n        controller58: 58,\n        controller59: 59,\n        controller60: 60,\n        controller61: 61,\n        controller62: 62,\n        controller63: 63,\n        holdpedal: 64,\n        portamento: 65,\n        sustenutopedal: 66,\n        softpedal: 67,\n        legatopedal: 68,\n        hold2pedal: 69,\n        soundvariation: 70,\n        resonance: 71,\n        soundreleasetime: 72,\n        soundattacktime: 73,\n        brightness: 74,\n        soundcontrol6: 75,\n        soundcontrol7: 76,\n        soundcontrol8: 77,\n        soundcontrol9: 78,\n        soundcontrol10: 79,\n        generalpurposebutton1: 80,\n        generalpurposebutton2: 81,\n        generalpurposebutton3: 82,\n        generalpurposebutton4: 83,\n        controller84: 84,\n        controller85: 85,\n        controller86: 86,\n        controller87: 87,\n        controller88: 88,\n        controller89: 89,\n        controller90: 90,\n        reverblevel: 91,\n        tremololevel: 92,\n        choruslevel: 93,\n        celestelevel: 94,\n        phaserlevel: 95,\n        databuttonincrement: 96,\n        databuttondecrement: 97,\n        nonregisteredparametercoarse: 98,\n        nonregisteredparameterfine: 99,\n        registeredparametercoarse: 100,\n        registeredparameterfine: 101,\n        controller102: 102,\n        controller103: 103,\n        controller104: 104,\n        controller105: 105,\n        controller106: 106,\n        controller107: 107,\n        controller108: 108,\n        controller109: 109,\n        controller110: 110,\n        controller111: 111,\n        controller112: 112,\n        controller113: 113,\n        controller114: 114,\n        controller115: 115,\n        controller116: 116,\n        controller117: 117,\n        controller118: 118,\n        controller119: 119,\n        allsoundoff: 120,\n        resetallcontrollers: 121,\n        localcontrol: 122,\n        allnotesoff: 123,\n        omnimodeoff: 124,\n        omnimodeon: 125,\n        monomodeon: 126,\n        polymodeon: 127\n      };\n    }\n    /**\n     * An array of objects, ordered by control number, describing control change messages. Each object\n     * in the array has 3 properties with some objects having a fourth one (`position`) :\n     *\n     *  * `number`: MIDI control number (0-127);\n     *  * `name`: name of emitted event (eg: `bankselectcoarse`, `choruslevel`, etc) that can be\n     *  listened to;\n     *  * `description`: user-friendly description of the controller's purpose;\n     *  * `position` (optional): whether this controller's value should be considered an `msb` or\n     *  `lsb`\n     *\n     * Not all controllers have a predefined function. For those that don't, `name` is the word\n     * \"controller\" followed by the number (e.g. `controller112`).\n     *\n     * | Event name                     | Control Number |\n     * |--------------------------------|----------------|\n     * | `bankselectcoarse`             | 0              |\n     * | `modulationwheelcoarse`        | 1              |\n     * | `breathcontrollercoarse`       | 2              |\n     * | `controller3`                  | 3              |\n     * | `footcontrollercoarse`         | 4              |\n     * | `portamentotimecoarse`         | 5              |\n     * | `dataentrycoarse`              | 6              |\n     * | `volumecoarse`                 | 7              |\n     * | `balancecoarse`                | 8              |\n     * | `controller9`                  | 9              |\n     * | `pancoarse`                    | 10             |\n     * | `expressioncoarse`             | 11             |\n     * | `effectcontrol1coarse`         | 12             |\n     * | `effectcontrol2coarse`         | 13             |\n     * | `controller14`                 | 14             |\n     * | `controller15`                 | 15             |\n     * | `generalpurposecontroller1`    | 16             |\n     * | `generalpurposecontroller2`    | 17             |\n     * | `generalpurposecontroller3`    | 18             |\n     * | `generalpurposecontroller4`    | 19             |\n     * | `controller20`                 | 20             |\n     * | `controller21`                 | 21             |\n     * | `controller22`                 | 22             |\n     * | `controller23`                 | 23             |\n     * | `controller24`                 | 24             |\n     * | `controller25`                 | 25             |\n     * | `controller26`                 | 26             |\n     * | `controller27`                 | 27             |\n     * | `controller28`                 | 28             |\n     * | `controller29`                 | 29             |\n     * | `controller30`                 | 30             |\n     * | `controller31`                 | 31             |\n     * | `bankselectfine`               | 32             |\n     * | `modulationwheelfine`          | 33             |\n     * | `breathcontrollerfine`         | 34             |\n     * | `controller35`                 | 35             |\n     * | `footcontrollerfine`           | 36             |\n     * | `portamentotimefine`           | 37             |\n     * | `dataentryfine`                | 38             |\n     * | `channelvolumefine`            | 39             |\n     * | `balancefine`                  | 40             |\n     * | `controller41`                 | 41             |\n     * | `panfine`                      | 42             |\n     * | `expressionfine`               | 43             |\n     * | `effectcontrol1fine`           | 44             |\n     * | `effectcontrol2fine`           | 45             |\n     * | `controller46`                 | 46             |\n     * | `controller47`                 | 47             |\n     * | `controller48`                 | 48             |\n     * | `controller49`                 | 49             |\n     * | `controller50`                 | 50             |\n     * | `controller51`                 | 51             |\n     * | `controller52`                 | 52             |\n     * | `controller53`                 | 53             |\n     * | `controller54`                 | 54             |\n     * | `controller55`                 | 55             |\n     * | `controller56`                 | 56             |\n     * | `controller57`                 | 57             |\n     * | `controller58`                 | 58             |\n     * | `controller59`                 | 59             |\n     * | `controller60`                 | 60             |\n     * | `controller61`                 | 61             |\n     * | `controller62`                 | 62             |\n     * | `controller63`                 | 63             |\n     * | `damperpedal`                  | 64             |\n     * | `portamento`                   | 65             |\n     * | `sostenuto`                    | 66             |\n     * | `softpedal`                    | 67             |\n     * | `legatopedal`                  | 68             |\n     * | `hold2`                        | 69             |\n     * | `soundvariation`               | 70             |\n     * | `resonance`                    | 71             |\n     * | `releasetime`                  | 72             |\n     * | `attacktime`                   | 73             |\n     * | `brightness`                   | 74             |\n     * | `decaytime`                    | 75             |\n     * | `vibratorate`                  | 76             |\n     * | `vibratodepth`                 | 77             |\n     * | `vibratodelay`                 | 78             |\n     * | `controller79`                 | 79             |\n     * | `generalpurposecontroller5`    | 80             |\n     * | `generalpurposecontroller6`    | 81             |\n     * | `generalpurposecontroller7`    | 82             |\n     * | `generalpurposecontroller8`    | 83             |\n     * | `portamentocontrol`            | 84             |\n     * | `controller85`                 | 85             |\n     * | `controller86`                 | 86             |\n     * | `controller87`                 | 87             |\n     * | `highresolutionvelocityprefix` | 88             |\n     * | `controller89`                 | 89             |\n     * | `controller90`                 | 90             |\n     * | `effect1depth`                 | 91             |\n     * | `effect2depth`                 | 92             |\n     * | `effect3depth`                 | 93             |\n     * | `effect4depth`                 | 94             |\n     * | `effect5depth`                 | 95             |\n     * | `dataincrement`                | 96             |\n     * | `datadecrement`                | 97             |\n     * | `nonregisteredparameterfine`   | 98             |\n     * | `nonregisteredparametercoarse` | 99             |\n     * | `nonregisteredparameterfine`   | 100            |\n     * | `registeredparametercoarse`    | 101            |\n     * | `controller102`                | 102            |\n     * | `controller103`                | 103            |\n     * | `controller104`                | 104            |\n     * | `controller105`                | 105            |\n     * | `controller106`                | 106            |\n     * | `controller107`                | 107            |\n     * | `controller108`                | 108            |\n     * | `controller109`                | 109            |\n     * | `controller110`                | 110            |\n     * | `controller111`                | 111            |\n     * | `controller112`                | 112            |\n     * | `controller113`                | 113            |\n     * | `controller114`                | 114            |\n     * | `controller115`                | 115            |\n     * | `controller116`                | 116            |\n     * | `controller117`                | 117            |\n     * | `controller118`                | 118            |\n     * | `controller119`                | 119            |\n     * | `allsoundoff`                  | 120            |\n     * | `resetallcontrollers`          | 121            |\n     * | `localcontrol`                 | 122            |\n     * | `allnotesoff`                  | 123            |\n     * | `omnimodeoff`                  | 124            |\n     * | `omnimodeon`                   | 125            |\n     * | `monomodeon`                   | 126            |\n     * | `polymodeon`                   | 127            |\n     *\n     * @type {object[]}\n     * @readonly\n     * @static\n     * @since 3.1\n     */\n\n\n    static get CONTROL_CHANGE_MESSAGES() {\n      return [{\n        number: 0,\n        name: \"bankselectcoarse\",\n        description: \"Bank Select (Coarse)\",\n        position: \"msb\"\n      }, {\n        number: 1,\n        name: \"modulationwheelcoarse\",\n        description: \"Modulation Wheel (Coarse)\",\n        position: \"msb\"\n      }, {\n        number: 2,\n        name: \"breathcontrollercoarse\",\n        description: \"Breath Controller (Coarse)\",\n        position: \"msb\"\n      }, {\n        number: 3,\n        name: \"controller3\",\n        description: \"Undefined\",\n        position: \"msb\"\n      }, {\n        number: 4,\n        name: \"footcontrollercoarse\",\n        description: \"Foot Controller (Coarse)\",\n        position: \"msb\"\n      }, {\n        number: 5,\n        name: \"portamentotimecoarse\",\n        description: \"Portamento Time (Coarse)\",\n        position: \"msb\"\n      }, {\n        number: 6,\n        name: \"dataentrycoarse\",\n        description: \"Data Entry (Coarse)\",\n        position: \"msb\"\n      }, {\n        number: 7,\n        name: \"volumecoarse\",\n        description: \"Channel Volume (Coarse)\",\n        position: \"msb\"\n      }, {\n        number: 8,\n        name: \"balancecoarse\",\n        description: \"Balance (Coarse)\",\n        position: \"msb\"\n      }, {\n        number: 9,\n        name: \"controller9\",\n        description: \"Controller 9 (Coarse)\",\n        position: \"msb\"\n      }, {\n        number: 10,\n        name: \"pancoarse\",\n        description: \"Pan (Coarse)\",\n        position: \"msb\"\n      }, {\n        number: 11,\n        name: \"expressioncoarse\",\n        description: \"Expression Controller (Coarse)\",\n        position: \"msb\"\n      }, {\n        number: 12,\n        name: \"effectcontrol1coarse\",\n        description: \"Effect Control 1 (Coarse)\",\n        position: \"msb\"\n      }, {\n        number: 13,\n        name: \"effectcontrol2coarse\",\n        description: \"Effect Control 2 (Coarse)\",\n        position: \"msb\"\n      }, {\n        number: 14,\n        name: \"controller14\",\n        description: \"Undefined\",\n        position: \"msb\"\n      }, {\n        number: 15,\n        name: \"controller15\",\n        description: \"Undefined\",\n        position: \"msb\"\n      }, {\n        number: 16,\n        name: \"generalpurposecontroller1\",\n        description: \"General Purpose Controller 1 (Coarse)\",\n        position: \"msb\"\n      }, {\n        number: 17,\n        name: \"generalpurposecontroller2\",\n        description: \"General Purpose Controller 2 (Coarse)\",\n        position: \"msb\"\n      }, {\n        number: 18,\n        name: \"generalpurposecontroller3\",\n        description: \"General Purpose Controller 3 (Coarse)\",\n        position: \"msb\"\n      }, {\n        number: 19,\n        name: \"generalpurposecontroller4\",\n        description: \"General Purpose Controller 4 (Coarse)\",\n        position: \"msb\"\n      }, {\n        number: 20,\n        name: \"controller20\",\n        description: \"Undefined\",\n        position: \"msb\"\n      }, {\n        number: 21,\n        name: \"controller21\",\n        description: \"Undefined\",\n        position: \"msb\"\n      }, {\n        number: 22,\n        name: \"controller22\",\n        description: \"Undefined\",\n        position: \"msb\"\n      }, {\n        number: 23,\n        name: \"controller23\",\n        description: \"Undefined\",\n        position: \"msb\"\n      }, {\n        number: 24,\n        name: \"controller24\",\n        description: \"Undefined\",\n        position: \"msb\"\n      }, {\n        number: 25,\n        name: \"controller25\",\n        description: \"Undefined\",\n        position: \"msb\"\n      }, {\n        number: 26,\n        name: \"controller26\",\n        description: \"Undefined\",\n        position: \"msb\"\n      }, {\n        number: 27,\n        name: \"controller27\",\n        description: \"Undefined\",\n        position: \"msb\"\n      }, {\n        number: 28,\n        name: \"controller28\",\n        description: \"Undefined\",\n        position: \"msb\"\n      }, {\n        number: 29,\n        name: \"controller29\",\n        description: \"Undefined\",\n        position: \"msb\"\n      }, {\n        number: 30,\n        name: \"controller30\",\n        description: \"Undefined\",\n        position: \"msb\"\n      }, {\n        number: 31,\n        name: \"controller31\",\n        description: \"Undefined\",\n        position: \"msb\"\n      }, {\n        number: 32,\n        name: \"bankselectfine\",\n        description: \"Bank Select (Fine)\",\n        position: \"lsb\"\n      }, {\n        number: 33,\n        name: \"modulationwheelfine\",\n        description: \"Modulation Wheel (Fine)\",\n        position: \"lsb\"\n      }, {\n        number: 34,\n        name: \"breathcontrollerfine\",\n        description: \"Breath Controller (Fine)\",\n        position: \"lsb\"\n      }, {\n        number: 35,\n        name: \"controller35\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      }, {\n        number: 36,\n        name: \"footcontrollerfine\",\n        description: \"Foot Controller (Fine)\",\n        position: \"lsb\"\n      }, {\n        number: 37,\n        name: \"portamentotimefine\",\n        description: \"Portamento Time (Fine)\",\n        position: \"lsb\"\n      }, {\n        number: 38,\n        name: \"dataentryfine\",\n        description: \"Data Entry (Fine)\",\n        position: \"lsb\"\n      }, {\n        number: 39,\n        name: \"channelvolumefine\",\n        description: \"Channel Volume (Fine)\",\n        position: \"lsb\"\n      }, {\n        number: 40,\n        name: \"balancefine\",\n        description: \"Balance (Fine)\",\n        position: \"lsb\"\n      }, {\n        number: 41,\n        name: \"controller41\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      }, {\n        number: 42,\n        name: \"panfine\",\n        description: \"Pan (Fine)\",\n        position: \"lsb\"\n      }, {\n        number: 43,\n        name: \"expressionfine\",\n        description: \"Expression Controller (Fine)\",\n        position: \"lsb\"\n      }, {\n        number: 44,\n        name: \"effectcontrol1fine\",\n        description: \"Effect control 1 (Fine)\",\n        position: \"lsb\"\n      }, {\n        number: 45,\n        name: \"effectcontrol2fine\",\n        description: \"Effect control 2 (Fine)\",\n        position: \"lsb\"\n      }, {\n        number: 46,\n        name: \"controller46\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      }, {\n        number: 47,\n        name: \"controller47\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      }, {\n        number: 48,\n        name: \"controller48\",\n        description: \"General Purpose Controller 1 (Fine)\",\n        position: \"lsb\"\n      }, {\n        number: 49,\n        name: \"controller49\",\n        description: \"General Purpose Controller 2 (Fine)\",\n        position: \"lsb\"\n      }, {\n        number: 50,\n        name: \"controller50\",\n        description: \"General Purpose Controller 3 (Fine)\",\n        position: \"lsb\"\n      }, {\n        number: 51,\n        name: \"controller51\",\n        description: \"General Purpose Controller 4 (Fine)\",\n        position: \"lsb\"\n      }, {\n        number: 52,\n        name: \"controller52\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      }, {\n        number: 53,\n        name: \"controller53\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      }, {\n        number: 54,\n        name: \"controller54\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      }, {\n        number: 55,\n        name: \"controller55\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      }, {\n        number: 56,\n        name: \"controller56\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      }, {\n        number: 57,\n        name: \"controller57\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      }, {\n        number: 58,\n        name: \"controller58\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      }, {\n        number: 59,\n        name: \"controller59\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      }, {\n        number: 60,\n        name: \"controller60\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      }, {\n        number: 61,\n        name: \"controller61\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      }, {\n        number: 62,\n        name: \"controller62\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      }, {\n        number: 63,\n        name: \"controller63\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      }, {\n        number: 64,\n        name: \"damperpedal\",\n        description: \"Damper Pedal On/Off\"\n      }, {\n        number: 65,\n        name: \"portamento\",\n        description: \"Portamento On/Off\"\n      }, {\n        number: 66,\n        name: \"sostenuto\",\n        description: \"Sostenuto On/Off\"\n      }, {\n        number: 67,\n        name: \"softpedal\",\n        description: \"Soft Pedal On/Off\"\n      }, {\n        number: 68,\n        name: \"legatopedal\",\n        description: \"Legato Pedal On/Off\"\n      }, {\n        number: 69,\n        name: \"hold2\",\n        description: \"Hold 2 On/Off\"\n      }, {\n        number: 70,\n        name: \"soundvariation\",\n        description: \"Sound Variation\",\n        position: \"lsb\"\n      }, {\n        number: 71,\n        name: \"resonance\",\n        description: \"Resonance\",\n        position: \"lsb\"\n      }, {\n        number: 72,\n        name: \"releasetime\",\n        description: \"Release Time\",\n        position: \"lsb\"\n      }, {\n        number: 73,\n        name: \"attacktime\",\n        description: \"Attack Time\",\n        position: \"lsb\"\n      }, {\n        number: 74,\n        name: \"brightness\",\n        description: \"Brightness\",\n        position: \"lsb\"\n      }, {\n        number: 75,\n        name: \"decaytime\",\n        description: \"Decay Time\",\n        position: \"lsb\"\n      }, {\n        number: 76,\n        name: \"vibratorate\",\n        description: \"Vibrato Rate\",\n        position: \"lsb\"\n      }, {\n        number: 77,\n        name: \"vibratodepth\",\n        description: \"Vibrato Depth\",\n        position: \"lsb\"\n      }, {\n        number: 78,\n        name: \"vibratodelay\",\n        description: \"Vibrato Delay\",\n        position: \"lsb\"\n      }, {\n        number: 79,\n        name: \"controller79\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      }, {\n        number: 80,\n        name: \"generalpurposecontroller5\",\n        description: \"General Purpose Controller 5\",\n        position: \"lsb\"\n      }, {\n        number: 81,\n        name: \"generalpurposecontroller6\",\n        description: \"General Purpose Controller 6\",\n        position: \"lsb\"\n      }, {\n        number: 82,\n        name: \"generalpurposecontroller7\",\n        description: \"General Purpose Controller 7\",\n        position: \"lsb\"\n      }, {\n        number: 83,\n        name: \"generalpurposecontroller8\",\n        description: \"General Purpose Controller 8\",\n        position: \"lsb\"\n      }, {\n        number: 84,\n        name: \"portamentocontrol\",\n        description: \"Portamento Control\",\n        position: \"lsb\"\n      }, {\n        number: 85,\n        name: \"controller85\",\n        description: \"Undefined\"\n      }, {\n        number: 86,\n        name: \"controller86\",\n        description: \"Undefined\"\n      }, {\n        number: 87,\n        name: \"controller87\",\n        description: \"Undefined\"\n      }, {\n        number: 88,\n        name: \"highresolutionvelocityprefix\",\n        description: \"High Resolution Velocity Prefix\",\n        position: \"lsb\"\n      }, {\n        number: 89,\n        name: \"controller89\",\n        description: \"Undefined\"\n      }, {\n        number: 90,\n        name: \"controller90\",\n        description: \"Undefined\"\n      }, {\n        number: 91,\n        name: \"effect1depth\",\n        description: \"Effects 1 Depth (Reverb Send Level)\"\n      }, {\n        number: 92,\n        name: \"effect2depth\",\n        description: \"Effects 2 Depth\"\n      }, {\n        number: 93,\n        name: \"effect3depth\",\n        description: \"Effects 3 Depth (Chorus Send Level)\"\n      }, {\n        number: 94,\n        name: \"effect4depth\",\n        description: \"Effects 4 Depth\"\n      }, {\n        number: 95,\n        name: \"effect5depth\",\n        description: \"Effects 5 Depth\"\n      }, {\n        number: 96,\n        name: \"dataincrement\",\n        description: \"Data Increment\"\n      }, {\n        number: 97,\n        name: \"datadecrement\",\n        description: \"Data Decrement\"\n      }, {\n        number: 98,\n        name: \"nonregisteredparameterfine\",\n        description: \"Non-Registered Parameter Number (Fine)\",\n        position: \"lsb\"\n      }, {\n        number: 99,\n        name: \"nonregisteredparametercoarse\",\n        description: \"Non-Registered Parameter Number (Coarse)\",\n        position: \"msb\"\n      }, {\n        number: 100,\n        name: \"registeredparameterfine\",\n        description: \"Registered Parameter Number (Fine)\",\n        position: \"lsb\"\n      }, {\n        number: 101,\n        name: \"registeredparametercoarse\",\n        description: \"Registered Parameter Number (Coarse)\",\n        position: \"msb\"\n      }, {\n        number: 102,\n        name: \"controller102\",\n        description: \"Undefined\"\n      }, {\n        number: 103,\n        name: \"controller103\",\n        description: \"Undefined\"\n      }, {\n        number: 104,\n        name: \"controller104\",\n        description: \"Undefined\"\n      }, {\n        number: 105,\n        name: \"controller105\",\n        description: \"Undefined\"\n      }, {\n        number: 106,\n        name: \"controller106\",\n        description: \"Undefined\"\n      }, {\n        number: 107,\n        name: \"controller107\",\n        description: \"Undefined\"\n      }, {\n        number: 108,\n        name: \"controller108\",\n        description: \"Undefined\"\n      }, {\n        number: 109,\n        name: \"controller109\",\n        description: \"Undefined\"\n      }, {\n        number: 110,\n        name: \"controller110\",\n        description: \"Undefined\"\n      }, {\n        number: 111,\n        name: \"controller111\",\n        description: \"Undefined\"\n      }, {\n        number: 112,\n        name: \"controller112\",\n        description: \"Undefined\"\n      }, {\n        number: 113,\n        name: \"controller113\",\n        description: \"Undefined\"\n      }, {\n        number: 114,\n        name: \"controller114\",\n        description: \"Undefined\"\n      }, {\n        number: 115,\n        name: \"controller115\",\n        description: \"Undefined\"\n      }, {\n        number: 116,\n        name: \"controller116\",\n        description: \"Undefined\"\n      }, {\n        number: 117,\n        name: \"controller117\",\n        description: \"Undefined\"\n      }, {\n        number: 118,\n        name: \"controller118\",\n        description: \"Undefined\"\n      }, {\n        number: 119,\n        name: \"controller119\",\n        description: \"Undefined\"\n      }, {\n        number: 120,\n        name: \"allsoundoff\",\n        description: \"All Sound Off\"\n      }, {\n        number: 121,\n        name: \"resetallcontrollers\",\n        description: \"Reset All Controllers\"\n      }, {\n        number: 122,\n        name: \"localcontrol\",\n        description: \"Local Control On/Off\"\n      }, {\n        number: 123,\n        name: \"allnotesoff\",\n        description: \"All Notes Off\"\n      }, {\n        number: 124,\n        name: \"omnimodeoff\",\n        description: \"Omni Mode Off\"\n      }, {\n        number: 125,\n        name: \"omnimodeon\",\n        description: \"Omni Mode On\"\n      }, {\n        number: 126,\n        name: \"monomodeon\",\n        description: \"Mono Mode On\"\n      }, {\n        number: 127,\n        name: \"polymodeon\",\n        description: \"Poly Mode On\"\n      }];\n    }\n    /**\n     * Enumeration of all MIDI registered parameters and their associated pair of numerical values.\n     * MIDI registered parameters extend the original list of control change messages. Currently,\n     * there are only a limited number of them:\n     *\n     *\n     * | Control Function             | [LSB, MSB]   |\n     * |------------------------------|--------------|\n     * | `pitchbendrange`             | [0x00, 0x00] |\n     * | `channelfinetuning`          | [0x00, 0x01] |\n     * | `channelcoarsetuning`        | [0x00, 0x02] |\n     * | `tuningprogram`              | [0x00, 0x03] |\n     * | `tuningbank`                 | [0x00, 0x04] |\n     * | `modulationrange`            | [0x00, 0x05] |\n     * | `azimuthangle`               | [0x3D, 0x00] |\n     * | `elevationangle`             | [0x3D, 0x01] |\n     * | `gain`                       | [0x3D, 0x02] |\n     * | `distanceratio`              | [0x3D, 0x03] |\n     * | `maximumdistance`            | [0x3D, 0x04] |\n     * | `maximumdistancegain`        | [0x3D, 0x05] |\n     * | `referencedistanceratio`     | [0x3D, 0x06] |\n     * | `panspreadangle`             | [0x3D, 0x07] |\n     * | `rollangle`                  | [0x3D, 0x08] |\n     *\n     * @enum {Object.<string, number[]>}\n     * @readonly\n     * @since 3.1\n     * @static\n     */\n\n\n    static get REGISTERED_PARAMETERS() {\n      return {\n        pitchbendrange: [0x00, 0x00],\n        channelfinetuning: [0x00, 0x01],\n        channelcoarsetuning: [0x00, 0x02],\n        tuningprogram: [0x00, 0x03],\n        tuningbank: [0x00, 0x04],\n        modulationrange: [0x00, 0x05],\n        azimuthangle: [0x3D, 0x00],\n        elevationangle: [0x3D, 0x01],\n        gain: [0x3D, 0x02],\n        distanceratio: [0x3D, 0x03],\n        maximumdistance: [0x3D, 0x04],\n        maximumdistancegain: [0x3D, 0x05],\n        referencedistanceratio: [0x3D, 0x06],\n        panspreadangle: [0x3D, 0x07],\n        rollangle: [0x3D, 0x08]\n      };\n    }\n    /**\n     * @enum {Object.<string, number[]>}\n     * @readonly\n     * @deprecated since 3.1 (use Enumerations.REGISTERED_PARAMETERS instead)\n     * @private\n     * @static\n     */\n\n\n    static get MIDI_REGISTERED_PARAMETERS() {\n      if (this.validation) {\n        console.warn(\"The MIDI_REGISTERED_PARAMETERS enum has been deprecated. Use the \" + \"Enumerations.REGISTERED_PARAMETERS enum instead.\");\n      }\n\n      return Enumerations.MIDI_REGISTERED_PARAMETERS;\n    }\n    /**\n     * Enumeration of all valid MIDI system messages and matching numerical values. This library also\n     * uses two additional custom messages.\n     *\n     * **System Common Messages**\n     *\n     * | Function               | Hexadecimal | Decimal |\n     * |------------------------|-------------|---------|\n     * | `sysex`                | 0xF0        |  240    |\n     * | `timecode`             | 0xF1        |  241    |\n     * | `songposition`         | 0xF2        |  242    |\n     * | `songselect`           | 0xF3        |  243    |\n     * | `tunerequest`          | 0xF6        |  246    |\n     * | `sysexend`             | 0xF7        |  247    |\n     *\n     * The `sysexend` message is never actually received. It simply ends a sysex stream.\n     *\n     * **System Real-Time Messages**\n     *\n     * | Function               | Hexadecimal | Decimal |\n     * |------------------------|-------------|---------|\n     * | `clock`                | 0xF8        |  248    |\n     * | `start`                | 0xFA        |  250    |\n     * | `continue`             | 0xFB        |  251    |\n     * | `stop`                 | 0xFC        |  252    |\n     * | `activesensing`        | 0xFE        |  254    |\n     * | `reset`                | 0xFF        |  255    |\n     *\n     * Values 249 and 253 are relayed by the\n     * [Web MIDI API](https://developer.mozilla.org/en-US/docs/Web/API/Web_MIDI_API) but they do not\n     * serve any specific purpose. The\n     * [MIDI 1.0 spec](https://www.midi.org/specifications/item/table-1-summary-of-midi-message)\n     * simply states that they are undefined/reserved.\n     *\n     * **Custom Messages**\n     *\n     * These two messages are mostly for internal use. They are not MIDI messages and cannot be sent\n     * or forwarded.\n     *\n     * | Function               | Hexadecimal | Decimal |\n     * |------------------------|-------------|---------|\n     * | `midimessage`          |             |  0      |\n     * | `unknownsystemmessage` |             |  -1     |\n     *\n     * @enum {Object.<string, number>}\n     * @readonly\n     * @since 3.1\n     * @static\n     */\n\n\n    static get SYSTEM_MESSAGES() {\n      return {\n        // System common messages\n        sysex: 0xF0,\n        // 240\n        timecode: 0xF1,\n        // 241\n        songposition: 0xF2,\n        // 242\n        songselect: 0xF3,\n        // 243\n        tunerequest: 0xF6,\n        // 246\n        tuningrequest: 0xF6,\n        // for backwards-compatibility (deprecated in version 3.0)\n        sysexend: 0xF7,\n        // 247 (never actually received - simply ends a sysex)\n        // System real-time messages\n        clock: 0xF8,\n        // 248\n        start: 0xFA,\n        // 250\n        continue: 0xFB,\n        // 251\n        stop: 0xFC,\n        // 252\n        activesensing: 0xFE,\n        // 254\n        reset: 0xFF,\n        // 255\n        // Custom WebMidi.js messages\n        midimessage: 0,\n        unknownsystemmessage: -1\n      };\n    }\n    /**\n     * @enum {Object.<string, number>}\n     * @readonly\n     * @deprecated since 3.1 (use Enumerations.SYSTEM_MESSAGES instead)\n     * @private\n     * @static\n     */\n\n\n    static get MIDI_SYSTEM_MESSAGES() {\n      if (this.validation) {\n        console.warn(\"The MIDI_SYSTEM_MESSAGES enum has been deprecated. Use the \" + \"Enumerations.SYSTEM_MESSAGES enum instead.\");\n      }\n\n      return Enumerations.SYSTEM_MESSAGES;\n    }\n    /**\n     * Array of channel-specific event names that can be listened for. This includes channel mode\n     * events and RPN/NRPN events.\n     *\n     * @type {string[]}\n     * @readonly\n     */\n\n\n    static get CHANNEL_EVENTS() {\n      return [// MIDI channel message events\n      \"noteoff\", \"controlchange\", \"noteon\", \"keyaftertouch\", \"programchange\", \"channelaftertouch\", \"pitchbend\", // MIDI channel mode events\n      \"allnotesoff\", \"allsoundoff\", \"localcontrol\", \"monomode\", \"omnimode\", \"resetallcontrollers\", // RPN/NRPN events\n      \"nrpn\", \"nrpn-dataentrycoarse\", \"nrpn-dataentryfine\", \"nrpn-dataincrement\", \"nrpn-datadecrement\", \"rpn\", \"rpn-dataentrycoarse\", \"rpn-dataentryfine\", \"rpn-dataincrement\", \"rpn-datadecrement\", // Legacy (remove in v4)\n      \"nrpn-databuttonincrement\", \"nrpn-databuttondecrement\", \"rpn-databuttonincrement\", \"rpn-databuttondecrement\"];\n    }\n\n  }\n\n  /**\n   * The `Note` class represents a single musical note such as `\"D3\"`, `\"G#4\"`, `\"F-1\"`, `\"Gb7\"`, etc.\n   *\n   * `Note` objects can be played back on a single channel by calling\n   * [`OutputChannel.playNote()`]{@link OutputChannel#playNote} or, on multiple channels of the same\n   * output, by calling [`Output.playNote()`]{@link Output#playNote}.\n   *\n   * The note has [`attack`](#attack) and [`release`](#release) velocities set at `0.5` by default.\n   * These can be changed by passing in the appropriate option. It is also possible to set a\n   * system-wide default for attack and release velocities by using the\n   * [`WebMidi.defaults`](WebMidi#defaults) property.\n   *\n   * If you prefer to work with raw MIDI values (`0` to `127`), you can use [`rawAttack`](#rawAttack) and\n   * [`rawRelease`](#rawRelease) to both get and set the values.\n   *\n   * The note may have a [`duration`](#duration). If it does, playback will be automatically stopped\n   * when the duration has elapsed by sending a `\"noteoff\"` event. By default, the duration is set to\n   * `Infinity`. In this case, it will never stop playing unless explicitly stopped by calling a\n   * method such as [`OutputChannel.stopNote()`]{@link OutputChannel#stopNote},\n   * [`Output.stopNote()`]{@link Output#stopNote} or similar.\n   *\n   * @license Apache-2.0\n   * @since 3.0.0\n   */\n\n  class Note {\n    /**\n     * Creates a `Note` object.\n     *\n     * @param value {string|number} The value used to create the note. If an identifier string is used,\n     * it must start with the note letter, optionally followed by an accidental and followed by the\n     * octave number (`\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`, etc.). If a number is used, it must be an\n     * integer between 0 and 127. In this case, middle C is considered to be C4 (note number 60).\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number} [options.duration=Infinity] The number of milliseconds before the note should be\n     * explicitly stopped.\n     *\n     * @param {number} [options.attack=0.5] The note's attack velocity as a float between 0 and 1. If\n     * you wish to use an integer between 0 and 127, use the `rawAttack` option instead. If both\n     * `attack` and `rawAttack` are specified, the latter has precedence.\n     *\n     * @param {number} [options.release=0.5] The note's release velocity as a float between 0 and 1. If\n     * you wish to use an integer between 0 and 127, use the `rawRelease` option instead. If both\n     * `release` and `rawRelease` are specified, the latter has precedence.\n     *\n     * @param {number} [options.rawAttack=64] The note's attack velocity as an integer between 0 and\n     * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n     * `attack` and `rawAttack` are specified, the latter has precedence.\n     *\n     * @param {number} [options.rawRelease=64] The note's release velocity as an integer between 0 and\n     * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n     * `release` and `rawRelease` are specified, the latter has precedence.\n     *\n     * @throws {Error} Invalid note identifier\n     * @throws {RangeError} Invalid name value\n     * @throws {RangeError} Invalid accidental value\n     * @throws {RangeError} Invalid octave value\n     * @throws {RangeError} Invalid duration value\n     * @throws {RangeError} Invalid attack value\n     * @throws {RangeError} Invalid release value\n     */\n    constructor(value, options = {}) {\n      // Assign property defaults\n      this.duration = wm.defaults.note.duration;\n      this.attack = wm.defaults.note.attack;\n      this.release = wm.defaults.note.release; // Assign property values from options (validation occurs in setter)\n\n      if (options.duration != undefined) this.duration = options.duration;\n      if (options.attack != undefined) this.attack = options.attack;\n      if (options.rawAttack != undefined) this.attack = Utilities.from7bitToFloat(options.rawAttack);\n      if (options.release != undefined) this.release = options.release;\n\n      if (options.rawRelease != undefined) {\n        this.release = Utilities.from7bitToFloat(options.rawRelease);\n      } // Assign note depending on the way it was specified (name or number)\n\n\n      if (Number.isInteger(value)) {\n        this.identifier = Utilities.toNoteIdentifier(value);\n      } else {\n        this.identifier = value;\n      }\n    }\n    /**\n     * The name, optional accidental and octave of the note, as a string.\n     * @type {string}\n     * @since 3.0.0\n     */\n\n\n    get identifier() {\n      return this._name + (this._accidental || \"\") + this._octave;\n    }\n\n    set identifier(value) {\n      const fragments = Utilities.getNoteDetails(value);\n\n      if (wm.validation) {\n        if (!value) throw new Error(\"Invalid note identifier\");\n      }\n\n      this._name = fragments.name;\n      this._accidental = fragments.accidental;\n      this._octave = fragments.octave;\n    }\n    /**\n     * The name (letter) of the note. If you need the full name with octave and accidental, you can\n     * use the [`identifier`]{@link Note#identifier} property instead.\n     * @type {string}\n     * @since 3.0.0\n     */\n\n\n    get name() {\n      return this._name;\n    }\n\n    set name(value) {\n      if (wm.validation) {\n        value = value.toUpperCase();\n\n        if (![\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"].includes(value)) {\n          throw new Error(\"Invalid name value\");\n        }\n      }\n\n      this._name = value;\n    }\n    /**\n     * The accidental (#, ##, b or bb) of the note.\n     * @type {string}\n     * @since 3.0.0\n     */\n\n\n    get accidental() {\n      return this._accidental;\n    }\n\n    set accidental(value) {\n      if (wm.validation) {\n        value = value.toLowerCase();\n        if (![\"#\", \"##\", \"b\", \"bb\"].includes(value)) throw new Error(\"Invalid accidental value\");\n      }\n\n      this._accidental = value;\n    }\n    /**\n     * The octave of the note.\n     * @type {number}\n     * @since 3.0.0\n     */\n\n\n    get octave() {\n      return this._octave;\n    }\n\n    set octave(value) {\n      if (wm.validation) {\n        value = parseInt(value);\n        if (isNaN(value)) throw new Error(\"Invalid octave value\");\n      }\n\n      this._octave = value;\n    }\n    /**\n     * The duration of the note as a positive decimal number representing the number of milliseconds\n     * that the note should play for.\n     *\n     * @type {number}\n     * @since 3.0.0\n     */\n\n\n    get duration() {\n      return this._duration;\n    }\n\n    set duration(value) {\n      if (wm.validation) {\n        value = parseFloat(value);\n\n        if (isNaN(value) || value === null || value < 0) {\n          throw new RangeError(\"Invalid duration value.\");\n        }\n      }\n\n      this._duration = value;\n    }\n    /**\n     * The attack velocity of the note as an integer between 0 and 1.\n     * @type {number}\n     * @since 3.0.0\n     */\n\n\n    get attack() {\n      return this._attack;\n    }\n\n    set attack(value) {\n      if (wm.validation) {\n        value = parseFloat(value);\n\n        if (isNaN(value) || !(value >= 0 && value <= 1)) {\n          throw new RangeError(\"Invalid attack value.\");\n        }\n      }\n\n      this._attack = value;\n    }\n    /**\n     * The release velocity of the note as an integer between 0 and 1.\n     * @type {number}\n     * @since 3.0.0\n     */\n\n\n    get release() {\n      return this._release;\n    }\n\n    set release(value) {\n      if (wm.validation) {\n        value = parseFloat(value);\n\n        if (isNaN(value) || !(value >= 0 && value <= 1)) {\n          throw new RangeError(\"Invalid release value.\");\n        }\n      }\n\n      this._release = value;\n    }\n    /**\n     * The attack velocity of the note as a positive integer between 0 and 127.\n     * @type {number}\n     * @since 3.0.0\n     */\n\n\n    get rawAttack() {\n      return Utilities.fromFloatTo7Bit(this._attack);\n    }\n\n    set rawAttack(value) {\n      this._attack = Utilities.from7bitToFloat(value);\n    }\n    /**\n     * The release velocity of the note as a positive integer between 0 and 127.\n     * @type {number}\n     * @since 3.0.0\n     */\n\n\n    get rawRelease() {\n      return Utilities.fromFloatTo7Bit(this._release);\n    }\n\n    set rawRelease(value) {\n      this._release = Utilities.from7bitToFloat(value);\n    }\n    /**\n     * The MIDI number of the note (`0` - `127`). This number is derived from the note identifier\n     * using C4 as a reference for middle C.\n     *\n     * @type {number}\n     * @readonly\n     * @since 3.0.0\n     */\n\n\n    get number() {\n      return Utilities.toNoteNumber(this.identifier);\n    }\n    /**\n     * Returns a MIDI note number offset by octave and/or semitone. If the calculated value is less\n     * than 0, 0 will be returned. If the calculated value is more than 127, 127 will be returned. If\n     * an invalid value is supplied, 0 will be used.\n     *\n     * @param [octaveOffset] {number} An integer to offset the note number by octave.\n     * @param [semitoneOffset] {number} An integer to offset the note number by semitone.\n     * @returns {number} An integer between 0 and 127\n     */\n\n\n    getOffsetNumber(octaveOffset = 0, semitoneOffset = 0) {\n      if (wm.validation) {\n        octaveOffset = parseInt(octaveOffset) || 0;\n        semitoneOffset = parseInt(semitoneOffset) || 0;\n      }\n\n      return Math.min(Math.max(this.number + octaveOffset * 12 + semitoneOffset, 0), 127);\n    }\n\n  }\n\n  /**\n   * The `Utilities` class contains general-purpose utility methods. All methods are static and\n   * should be called using the class name. For example: `Utilities.getNoteDetails(\"C4\")`.\n   *\n   * @license Apache-2.0\n   * @since 3.0.0\n   */\n\n  class Utilities {\n    /**\n     * Returns a MIDI note number matching the identifier passed in the form of a string. The\n     * identifier must include the octave number. The identifier also optionally include a sharp (#),\n     * a double sharp (##), a flat (b) or a double flat (bb) symbol. For example, these are all valid\n     * identifiers: C5, G4, D#-1, F0, Gb7, Eb-1, Abb4, B##6, etc.\n     *\n     * When converting note identifiers to numbers, C4 is considered to be middle C (MIDI note number\n     * 60) as per the scientific pitch notation standard.\n     *\n     * The resulting note number can be offset by using the `octaveOffset` parameter.\n     *\n     * @param identifier {string} The identifier in the form of a letter, followed by an optional \"#\",\n     * \"##\", \"b\" or \"bb\" followed by the octave number. For exemple: C5, G4, D#-1, F0, Gb7, Eb-1,\n     * Abb4, B##6, etc.\n     *\n     * @param {number} [octaveOffset=0] A integer to offset the octave by.\n     *\n     * @returns {number} The MIDI note number (an integer between 0 and 127).\n     *\n     * @throws RangeError Invalid 'octaveOffset' value\n     *\n     * @throws TypeError Invalid note identifier\n     *\n     * @license Apache-2.0\n     * @since 3.0.0\n     * @static\n     */\n    static toNoteNumber(identifier, octaveOffset = 0) {\n      // Validation\n      octaveOffset = octaveOffset == undefined ? 0 : parseInt(octaveOffset);\n      if (isNaN(octaveOffset)) throw new RangeError(\"Invalid 'octaveOffset' value\");\n      if (typeof identifier !== \"string\") identifier = \"\";\n      const fragments = this.getNoteDetails(identifier);\n      if (!fragments) throw new TypeError(\"Invalid note identifier\");\n      const notes = {\n        C: 0,\n        D: 2,\n        E: 4,\n        F: 5,\n        G: 7,\n        A: 9,\n        B: 11\n      };\n      let result = (fragments.octave + 1 + octaveOffset) * 12;\n      result += notes[fragments.name];\n\n      if (fragments.accidental) {\n        if (fragments.accidental.startsWith(\"b\")) {\n          result -= fragments.accidental.length;\n        } else {\n          result += fragments.accidental.length;\n        }\n      }\n\n      if (result < 0 || result > 127) throw new RangeError(\"Invalid octaveOffset value\");\n      return result;\n    }\n    /**\n     * Given a proper note identifier (`C#4`, `Gb-1`, etc.) or a valid MIDI note number (0-127), this\n     * method returns an object containing broken down details about the specified note (uppercase\n     * letter, accidental and octave).\n     *\n     * When a number is specified, the translation to note is done using a value of 60 for middle C\n     * (C4 = middle C).\n     *\n     * @param value {string|number} A note identifier A  atring (\"C#4\", \"Gb-1\", etc.) or a MIDI note\n     * number (0-127).\n     *\n     * @returns {{accidental: string, identifier: string, name: string, octave: number }}\n     *\n     * @throws TypeError Invalid note identifier\n     *\n     * @since 3.0.0\n     * @static\n     */\n\n\n    static getNoteDetails(value) {\n      if (Number.isInteger(value)) value = this.toNoteIdentifier(value);\n      const matches = value.match(/^([CDEFGAB])(#{0,2}|b{0,2})(-?\\d+)$/i);\n      if (!matches) throw new TypeError(\"Invalid note identifier\");\n      const name = matches[1].toUpperCase();\n      const octave = parseInt(matches[3]);\n      let accidental = matches[2].toLowerCase();\n      accidental = accidental === \"\" ? undefined : accidental;\n      const fragments = {\n        accidental: accidental,\n        identifier: name + (accidental || \"\") + octave,\n        name: name,\n        octave: octave\n      };\n      return fragments;\n    }\n    /**\n     * Returns a sanitized array of valid MIDI channel numbers (1-16). The parameter should be a\n     * single integer or an array of integers.\n     *\n     * For backwards-compatibility, passing `undefined` as a parameter to this method results in all\n     * channels being returned (1-16). Otherwise, parameters that cannot successfully be parsed to\n     * integers between 1 and 16 are silently ignored.\n     *\n     * @param [channel] {number|number[]} An integer or an array of integers to parse as channel\n     * numbers.\n     *\n     * @returns {number[]} An array of 0 or more valid MIDI channel numbers.\n     *\n     * @since 3.0.0\n     * @static\n     */\n\n\n    static sanitizeChannels(channel) {\n      let channels;\n\n      if (wm.validation) {\n        if (channel === \"all\") {\n          // backwards-compatibility\n          channels = [\"all\"];\n        } else if (channel === \"none\") {\n          // backwards-compatibility\n          return [];\n        }\n      }\n\n      if (!Array.isArray(channel)) {\n        channels = [channel];\n      } else {\n        channels = channel;\n      } // In order to preserve backwards-compatibility, we let this assignment as it is.\n\n\n      if (channels.indexOf(\"all\") > -1) {\n        channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n      return channels.map(function (ch) {\n        return parseInt(ch);\n      }).filter(function (ch) {\n        return ch >= 1 && ch <= 16;\n      });\n    }\n    /**\n     * Returns a valid timestamp, relative to the navigation start of the document, derived from the\n     * `time` parameter. If the parameter is a string starting with the \"+\" sign and followed by a\n     * number, the resulting timestamp will be the sum of the current timestamp plus that number. If\n     * the parameter is a positive number, it will be returned as is. Otherwise, false will be\n     * returned.\n     *\n     * @param [time] {number|string} The time string (e.g. `\"+2000\"`) or number to parse\n     * @return {number|false} A positive number or `false` (if the time cannot be converted)\n     *\n     * @since 3.0.0\n     * @static\n     */\n\n\n    static toTimestamp(time) {\n      let value = false;\n      const parsed = parseFloat(time);\n      if (isNaN(parsed)) return false;\n\n      if (typeof time === \"string\" && time.substring(0, 1) === \"+\") {\n        if (parsed >= 0) value = wm.time + parsed;\n      } else {\n        if (parsed >= 0) value = parsed;\n      }\n\n      return value;\n    }\n    /**\n     * Returns a valid MIDI note number (0-127) given the specified input. The input usually is a\n     * string containing a note identifier (`\"C3\"`, `\"F#4\"`, `\"D-2\"`, `\"G8\"`, etc.). If an integer\n     * between 0 and 127 is passed, it will simply be returned as is (for convenience). Other strings\n     * will be parsed for integer value, if possible.\n     *\n     * If the input is an identifier, the resulting note number is offset by the `octaveOffset`\n     * parameter. For example, if you pass in \"C4\" (note number 60) and the `octaveOffset` value is\n     * -2, the resulting MIDI note number will be 36.\n     *\n     * @param input {string|number} A string or number to extract the MIDI note number from.\n     * @param octaveOffset {number} An integer to offset the octave by\n     *\n     * @returns {number|false} A valid MIDI note number (0-127) or `false` if the input could not\n     * successfully be parsed to a note number.\n     *\n     * @since 3.0.0\n     * @static\n     */\n\n\n    static guessNoteNumber(input, octaveOffset) {\n      // Validate and, if necessary, assign default\n      octaveOffset = parseInt(octaveOffset) || 0;\n      let output = false; // Check input type\n\n      if (Number.isInteger(input) && input >= 0 && input <= 127) {\n        // uint\n        output = parseInt(input);\n      } else if (parseInt(input) >= 0 && parseInt(input) <= 127) {\n        // float or uint as string\n        output = parseInt(input);\n      } else if (typeof input === \"string\" || input instanceof String) {\n        // string\n        try {\n          output = this.toNoteNumber(input.trim(), octaveOffset);\n        } catch (e) {\n          return false;\n        }\n      }\n\n      return output;\n    }\n    /**\n     * Returns an identifier string representing a note name (with optional accidental) followed by an\n     * octave number. The octave can be offset by using the `octaveOffset` parameter.\n     *\n     * @param {number} number The MIDI note number to convert to a note identifier\n     * @param {number} octaveOffset An offset to apply to the resulting octave\n     *\n     * @returns {string}\n     *\n     * @throws RangeError Invalid note number\n     * @throws RangeError Invalid octaveOffset value\n     *\n     * @since 3.0.0\n     * @static\n     */\n\n\n    static toNoteIdentifier(number, octaveOffset) {\n      number = parseInt(number);\n      if (isNaN(number) || number < 0 || number > 127) throw new RangeError(\"Invalid note number\");\n      octaveOffset = octaveOffset == undefined ? 0 : parseInt(octaveOffset);\n      if (isNaN(octaveOffset)) throw new RangeError(\"Invalid octaveOffset value\");\n      const notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n      const octave = Math.floor(number / 12 - 1) + octaveOffset;\n      return notes[number % 12] + octave.toString();\n    }\n    /**\n     * Converts the `input` parameter to a valid [`Note`]{@link Note} object. The input usually is an\n     * unsigned integer (0-127) or a note identifier (`\"C4\"`, `\"G#5\"`, etc.). If the input is a\n     * [`Note`]{@link Note} object, it will be returned as is.\n     *\n     * If the input is a note number or identifier, it is possible to specify options by providing the\n     * `options` parameter.\n     *\n     * @param [input] {number|string|Note}\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number} [options.duration=Infinity] The number of milliseconds before the note should\n     * be explicitly stopped.\n     *\n     * @param {number} [options.attack=0.5] The note's attack velocity as a float between 0 and 1. If\n     * you wish to use an integer between 0 and 127, use the `rawAttack` option instead. If both\n     * `attack` and `rawAttack` are specified, the latter has precedence.\n     *\n     * @param {number} [options.release=0.5] The note's release velocity as a float between 0 and 1. If\n     * you wish to use an integer between 0 and 127, use the `rawRelease` option instead. If both\n     * `release` and `rawRelease` are specified, the latter has precedence.\n     *\n     * @param {number} [options.rawAttack=64] The note's attack velocity as an integer between 0 and\n     * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n     * `attack` and `rawAttack` are specified, the latter has precedence.\n     *\n     * @param {number} [options.rawRelease=64] The note's release velocity as an integer between 0 and\n     * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n     * `release` and `rawRelease` are specified, the latter has precedence.\n     *\n     * @param {number} [options.octaveOffset=0] An integer to offset the octave by. **This is only\n     * used when the input value is a note identifier.**\n     *\n     * @returns {Note}\n     *\n     * @throws TypeError The input could not be parsed to a note\n     *\n     * @since version 3.0.0\n     * @static\n     */\n\n\n    static buildNote(input, options = {}) {\n      options.octaveOffset = parseInt(options.octaveOffset) || 0; // If it's already a Note, we're done\n\n      if (input instanceof Note) return input;\n      let number = this.guessNoteNumber(input, options.octaveOffset);\n\n      if (number === false) {\n        // We use a comparison b/c the note can be 0 (which equates to false)\n        throw new TypeError(`The input could not be parsed as a note (${input})`);\n      } // If we got here, we have a proper note number. Before creating the new note, we strip out\n      // 'octaveOffset' because it has already been factored in when calling guessNoteNumber().\n\n\n      options.octaveOffset = undefined;\n      return new Note(number, options);\n    }\n    /**\n     * Converts an input value, which can be an unsigned integer (0-127), a note identifier, a\n     * [`Note`]{@link Note}  object or an array of the previous types, to an array of\n     * [`Note`]{@link Note}  objects.\n     *\n     * [`Note`]{@link Note}  objects are returned as is. For note numbers and identifiers, a\n     * [`Note`]{@link Note} object is created with the options specified. An error will be thrown when\n     * encountering invalid input.\n     *\n     * Note: if both the `attack` and `rawAttack` options are specified, the later has priority. The\n     * same goes for `release` and `rawRelease`.\n     *\n     * @param [notes] {number|string|Note|number[]|string[]|Note[]}\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number} [options.duration=Infinity] The number of milliseconds before the note should\n     * be explicitly stopped.\n     *\n     * @param {number} [options.attack=0.5] The note's attack velocity as a float between 0 and 1. If\n     * you wish to use an integer between 0 and 127, use the `rawAttack` option instead. If both\n     * `attack` and `rawAttack` are specified, the latter has precedence.\n     *\n     * @param {number} [options.release=0.5] The note's release velocity as a float between 0 and 1. If\n     * you wish to use an integer between 0 and 127, use the `rawRelease` option instead. If both\n     * `release` and `rawRelease` are specified, the latter has precedence.\n     *\n     * @param {number} [options.rawAttack=64] The note's attack velocity as an integer between 0 and\n     * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n     * `attack` and `rawAttack` are specified, the latter has precedence.\n     *\n     * @param {number} [options.rawRelease=64] The note's release velocity as an integer between 0 and\n     * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n     * `release` and `rawRelease` are specified, the latter has precedence.\n     *\n     * @param {number} [options.octaveOffset=0] An integer to offset the octave by. **This is only\n     * used when the input value is a note identifier.**\n     *\n     * @returns {Note[]}\n     *\n     * @throws TypeError An element could not be parsed as a note.\n     *\n     * @since 3.0.0\n     * @static\n     */\n\n\n    static buildNoteArray(notes, options = {}) {\n      let result = [];\n      if (!Array.isArray(notes)) notes = [notes];\n      notes.forEach(note => {\n        result.push(this.buildNote(note, options));\n      });\n      return result;\n    }\n    /**\n     * Returns a number between 0 and 1 representing the ratio of the input value divided by 127 (7\n     * bit). The returned value is restricted between 0 and 1 even if the input is greater than 127 or\n     * smaller than 0.\n     *\n     * Passing `Infinity` will return `1` and passing `-Infinity` will return `0`. Otherwise, when the\n     * input value cannot be converted to an integer, the method returns 0.\n     *\n     * @param value {number} A positive integer between 0 and 127 (inclusive)\n     * @returns {number} A number between 0 and 1 (inclusive)\n     * @static\n     */\n\n\n    static from7bitToFloat(value) {\n      if (value === Infinity) value = 127;\n      value = parseInt(value) || 0;\n      return Math.min(Math.max(value / 127, 0), 1);\n    }\n    /**\n     * Returns an integer between 0 and 127 which is the result of multiplying the input value by\n     * 127. The input value should be a number between 0 and 1 (inclusively). The returned value is\n     * restricted between 0 and 127 even if the input is greater than 1 or smaller than 0.\n     *\n     * Passing `Infinity` will return `127` and passing `-Infinity` will return `0`. Otherwise, when\n     * the input value cannot be converted to a number, the method returns 0.\n     *\n     * @param value {number} A positive float between 0 and 1 (inclusive)\n     * @returns {number} A number between 0 and 127 (inclusive)\n     * @static\n     */\n\n\n    static fromFloatTo7Bit(value) {\n      if (value === Infinity) value = 1;\n      value = parseFloat(value) || 0;\n      return Math.min(Math.max(Math.round(value * 127), 0), 127);\n    }\n    /**\n     * Combines and converts MSB and LSB values (0-127) to a float between 0 and 1. The returned value\n     * is within between 0 and 1 even if the result is greater than 1 or smaller than 0.\n     *\n     * @param msb {number} The most significant byte as a integer between 0 and 127.\n     * @param [lsb=0] {number} The least significant byte as a integer between 0 and 127.\n     * @returns {number} A float between 0 and 1.\n     */\n\n\n    static fromMsbLsbToFloat(msb, lsb = 0) {\n      if (wm.validation) {\n        msb = Math.min(Math.max(parseInt(msb) || 0, 0), 127);\n        lsb = Math.min(Math.max(parseInt(lsb) || 0, 0), 127);\n      }\n\n      const value = ((msb << 7) + lsb) / 16383;\n      return Math.min(Math.max(value, 0), 1);\n    }\n    /**\n     * Extracts 7bit MSB and LSB values from the supplied float.\n     *\n     * @param value {number} A float between 0 and 1\n     * @returns {{lsb: number, msb: number}}\n     */\n\n\n    static fromFloatToMsbLsb(value) {\n      if (wm.validation) {\n        value = Math.min(Math.max(parseFloat(value) || 0, 0), 1);\n      }\n\n      const multiplied = Math.round(value * 16383);\n      return {\n        msb: multiplied >> 7,\n        lsb: multiplied & 0x7F\n      };\n    }\n    /**\n     * Returns the supplied MIDI note number offset by the requested octave and semitone values. If\n     * the calculated value is less than 0, 0 will be returned. If the calculated value is more than\n     * 127, 127 will be returned. If an invalid offset value is supplied, 0 will be used.\n     *\n     * @param number {number} The MIDI note to offset as an integer between 0 and 127.\n     * @param octaveOffset {number} An integer to offset the note by (in octave)\n     * @param octaveOffset {number} An integer to offset the note by (in semitones)\n     * @returns {number} An integer between 0 and 127\n     *\n     * @throws {Error} Invalid note number\n     * @static\n     */\n\n\n    static offsetNumber(number, octaveOffset = 0, semitoneOffset = 0) {\n      if (wm.validation) {\n        number = parseInt(number);\n        if (isNaN(number)) throw new Error(\"Invalid note number\");\n        octaveOffset = parseInt(octaveOffset) || 0;\n        semitoneOffset = parseInt(semitoneOffset) || 0;\n      }\n\n      return Math.min(Math.max(number + octaveOffset * 12 + semitoneOffset, 0), 127);\n    }\n    /**\n     * Returns the name of the first property of the supplied object whose value is equal to the one\n     * supplied. If nothing is found, `undefined` is returned.\n     *\n     * @param object {object} The object to look for the property in.\n     * @param value {*} Any value that can be expected to be found in the object's properties.\n     * @returns {string|undefined} The name of the matching property or `undefined` if nothing is\n     * found.\n     * @static\n     */\n\n\n    static getPropertyByValue(object, value) {\n      return Object.keys(object).find(key => object[key] === value);\n    }\n    /**\n     * Returns the name of a control change message matching the specified number (0-127). Some valid\n     * control change numbers do not have a specific name or purpose assigned in the MIDI\n     * [spec](https://midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2).\n     * In these cases, the method returns `controllerXXX` (where XXX is the number).\n     *\n     * @param {number} number An integer (0-127) representing the control change message\n     * @returns {string|undefined} The matching control change name or `undefined` if no match was\n     * found.\n     *\n     * @static\n     */\n\n\n    static getCcNameByNumber(number) {\n      if (wm.validation) {\n        number = parseInt(number);\n        if (!(number >= 0 && number <= 127)) return undefined;\n      }\n\n      return Enumerations.CONTROL_CHANGE_MESSAGES[number].name;\n    }\n    /**\n     * Returns the number of a control change message matching the specified name.\n     *\n     * @param {string} name A string representing the control change message\n     * @returns {string|undefined} The matching control change number or `undefined` if no match was\n     * found.\n     *\n     * @since 3.1\n     * @static\n     */\n\n\n    static getCcNumberByName(name) {\n      let message = Enumerations.CONTROL_CHANGE_MESSAGES.find(element => element.name === name);\n\n      if (message) {\n        return message.number;\n      } else {\n        // Legacy (remove in v4)\n        return Enumerations.MIDI_CONTROL_CHANGE_MESSAGES[name];\n      }\n    }\n    /**\n     * Returns the channel mode name matching the specified number. If no match is found, the function\n     * returns `false`.\n     *\n     * @param {number} number An integer representing the channel mode message (120-127)\n     * @returns {string|false} The name of the matching channel mode or `false` if no match could be\n     * found.\n     *\n     * @since 2.0.0\n     */\n\n\n    static getChannelModeByNumber(number) {\n      if (!(number >= 120 && number <= 127)) return false;\n\n      for (let cm in Enumerations.CHANNEL_MODE_MESSAGES) {\n        if (Enumerations.CHANNEL_MODE_MESSAGES.hasOwnProperty(cm) && number === Enumerations.CHANNEL_MODE_MESSAGES[cm]) {\n          return cm;\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Indicates whether the execution environment is Node.js (`true`) or not (`false`)\n     * @type {boolean}\n     */\n\n\n    static get isNode() {\n      return typeof process !== \"undefined\" && process.versions != null && process.versions.node != null;\n    }\n    /**\n     * Indicates whether the execution environment is a browser (`true`) or not (`false`)\n     * @type {boolean}\n     */\n\n\n    static get isBrowser() {\n      return typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\n    }\n\n  }\n\n  /**\n   * The `OutputChannel` class represents a single output MIDI channel. `OutputChannel` objects are\n   * provided by an [`Output`](Output) port which, itself, is made available by a device. The\n   * `OutputChannel` object is derived from the host's MIDI subsystem and should not be instantiated\n   * directly.\n   *\n   * All 16 `OutputChannel` objects can be found inside the parent output's\n   * [`channels`]{@link Output#channels} property.\n   *\n   * @param {Output} output The [`Output`](Output) this channel belongs to.\n   * @param {number} number The MIDI channel number (`1` - `16`).\n   *\n   * @extends EventEmitter\n   * @license Apache-2.0\n   * @since 3.0.0\n   */\n\n  class OutputChannel extends EventEmitter {\n    /**\n     * Creates an `OutputChannel` object.\n     *\n     * @param {Output} output The [`Output`](Output) this channel belongs to.\n     * @param {number} number The MIDI channel number (`1` - `16`).\n     */\n    constructor(output, number) {\n      super();\n      /**\n       * @type {Output}\n       * @private\n       */\n\n      this._output = output;\n      /**\n       * @type {number}\n       * @private\n       */\n\n      this._number = number;\n      /**\n       * @type {number}\n       * @private\n       */\n\n      this._octaveOffset = 0;\n    }\n    /**\n     * Unlinks the MIDI subsystem, removes all listeners attached to the channel and nulls the channel\n     * number. This method is mostly for internal use. It has not been prefixed with an underscore\n     * since it is called by other objects such as the `Output` object.\n     *\n     * @private\n     */\n\n\n    destroy() {\n      this._output = null;\n      this._number = null;\n      this._octaveOffset = 0;\n      this.removeListener();\n    }\n    /**\n     * Sends a MIDI message on the MIDI output port. If no time is specified, the message will be\n     * sent immediately. The message should be an array of 8-bit unsigned integers (`0` - `225`),\n     * a\n     * [`Uint8Array`]{@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array}\n     * object or a [`Message`](Message) object.\n     *\n     * It is usually not necessary to use this method directly as you can use one of the simpler\n     * helper methods such as [`playNote()`](#playNote), [`stopNote()`](#stopNote),\n     * [`sendControlChange()`](#sendControlChange), etc.\n     *\n     * Details on the format of MIDI messages are available in the summary of\n     * [MIDI messages]{@link https://www.midi.org/specifications-old/item/table-1-summary-of-midi-message}\n     * from the MIDI Manufacturers Association.\n     *\n     * @param message {number[]|Uint8Array|Message} A `Message` object, an array of 8-bit unsigned\n     * integers or a `Uint8Array` object (not available in Node.js) containing the message bytes.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {RangeError} The first byte (status) must be an integer between 128 and 255.\n     *\n     * @throws {RangeError} Data bytes must be integers between 0 and 255.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */\n\n\n    send(message, options = {\n      time: 0\n    }) {\n      this.output.send(message, options);\n      return this;\n    }\n    /**\n     * Sends a MIDI **key aftertouch** message at the scheduled time. This is a key-specific\n     * aftertouch. For a channel-wide aftertouch message, use\n     * [`sendChannelAftertouch()`]{@link #sendChannelAftertouch}.\n     *\n     * @param target {number|Note|string|number[]|Note[]|string[]} The note(s) for which you are sending\n     * an aftertouch value. The notes can be specified by using a MIDI note number (`0` - `127`), a\n     * [`Note`](Note) object, a note identifier (e.g. `C3`, `G#4`, `F-1`, `Db7`) or an array of the\n     * previous types. When using a note identifier, octave range must be between `-1` and `9`. The\n     * lowest note is `C-1` (MIDI note number `0`) and the highest note is `G9` (MIDI note number\n     * `127`).\n     *\n     * When using a note identifier, the octave value will be offset by the local\n     * [`octaveOffset`](#octaveOffset) and by\n     * [`Output.octaveOffset`](Output#octaveOffset) and [`WebMidi.octaveOffset`](WebMidi#octaveOffset)\n     * (if those values are not `0`). When using a key number, `octaveOffset` values are ignored.\n     *\n     * @param [pressure=0.5] {number} The pressure level (between `0` and `1`). An invalid pressure\n     * value will silently trigger the default behaviour. If the `rawValue` option is set to `true`,\n     * the pressure is defined by using an integer between `0` and `127`.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n     * considered a float between `0` and `1.0` (default) or a raw integer between `0` and `127`.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @return {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     *\n     * @throws RangeError Invalid key aftertouch value.\n     */\n\n\n    sendKeyAftertouch(target, pressure, options = {}) {\n      if (wm.validation) {\n        // Legacy support\n        if (options.useRawValue) options.rawValue = options.useRawValue;\n\n        if (isNaN(parseFloat(pressure))) {\n          throw new RangeError(\"Invalid key aftertouch value.\");\n        }\n\n        if (options.rawValue) {\n          if (!(pressure >= 0 && pressure <= 127 && Number.isInteger(pressure))) {\n            throw new RangeError(\"Key aftertouch raw value must be an integer between 0 and 127.\");\n          }\n        } else {\n          if (!(pressure >= 0 && pressure <= 1)) {\n            throw new RangeError(\"Key aftertouch value must be a float between 0 and 1.\");\n          }\n        }\n      } // Normalize pressure to integer\n\n\n      if (!options.rawValue) pressure = Utilities.fromFloatTo7Bit(pressure); // Plot total offset\n\n      const offset = wm.octaveOffset + this.output.octaveOffset + this.octaveOffset; // Make sure we are dealing with an array\n\n      if (!Array.isArray(target)) target = [target];\n      Utilities.buildNoteArray(target).forEach(n => {\n        this.send([(Enumerations.CHANNEL_MESSAGES.keyaftertouch << 4) + (this.number - 1), n.getOffsetNumber(offset), pressure], {\n          time: Utilities.toTimestamp(options.time)\n        });\n      });\n      return this;\n    }\n    /**\n     * Sends a MIDI **control change** message to the channel at the scheduled time. The control\n     * change message to send can be specified numerically (`0` to `127`) or by using one of the\n     * following common names:\n     *\n     * | Number | Name                          |\n     * |--------|-------------------------------|\n     * | 0      |`bankselectcoarse`             |\n     * | 1      |`modulationwheelcoarse`        |\n     * | 2      |`breathcontrollercoarse`       |\n     * | 4      |`footcontrollercoarse`         |\n     * | 5      |`portamentotimecoarse`         |\n     * | 6      |`dataentrycoarse`              |\n     * | 7      |`volumecoarse`                 |\n     * | 8      |`balancecoarse`                |\n     * | 10     |`pancoarse`                    |\n     * | 11     |`expressioncoarse`             |\n     * | 12     |`effectcontrol1coarse`         |\n     * | 13     |`effectcontrol2coarse`         |\n     * | 18     |`generalpurposeslider3`        |\n     * | 19     |`generalpurposeslider4`        |\n     * | 32     |`bankselectfine`               |\n     * | 33     |`modulationwheelfine`          |\n     * | 34     |`breathcontrollerfine`         |\n     * | 36     |`footcontrollerfine`           |\n     * | 37     |`portamentotimefine`           |\n     * | 38     |`dataentryfine`                |\n     * | 39     |`volumefine`                   |\n     * | 40     |`balancefine`                  |\n     * | 42     |`panfine`                      |\n     * | 43     |`expressionfine`               |\n     * | 44     |`effectcontrol1fine`           |\n     * | 45     |`effectcontrol2fine`           |\n     * | 64     |`holdpedal`                    |\n     * | 65     |`portamento`                   |\n     * | 66     |`sustenutopedal`               |\n     * | 67     |`softpedal`                    |\n     * | 68     |`legatopedal`                  |\n     * | 69     |`hold2pedal`                   |\n     * | 70     |`soundvariation`               |\n     * | 71     |`resonance`                    |\n     * | 72     |`soundreleasetime`             |\n     * | 73     |`soundattacktime`              |\n     * | 74     |`brightness`                   |\n     * | 75     |`soundcontrol6`                |\n     * | 76     |`soundcontrol7`                |\n     * | 77     |`soundcontrol8`                |\n     * | 78     |`soundcontrol9`                |\n     * | 79     |`soundcontrol10`               |\n     * | 80     |`generalpurposebutton1`        |\n     * | 81     |`generalpurposebutton2`        |\n     * | 82     |`generalpurposebutton3`        |\n     * | 83     |`generalpurposebutton4`        |\n     * | 91     |`reverblevel`                  |\n     * | 92     |`tremololevel`                 |\n     * | 93     |`choruslevel`                  |\n     * | 94     |`celestelevel`                 |\n     * | 95     |`phaserlevel`                  |\n     * | 96     |`dataincrement`                |\n     * | 97     |`datadecrement`                |\n     * | 98     |`nonregisteredparametercoarse` |\n     * | 99     |`nonregisteredparameterfine`   |\n     * | 100    |`registeredparametercoarse`    |\n     * | 101    |`registeredparameterfine`      |\n     * | 120    |`allsoundoff`                  |\n     * | 121    |`resetallcontrollers`          |\n     * | 122    |`localcontrol`                 |\n     * | 123    |`allnotesoff`                  |\n     * | 124    |`omnimodeoff`                  |\n     * | 125    |`omnimodeon`                   |\n     * | 126    |`monomodeon`                   |\n     * | 127    |`polymodeon`                   |\n     *\n     * As you can see above, not all control change message have a matching name. This does not mean\n     * you cannot use the others. It simply means you will need to use their number\n     * (`0` to `127`) instead of their name. While you can still use them, numbers `120` to `127` are\n     * usually reserved for *channel mode* messages. See\n     * [`sendChannelMode()`]{@link OutputChannel#sendChannelMode} method for more info.\n     *\n     * To view a detailed list of all available **control change** messages, please consult \"Table 3 -\n     * Control Change Messages\" from the [MIDI Messages](\n     * https://www.midi.org/specifications/item/table-3-control-change-messages-data-bytes-2)\n     * specification.\n     *\n     * **Note**: messages #0-31 (MSB) are paired with messages #32-63 (LSB). For example, message #1\n     * (`modulationwheelcoarse`) can be accompanied by a second control change message for\n     * `modulationwheelfine` to achieve a greater level of precision. if you want to specify both MSB\n     * and LSB for messages between `0` and `31`, you can do so by passing a 2-value array as the\n     * second parameter.\n     *\n     * @param {number|string} controller The MIDI controller name or number (`0` - `127`).\n     *\n     * @param {number|number[]} value The value to send (0-127). You can also use a two-position array\n     * for controllers 0 to 31. In this scenario, the first value will be sent as usual and the second\n     * value will be sent to the matching LSB controller (which is obtained by adding 32 to the first\n     * controller)\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {RangeError} Controller numbers must be between 0 and 127.\n     * @throws {RangeError} Invalid controller name.\n     * @throws {TypeError} The value array must have a length of 2.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     *\n     * @license Apache-2.0\n     * @since 3.0.0\n     */\n\n\n    sendControlChange(controller, value, options = {}) {\n      if (typeof controller === \"string\") {\n        controller = Utilities.getCcNumberByName(controller);\n      }\n\n      if (!Array.isArray(value)) value = [value];\n\n      if (wm.validation) {\n        if (controller === undefined) {\n          throw new TypeError(\"Control change must be identified with a valid name or an integer between 0 and 127.\");\n        }\n\n        if (!Number.isInteger(controller) || !(controller >= 0 && controller <= 127)) {\n          throw new TypeError(\"Control change number must be an integer between 0 and 127.\");\n        }\n\n        value = value.map(item => {\n          const output = Math.min(Math.max(parseInt(item), 0), 127);\n          if (isNaN(output)) throw new TypeError(\"Values must be integers between 0 and 127\");\n          return output;\n        });\n\n        if (value.length === 2 && controller >= 32) {\n          throw new TypeError(\"To use a value array, the controller must be between 0 and 31\");\n        }\n      }\n\n      value.forEach((item, index) => {\n        this.send([(Enumerations.CHANNEL_MESSAGES.controlchange << 4) + (this.number - 1), controller + index * 32, value[index]], {\n          time: Utilities.toTimestamp(options.time)\n        });\n      });\n      return this;\n    }\n    /**\n     * Selects a MIDI non-registered parameter so it is affected by upcoming data entry, data\n     * increment and data decrement messages.\n     *\n     * @param parameter {number[]} A two-position array specifying the two control bytes that identify\n     * the registered parameter. The NRPN MSB (99 or 0x63) is a position 0. The NRPN LSB (98 or 0x62)\n     * is at position 1.\n     *\n     * @private\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n     * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n     * operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */\n\n\n    _selectNonRegisteredParameter(parameter, options = {}) {\n      // parameter[0] = Math.floor(parameter[0]);\n      // if (!(parameter[0] >= 0 && parameter[0] <= 127)) {\n      //   throw new RangeError(\"The control63 value must be between 0 and 127.\");\n      // }\n      //\n      // parameter[1] = Math.floor(parameter[1]);\n      // if (!(parameter[1] >= 0 && parameter[1] <= 127)) {\n      //   throw new RangeError(\"The control62 value must be between 0 and 127.\");\n      // }\n      this.sendControlChange(0x63, parameter[0], options);\n      this.sendControlChange(0x62, parameter[1], options);\n      return this;\n    }\n    /**\n     * Deselects the currently active MIDI registered parameter so it is no longer affected by data\n     * entry, data increment and data decrement messages.\n     *\n     * Current best practice recommends doing that after each call to\n     * [_setCurrentParameter()]{@link #_setCurrentParameter}.\n     *\n     * @private\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n     * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n     * operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */\n\n\n    _deselectRegisteredParameter(options = {}) {\n      this.sendControlChange(0x65, 0x7F, options);\n      this.sendControlChange(0x64, 0x7F, options);\n      return this;\n    }\n    /**\n     * Deselects the currently active MIDI non-registered parameter so it is no longer affected by\n     * data entry, data increment and data decrement messages.\n     *\n     * @private\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n     * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n     * operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */\n\n\n    _deselectNonRegisteredParameter(options = {}) {\n      this.sendControlChange(0x65, 0x7F, options);\n      this.sendControlChange(0x64, 0x7F, options);\n      return this;\n    }\n    /**\n     * Selects a MIDI registered parameter so it is affected by upcoming data entry, data increment\n     * and data decrement messages.\n     *\n     * @private\n     *\n     * @param parameter {number[]} A two-position array of integers specifying the two control bytes\n     * (0x65, 0x64) that identify the registered parameter. The integers must be between 0 and 127.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n     * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n     * operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */\n\n\n    _selectRegisteredParameter(parameter, options = {}) {\n      this.sendControlChange(0x65, parameter[0], options);\n      this.sendControlChange(0x64, parameter[1], options);\n      return this;\n    }\n    /**\n     * Sets the value of the currently selected MIDI registered parameter.\n     *\n     * @private\n     *\n     * @param data {number|number[]}\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n     * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n     * operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */\n\n\n    _setCurrentParameter(data, options = {}) {\n      data = [].concat(data); // MSB\n      // data[0] = parseInt(data[0]);\n      // if (!isNaN(data[0]) && data[0] >= 0 && data[0] <= 127) {\n\n      this.sendControlChange(0x06, data[0], options); // } else {\n      //   throw new RangeError(\"The msb value must be between 0 and 127.\");\n      // }\n\n      if (data.length < 2) return this; // LSB\n      // data[1] = parseInt(data[1]);\n      // if (!isNaN(data[1]) && data[1] >= 0 && data[1] <= 127) {\n\n      this.sendControlChange(0x26, data[1], options); // } else {\n      //   throw new RangeError(\"The lsb value must be between 0 and 127.\");\n      // }\n\n      return this;\n    }\n    /**\n     * Decrements the specified MIDI registered parameter by 1. Here is the full list of parameter\n     * names that can be used with this function:\n     *\n     *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n     *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n     *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n     *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n     *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n     *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n     *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n     *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n     *  * Gain (0x3D, 0x02): `\"gain\"`\n     *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n     *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n     *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n     *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n     *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n     *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n     *\n     * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n     * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n     * parameter.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws TypeError The specified registered parameter is invalid.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */\n\n\n    sendRpnDecrement(parameter, options = {}) {\n      if (!Array.isArray(parameter)) parameter = Enumerations.REGISTERED_PARAMETERS[parameter];\n\n      if (wm.validation) {\n        if (parameter === undefined) {\n          throw new TypeError(\"The specified registered parameter is invalid.\");\n        }\n\n        let valid = false;\n        Object.getOwnPropertyNames(Enumerations.REGISTERED_PARAMETERS).forEach(p => {\n          if (Enumerations.REGISTERED_PARAMETERS[p][0] === parameter[0] && Enumerations.REGISTERED_PARAMETERS[p][1] === parameter[1]) {\n            valid = true;\n          }\n        });\n        if (!valid) throw new TypeError(\"The specified registered parameter is invalid.\");\n      }\n\n      this._selectRegisteredParameter(parameter, options);\n\n      this.sendControlChange(0x61, 0, options);\n\n      this._deselectRegisteredParameter(options);\n\n      return this;\n    }\n    /**\n     * Increments the specified MIDI registered parameter by 1. Here is the full list of parameter\n     * names that can be used with this function:\n     *\n     *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n     *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n     *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n     *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n     *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n     *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n     *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n     *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n     *  * Gain (0x3D, 0x02): `\"gain\"`\n     *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n     *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n     *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n     *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n     *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n     *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n     *\n     * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n     * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n     * parameter.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws TypeError The specified registered parameter is invalid.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */\n\n\n    sendRpnIncrement(parameter, options = {}) {\n      if (!Array.isArray(parameter)) parameter = Enumerations.REGISTERED_PARAMETERS[parameter];\n\n      if (wm.validation) {\n        if (parameter === undefined) {\n          throw new TypeError(\"The specified registered parameter is invalid.\");\n        }\n\n        let valid = false;\n        Object.getOwnPropertyNames(Enumerations.REGISTERED_PARAMETERS).forEach(p => {\n          if (Enumerations.REGISTERED_PARAMETERS[p][0] === parameter[0] && Enumerations.REGISTERED_PARAMETERS[p][1] === parameter[1]) {\n            valid = true;\n          }\n        });\n        if (!valid) throw new TypeError(\"The specified registered parameter is invalid.\");\n      }\n\n      this._selectRegisteredParameter(parameter, options);\n\n      this.sendControlChange(0x60, 0, options);\n\n      this._deselectRegisteredParameter(options);\n\n      return this;\n    }\n    /**\n     * Plays a note or an array of notes on the channel. The first parameter is the note to play. It\n     * can be a single value or an array of the following valid values:\n     *\n     *  - A [`Note`]{@link Note} object\n     *  - A MIDI note number (integer between `0` and `127`)\n     *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n     *\n     * The `playNote()` method sends a **note on** MIDI message for all specified notes. If a\n     * `duration` is set in the `options` parameter or in the [`Note`]{@link Note} object's\n     * [`duration`]{@link Note#duration} property, it will also schedule a **note off** message\n     * to end the note after said duration. If no `duration` is set, the note will simply play until\n     * a matching **note off** message is sent with [`stopNote()`]{@link OutputChannel#stopNote} or\n     * [`sendNoteOff()`]{@link OutputChannel#sendNoteOff}.\n     *\n     *  The execution of the **note on** command can be delayed by using the `time` property of the\n     * `options` parameter.\n     *\n     * When using [`Note`]{@link Note} objects, the durations and velocities defined in the\n     * [`Note`]{@link Note} objects have precedence over the ones specified via the method's `options`\n     * parameter.\n     *\n     * **Note**: per the MIDI standard, a **note on** message with an attack velocity of `0` is\n     * functionally equivalent to a **note off** message.\n     *\n     * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n     * specified by using a MIDI note number (`0` - `127`), a note identifier (e.g. `C3`, `G#4`,\n     * `F-1`, `Db7`), a [`Note`]{@link Note} object or an array of the previous types. When using a\n     * note identifier, the octave range must be between `-1` and `9`. The lowest note is `C-1` (MIDI\n     * note number `0`) and the highest note is `G9` (MIDI note number `127`).\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number} [options.duration] A positive decimal number larger than `0` representing the\n     * number of milliseconds to wait before sending a **note off** message. If invalid or left\n     * undefined, only a **note on** message will be sent.\n     *\n     * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n     * `1`). If the `rawAttack` option is also defined, it will have priority. An invalid velocity\n     * value will silently trigger the default of `0.5`.\n     *\n     * @param {number} [options.rawAttack=64] The attack velocity at which to play the note (between\n     * `0` and `127`). This has priority over the `attack` property. An invalid velocity value will\n     * silently trigger the default of 64.\n     *\n     * @param {number} [options.release=0.5] The velocity at which to release the note (between `0`\n     * and `1`). If the `rawRelease` option is also defined, it will have priority. An invalid\n     * velocity value will silently trigger the default of `0.5`. This is only used with the\n     * **note off** event triggered when `options.duration` is set.\n     *\n     * @param {number} [options.rawRelease=64] The velocity at which to release the note (between `0`\n     * and `127`). This has priority over the `release` property. An invalid velocity value will\n     * silently trigger the default of 64. This is only used with the **note off** event triggered\n     * when `options.duration` is set.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */\n\n\n    playNote(note, options = {}) {\n      // Send note on and, optionally, note off message (if duration is a positive number)\n      this.sendNoteOn(note, options);\n      const notes = Array.isArray(note) ? note : [note];\n\n      for (let note of notes) {\n        if (parseInt(note.duration) > 0) {\n          const noteOffOptions = {\n            time: (Utilities.toTimestamp(options.time) || wm.time) + parseInt(note.duration),\n            release: note.release,\n            rawRelease: note.rawRelease\n          };\n          this.sendNoteOff(note, noteOffOptions);\n        } else if (parseInt(options.duration) > 0) {\n          const noteOffOptions = {\n            time: (Utilities.toTimestamp(options.time) || wm.time) + parseInt(options.duration),\n            release: options.release,\n            rawRelease: options.rawRelease\n          };\n          this.sendNoteOff(note, noteOffOptions);\n        }\n      }\n\n      return this;\n    }\n    /**\n     * Sends a **note off** message for the specified notes on the channel. The first parameter is the\n     * note. It can be a single value or an array of the following valid values:\n     *\n     *  - A MIDI note number (integer between `0` and `127`)\n     *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n     *  - A [`Note`]{@link Note} object\n     *\n     * The execution of the **note off** command can be delayed by using the `time` property of the\n     * `options` parameter.\n     *\n     * When using [`Note`]{@link Note} objects, the release velocity defined in the\n     * [`Note`]{@link Note} objects has precedence over the one specified via the method's `options`\n     * parameter.\n     *\n     * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to stop. The notes can be\n     * specified by using a MIDI note number (0-127), a note identifier (e.g. C3, G#4, F-1, Db7), a\n     * [`Note`]{@link Note} object or an array of the previous types. When using a note name, octave\n     * range must be between -1 and 9. The lowest note is C-1 (MIDI note number 0) and the highest\n     * note is G9 (MIDI note number 127).\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @param {number} [options.release=0.5] The velocity at which to release the note\n     * (between `0` and `1`).  If the `rawRelease` option is also defined, `rawRelease` will have\n     * priority. An invalid velocity value will silently trigger the default of `0.5`.\n     *\n     * @param {number} [options.rawRelease=64] The velocity at which to release the note\n     * (between `0` and `127`). If the `release` option is also defined, `rawRelease` will have\n     * priority. An invalid velocity value will silently trigger the default of `64`.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */\n\n\n    sendNoteOff(note, options = {}) {\n      if (wm.validation) {\n        if (options.rawRelease != undefined && !(options.rawRelease >= 0 && options.rawRelease <= 127)) {\n          throw new RangeError(\"The 'rawRelease' option must be an integer between 0 and 127\");\n        }\n\n        if (options.release != undefined && !(options.release >= 0 && options.release <= 1)) {\n          throw new RangeError(\"The 'release' option must be an number between 0 and 1\");\n        } // Legacy compatibility warnings\n\n\n        if (options.rawVelocity) {\n          options.rawRelease = options.velocity;\n          console.warn(\"The 'rawVelocity' option is deprecated. Use 'rawRelease' instead.\");\n        }\n\n        if (options.velocity) {\n          options.release = options.velocity;\n          console.warn(\"The 'velocity' option is deprecated. Use 'attack' instead.\");\n        }\n      }\n\n      let nVelocity = 64;\n\n      if (options.rawRelease != undefined) {\n        nVelocity = options.rawRelease;\n      } else {\n        if (!isNaN(options.release)) nVelocity = Math.round(options.release * 127);\n      } // Plot total octave offset\n\n\n      const offset = wm.octaveOffset + this.output.octaveOffset + this.octaveOffset;\n      Utilities.buildNoteArray(note, {\n        rawRelease: parseInt(nVelocity)\n      }).forEach(n => {\n        this.send([(Enumerations.CHANNEL_MESSAGES.noteoff << 4) + (this.number - 1), n.getOffsetNumber(offset), n.rawRelease], {\n          time: Utilities.toTimestamp(options.time)\n        });\n      });\n      return this;\n    }\n    /**\n     * Sends a **note off** message for the specified MIDI note number. The first parameter is the\n     * note to stop. It can be a single value or an array of the following valid values:\n     *\n     *  - A MIDI note number (integer between `0` and `127`)\n     *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n     *  - A [`Note`](Note) object\n     *\n     * The execution of the **note off** command can be delayed by using the `time` property of the\n     * `options` parameter.\n     *\n     * @param note {number|Note|string|number[]|Note[]|string[]} The note(s) to stop. The notes can be\n     * specified by using a MIDI note number (`0` - `127`), a note identifier (e.g. `C3`, `G#4`, `F-1`,\n     * `Db7`) or an array of the previous types. When using a note identifier, octave range must be\n     * between `-1` and `9`. The lowest note is `C-1` (MIDI note number `0`) and the highest note is\n     * `G9` (MIDI note number `127`).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number} [options.release=0.5] The velocity at which to release the note\n     * (between `0` and `1`).  If the `rawRelease` option is also defined, `rawRelease` will have\n     * priority. An invalid velocity value will silently trigger the default of `0.5`.\n     *\n     * @param {number} [options.rawRelease=64] The velocity at which to release the note\n     * (between `0` and `127`). If the `release` option is also defined, `rawRelease` will have\n     * priority. An invalid velocity value will silently trigger the default of `64`.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */\n\n\n    stopNote(note, options = {}) {\n      return this.sendNoteOff(note, options);\n    }\n    /**\n     * Sends a **note on** message for the specified note(s) on the channel. The first parameter is\n     * the note. It can be a single value or an array of the following valid values:\n     *\n     *  - A [`Note`]{@link Note} object\n     *  - A MIDI note number (integer between `0` and `127`)\n     *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n     *\n     *  When passing a [`Note`]{@link Note}object or a note name, the `octaveOffset` will be applied.\n     *  This is not the case when using a note number. In this case, we assume you know exactly which\n     *  MIDI note number should be sent out.\n     *\n     * The execution of the **note on** command can be delayed by using the `time` property of the\n     * `options` parameter.\n     *\n     * When using [`Note`]{@link Note} objects, the attack velocity defined in the\n     * [`Note`]{@link Note} objects has precedence over the one specified via the method's `options`\n     * parameter. Also, the `duration` is ignored. If you want to also send a **note off** message,\n     * use the [`playNote()`]{@link #playNote} method instead.\n     *\n     * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n     * functionally equivalent to a **note off** message.\n     *\n     * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n     * specified by using a MIDI note number (0-127), a note identifier (e.g. C3, G#4, F-1, Db7), a\n     * [`Note`]{@link Note} object or an array of the previous types.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n     * `1`).  If the `rawAttack` option is also defined, `rawAttack` will have priority. An invalid\n     * velocity value will silently trigger the default of `0.5`.\n     *\n     * @param {number} [options.rawAttack=64] The velocity at which to release the note (between `0`\n     * and `127`). If the `attack` option is also defined, `rawAttack` will have priority. An invalid\n     * velocity value will silently trigger the default of `64`.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */\n\n\n    sendNoteOn(note, options = {}) {\n      if (wm.validation) {\n        if (options.rawAttack != undefined && !(options.rawAttack >= 0 && options.rawAttack <= 127)) {\n          throw new RangeError(\"The 'rawAttack' option must be an integer between 0 and 127\");\n        }\n\n        if (options.attack != undefined && !(options.attack >= 0 && options.attack <= 1)) {\n          throw new RangeError(\"The 'attack' option must be an number between 0 and 1\");\n        } // Legacy compatibility warnings\n\n\n        if (options.rawVelocity) {\n          options.rawAttack = options.velocity;\n          options.rawRelease = options.release;\n          console.warn(\"The 'rawVelocity' option is deprecated. Use 'rawAttack' or 'rawRelease'.\");\n        }\n\n        if (options.velocity) {\n          options.attack = options.velocity;\n          console.warn(\"The 'velocity' option is deprecated. Use 'attack' instead.\");\n        }\n      }\n\n      let nVelocity = 64;\n\n      if (options.rawAttack != undefined) {\n        nVelocity = options.rawAttack;\n      } else {\n        if (!isNaN(options.attack)) nVelocity = Math.round(options.attack * 127);\n      } // Plot total octave offset\n\n\n      const offset = wm.octaveOffset + this.output.octaveOffset + this.octaveOffset;\n      Utilities.buildNoteArray(note, {\n        rawAttack: nVelocity\n      }).forEach(n => {\n        this.send([(Enumerations.CHANNEL_MESSAGES.noteon << 4) + (this.number - 1), n.getOffsetNumber(offset), n.rawAttack], {\n          time: Utilities.toTimestamp(options.time)\n        });\n      });\n      return this;\n    }\n    /**\n     * Sends a MIDI **channel mode** message. The channel mode message to send can be specified\n     * numerically or by using one of the following common names:\n     *\n     * |  Type                |Number| Shortcut Method                                               |\n     * | ---------------------|------|-------------------------------------------------------------- |\n     * | `allsoundoff`        | 120  | [`sendAllSoundOff()`]{@link #sendAllSoundOff}                 |\n     * | `resetallcontrollers`| 121  | [`sendResetAllControllers()`]{@link #sendResetAllControllers} |\n     * | `localcontrol`       | 122  | [`sendLocalControl()`]{@link #sendLocalControl}               |\n     * | `allnotesoff`        | 123  | [`sendAllNotesOff()`]{@link #sendAllNotesOff}                 |\n     * | `omnimodeoff`        | 124  | [`sendOmniMode(false)`]{@link #sendOmniMode}                  |\n     * | `omnimodeon`         | 125  | [`sendOmniMode(true)`]{@link #sendOmniMode}                   |\n     * | `monomodeon`         | 126  | [`sendPolyphonicMode(\"mono\")`]{@link #sendPolyphonicMode}     |\n     * | `polymodeon`         | 127  | [`sendPolyphonicMode(\"poly\")`]{@link #sendPolyphonicMode}     |\n     *\n     * **Note**: as you can see above, to make it easier, all channel mode messages also have a matching\n     * helper method.\n     *\n     * It should be noted that, per the MIDI specification, only `localcontrol` and `monomodeon` may\n     * require a value that's not zero. For that reason, the `value` parameter is optional and\n     * defaults to 0.\n     *\n     * @param {number|string} command The numerical identifier of the channel mode message (integer\n     * between `120` and `127`) or its name as a string.\n     *\n     * @param {number} [value=0] The value to send (integer between `0` - `127`).\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */\n\n\n    sendChannelMode(command, value = 0, options = {}) {\n      // Normalize command to integer\n      if (typeof command === \"string\") command = Enumerations.CHANNEL_MODE_MESSAGES[command];\n\n      if (wm.validation) {\n        if (command === undefined) {\n          throw new TypeError(\"Invalid channel mode message name or number.\");\n        }\n\n        if (isNaN(command) || !(command >= 120 && command <= 127)) {\n          throw new TypeError(\"Invalid channel mode message number.\");\n        }\n\n        if (isNaN(parseInt(value)) || value < 0 || value > 127) {\n          throw new RangeError(\"Value must be an integer between 0 and 127.\");\n        }\n      }\n\n      this.send([(Enumerations.CHANNEL_MESSAGES.controlchange << 4) + (this.number - 1), command, value], {\n        time: Utilities.toTimestamp(options.time)\n      });\n      return this;\n    }\n    /**\n     * Sets OMNI mode to `\"on\"` or `\"off\"`. MIDI's OMNI mode causes the instrument to respond to\n     * messages from all channels.\n     *\n     * It should be noted that support for OMNI mode is not as common as it used to be.\n     *\n     * @param [state=true] {boolean} Whether to activate OMNI mode (`true`) or not (`false`).\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {TypeError} Invalid channel mode message name.\n     * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n     * @throws {RangeError} Value must be an integer between 0 and 127.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */\n\n\n    sendOmniMode(state, options = {}) {\n      if (state === undefined || state) {\n        this.sendChannelMode(\"omnimodeon\", 0, options);\n      } else {\n        this.sendChannelMode(\"omnimodeoff\", 0, options);\n      }\n\n      return this;\n    }\n    /**\n     * Sends a MIDI **channel aftertouch** message. For key-specific aftertouch, you should instead\n     * use [`sendKeyAftertouch()`]{@link #sendKeyAftertouch}.\n     *\n     * @param [pressure] {number} The pressure level (between `0` and `1`). If the `rawValue` option\n     * is set to `true`, the pressure can be defined by using an integer between `0` and `127`.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n     * considered a float between `0` and `1.0` (default) or a raw integer between `0` and `127`.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     *\n     * @throws RangeError Invalid channel aftertouch value.\n     */\n\n\n    sendChannelAftertouch(pressure, options = {}) {\n      if (wm.validation) {\n        if (isNaN(parseFloat(pressure))) {\n          throw new RangeError(\"Invalid channel aftertouch value.\");\n        }\n\n        if (options.rawValue) {\n          if (!(pressure >= 0 && pressure <= 127 && Number.isInteger(pressure))) {\n            throw new RangeError(\"Channel aftertouch raw value must be an integer between 0 and 127.\");\n          }\n        } else {\n          if (!(pressure >= 0 && pressure <= 1)) {\n            throw new RangeError(\"Channel aftertouch value must be a float between 0 and 1.\");\n          }\n        }\n      }\n\n      this.send([(Enumerations.CHANNEL_MESSAGES.channelaftertouch << 4) + (this.number - 1), Math.round(pressure * 127)], {\n        time: Utilities.toTimestamp(options.time)\n      });\n      return this;\n    }\n    /**\n     * Sends a **master tuning** message. The value is decimal and must be larger than -65 semitones\n     * and smaller than 64 semitones.\n     *\n     * Because of the way the MIDI specification works, the decimal portion of the value will be\n     * encoded with a resolution of 14bit. The integer portion must be between -64 and 63\n     * inclusively. This function actually generates two MIDI messages: a **Master Coarse Tuning** and\n     * a **Master Fine Tuning** RPN messages.\n     *\n     * @param [value=0.0] {number} The desired decimal adjustment value in semitones (-65 < x < 64)\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {RangeError} The value must be a decimal number between larger than -65 and smaller\n     * than 64.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */\n\n\n    sendMasterTuning(value, options = {}) {\n      // @todo allow passing value as msb/lsb pair (the same as pitch bend range)\n      value = parseFloat(value) || 0.0;\n\n      if (wm.validation) {\n        if (!(value > -65 && value < 64)) {\n          throw new RangeError(\"The value must be a decimal number larger than -65 and smaller than 64.\");\n        }\n      }\n\n      let coarse = Math.floor(value) + 64;\n      let fine = value - Math.floor(value); // Calculate MSB and LSB for fine adjustment (14bit resolution)\n\n      fine = Math.round((fine + 1) / 2 * 16383);\n      let msb = fine >> 7 & 0x7F;\n      let lsb = fine & 0x7F;\n      this.sendRpnValue(\"channelcoarsetuning\", coarse, options);\n      this.sendRpnValue(\"channelfinetuning\", [msb, lsb], options);\n      return this;\n    }\n    /**\n     * Sends a **modulation depth range** message to adjust the depth of the modulation wheel's range.\n     * The range can be specified with the `semitones` parameter, the `cents` parameter or by\n     * specifying both parameters at the same time.\n     *\n     * @param {number} semitones The desired adjustment value in semitones (integer between 0 and\n     * 127).\n     *\n     * @param {number} [cents=0] The desired adjustment value in cents (integer between 0 and 127).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */\n\n\n    sendModulationRange(semitones, cents, options = {}) {\n      // @todo allow passing value as msb/lsb pair (the same as pitch bend range)\n      // when passing a single argument, semitones and cents shoud be combined\n      if (wm.validation) {\n        if (!Number.isInteger(semitones) || !(semitones >= 0 && semitones <= 127)) {\n          throw new RangeError(\"The semitones value must be an integer between 0 and 127.\");\n        }\n\n        if (!(cents == undefined) && (!Number.isInteger(cents) || !(cents >= 0 && cents <= 127))) {\n          throw new RangeError(\"If specified, the cents value must be an integer between 0 and 127.\");\n        }\n      } // Default value for cents\n\n\n      if (!(cents >= 0 && cents <= 127)) cents = 0;\n      this.sendRpnValue(\"modulationrange\", [semitones, cents], options);\n      return this;\n    }\n    /**\n     * Sets a non-registered parameter (NRPN) to the specified value. The NRPN is selected by passing\n     * in a two-position array specifying the values of the two control bytes. The value is specified\n     * by passing in a single integer (most cases) or an array of two integers.\n     *\n     * NRPNs are not standardized in any way. Each manufacturer is free to implement them any way\n     * they see fit. For example, according to the Roland GS specification, you can control the\n     * **vibrato rate** using NRPN (1, 8). Therefore, to set the **vibrato rate** value to **123** you\n     * would use:\n     *\n     * ```js\n     * WebMidi.outputs[0].channels[0].sendNrpnValue([1, 8], 123);\n     * ```\n     *\n     * In some rarer cases, you need to send two values with your NRPN messages. In such cases, you\n     * would use a 2-position array. For example, for its **ClockBPM** parameter (2, 63), Novation\n     * uses a 14-bit value that combines an MSB and an LSB (7-bit values). So, for example, if the\n     * value to send was 10, you could use:\n     *\n     * ```js\n     * WebMidi.outputs[0].channels[0].sendNrpnValue([2, 63], [0, 10]);\n     * ```\n     *\n     * For further implementation details, refer to the manufacturer's documentation.\n     *\n     * @param nrpn {number[]} A two-position array specifying the two control bytes (0x63,\n     * 0x62) that identify the non-registered parameter.\n     *\n     * @param [data=[]] {number|number[]} An integer or an array of integers with a length of 1 or 2\n     * specifying the desired data.\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {RangeError} The control value must be between 0 and 127.\n     * @throws {RangeError} The msb value must be between 0 and 127\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */\n\n\n    sendNrpnValue(nrpn, data, options = {}) {\n      data = [].concat(data);\n\n      if (wm.validation) {\n        if (!Array.isArray(nrpn) || !Number.isInteger(nrpn[0]) || !Number.isInteger(nrpn[1])) {\n          throw new TypeError(\"The specified NRPN is invalid.\");\n        }\n\n        if (!(nrpn[0] >= 0 && nrpn[0] <= 127)) {\n          throw new RangeError(\"The first byte of the NRPN must be between 0 and 127.\");\n        }\n\n        if (!(nrpn[1] >= 0 && nrpn[1] <= 127)) {\n          throw new RangeError(\"The second byte of the NRPN must be between 0 and 127.\");\n        }\n\n        data.forEach(value => {\n          if (!(value >= 0 && value <= 127)) {\n            throw new RangeError(\"The data bytes of the NRPN must be between 0 and 127.\");\n          }\n        });\n      }\n\n      this._selectNonRegisteredParameter(nrpn, options);\n\n      this._setCurrentParameter(data, options);\n\n      this._deselectNonRegisteredParameter(options);\n\n      return this;\n    }\n    /**\n     * Sends a MIDI **pitch bend** message at the scheduled time. The resulting bend is relative to\n     * the pitch bend range that has been defined. The range can be set with\n     * [`sendPitchBendRange()`]{@link #sendPitchBendRange}. So, for example, if the pitch\n     * bend range has been set to 12 semitones, using a bend value of -1 will bend the note 1 octave\n     * below its nominal value.\n     *\n     * @param {number|number[]} [value] The intensity of the bend (between -1.0 and 1.0). A value of\n     * zero means no bend. If the `rawValue` option is set to `true`, the intensity of the bend can be\n     * defined by either using a single integer between 0 and 127 (MSB) or an array of two integers\n     * between 0 and 127 representing, respectively, the MSB (most significant byte) and the LSB\n     * (least significant byte). The MSB is expressed in semitones with `64` meaning no bend. A value\n     * lower than `64` bends downwards while a value higher than `64` bends upwards. The LSB is\n     * expressed in cents (1/100 of a semitone). An LSB of `64` also means no bend.\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n     * considered as a float between -1.0 and 1.0 (default) or as raw integer between 0 and 127 (or\n     * an array of 2 integers if using both MSB and LSB).\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */\n\n\n    sendPitchBend(value, options = {}) {\n      // @todo standardize the way msb/lsb are passed in\n      if (wm.validation) {\n        if (options.rawValue && Array.isArray(value)) {\n          if (!(value[0] >= 0 && value[0] <= 127)) {\n            throw new RangeError(\"The pitch bend MSB must be an integer between 0 and 127.\");\n          }\n\n          if (!(value[1] >= 0 && value[1] <= 127)) {\n            throw new RangeError(\"The pitch bend LSB must be an integer between 0 and 127.\");\n          }\n        } else if (options.rawValue && !Array.isArray(value)) {\n          if (!(value >= 0 && value <= 127)) {\n            throw new RangeError(\"The pitch bend MSB must be an integer between 0 and 127.\");\n          }\n        } else {\n          if (isNaN(value) || value === null) {\n            throw new RangeError(\"Invalid pitch bend value.\");\n          }\n\n          if (!(value >= -1 && value <= 1)) {\n            throw new RangeError(\"The pitch bend value must be a float between -1 and 1.\");\n          }\n        }\n      }\n\n      let msb = 0;\n      let lsb = 0; // Calculate MSB and LSB for both scenarios\n\n      if (options.rawValue && Array.isArray(value)) {\n        msb = value[0];\n        lsb = value[1];\n      } else if (options.rawValue && !Array.isArray(value)) {\n        msb = value;\n      } else {\n        const result = Utilities.fromFloatToMsbLsb((value + 1) / 2); // b/c value is -1 to 1\n\n        msb = result.msb;\n        lsb = result.lsb;\n      }\n\n      this.send([(Enumerations.CHANNEL_MESSAGES.pitchbend << 4) + (this.number - 1), lsb, msb], {\n        time: Utilities.toTimestamp(options.time)\n      });\n      return this;\n    }\n    /**\n     * Sends a **pitch bend range** message at the scheduled time to adjust the range used by the\n     * pitch bend lever. The range is specified by using the `semitones` and `cents` parameters. For\n     * example, setting the `semitones` parameter to `12` means that the pitch bend range will be 12\n     * semitones above and below the nominal pitch.\n     *\n     * @param semitones {number} The desired adjustment value in semitones (between 0 and 127). While\n     * nothing imposes that in the specification, it is very common for manufacturers to limit the\n     * range to 2 octaves (-12 semitones to 12 semitones).\n     *\n     * @param [cents=0] {number} The desired adjustment value in cents (integer between 0-127).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {RangeError} The semitones value must be an integer between 0 and 127.\n     * @throws {RangeError} The cents value must be an integer between 0 and 127.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */\n\n\n    sendPitchBendRange(semitones, cents, options = {}) {\n      // @todo use single value as parameter or pair of msb/lsb\n      if (wm.validation) {\n        if (!Number.isInteger(semitones) || !(semitones >= 0 && semitones <= 127)) {\n          throw new RangeError(\"The semitones value must be an integer between 0 and 127.\");\n        }\n\n        if (!Number.isInteger(cents) || !(cents >= 0 && cents <= 127)) {\n          throw new RangeError(\"The cents value must be an integer between 0 and 127.\");\n        }\n      }\n\n      this.sendRpnValue(\"pitchbendrange\", [semitones, cents], options);\n      return this;\n    }\n    /**\n     * Sends a MIDI **program change** message at the scheduled time.\n     *\n     * @param [program=1] {number} The MIDI patch (program) number (integer between `0` and `127`).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index 1 is greater\n     * than 0xFF.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     *\n     */\n\n\n    sendProgramChange(program, options = {}) {\n      program = parseInt(program) || 0;\n\n      if (wm.validation) {\n        if (!(program >= 0 && program <= 127)) {\n          throw new RangeError(\"The program number must be between 0 and 127.\");\n        }\n      }\n\n      this.send([(Enumerations.CHANNEL_MESSAGES.programchange << 4) + (this.number - 1), program], {\n        time: Utilities.toTimestamp(options.time)\n      });\n      return this;\n    }\n    /**\n     * Sets the specified MIDI registered parameter to the desired value. The value is defined with\n     * up to two bytes of data (msb, lsb) that each can go from 0 to 127.\n     *\n     * MIDI\n     * [registered parameters](https://www.midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2)\n     * extend the original list of control change messages. The MIDI 1.0 specification lists only a\n     * limited number of them:\n     *\n     * | Numbers      | Function                 |\n     * |--------------|--------------------------|\n     * | (0x00, 0x00) | `pitchbendrange`         |\n     * | (0x00, 0x01) | `channelfinetuning`      |\n     * | (0x00, 0x02) | `channelcoarsetuning`    |\n     * | (0x00, 0x03) | `tuningprogram`          |\n     * | (0x00, 0x04) | `tuningbank`             |\n     * | (0x00, 0x05) | `modulationrange`        |\n     * | (0x3D, 0x00) | `azimuthangle`           |\n     * | (0x3D, 0x01) | `elevationangle`         |\n     * | (0x3D, 0x02) | `gain`                   |\n     * | (0x3D, 0x03) | `distanceratio`          |\n     * | (0x3D, 0x04) | `maximumdistance`        |\n     * | (0x3D, 0x05) | `maximumdistancegain`    |\n     * | (0x3D, 0x06) | `referencedistanceratio` |\n     * | (0x3D, 0x07) | `panspreadangle`         |\n     * | (0x3D, 0x08) | `rollangle`              |\n     *\n     * Note that the **Tuning Program** and **Tuning Bank** parameters are part of the *MIDI Tuning\n     * Standard*, which is not widely implemented.\n     *\n     * @param rpn {string|number[]} A string identifying the parameter's name (see above) or a\n     * two-position array specifying the two control bytes (e.g. `[0x65, 0x64]`) that identify the\n     * registered parameter.\n     *\n     * @param [data=[]] {number|number[]} An single integer or an array of integers with a maximum\n     * length of 2 specifying the desired data.\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */\n\n\n    sendRpnValue(rpn, data, options = {}) {\n      if (!Array.isArray(rpn)) rpn = Enumerations.REGISTERED_PARAMETERS[rpn];\n\n      if (wm.validation) {\n        if (!Number.isInteger(rpn[0]) || !Number.isInteger(rpn[1])) {\n          throw new TypeError(\"The specified NRPN is invalid.\");\n        }\n\n        if (!(rpn[0] >= 0 && rpn[0] <= 127)) {\n          throw new RangeError(\"The first byte of the RPN must be between 0 and 127.\");\n        }\n\n        if (!(rpn[1] >= 0 && rpn[1] <= 127)) {\n          throw new RangeError(\"The second byte of the RPN must be between 0 and 127.\");\n        }\n\n        [].concat(data).forEach(value => {\n          if (!(value >= 0 && value <= 127)) {\n            throw new RangeError(\"The data bytes of the RPN must be between 0 and 127.\");\n          }\n        });\n      }\n\n      this._selectRegisteredParameter(rpn, options);\n\n      this._setCurrentParameter(data, options);\n\n      this._deselectRegisteredParameter(options);\n\n      return this;\n    }\n    /**\n     * Sets the MIDI tuning bank to use. Note that the **Tuning Bank** parameter is part of the\n     * *MIDI Tuning Standard*, which is not widely implemented.\n     *\n     * @param value {number} The desired tuning bank (integer between `0` and `127`).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {RangeError} The bank value must be between 0 and 127.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */\n\n\n    sendTuningBank(value, options = {}) {\n      if (wm.validation) {\n        if (!Number.isInteger(value) || !(value >= 0 && value <= 127)) {\n          throw new RangeError(\"The tuning bank number must be between 0 and 127.\");\n        }\n      }\n\n      this.sendRpnValue(\"tuningbank\", value, options);\n      return this;\n    }\n    /**\n     * Sets the MIDI tuning program to use. Note that the **Tuning Program** parameter is part of the\n     * *MIDI Tuning Standard*, which is not widely implemented.\n     *\n     * @param value {number} The desired tuning program (integer between `0` and `127`).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {RangeError} The program value must be between 0 and 127.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */\n\n\n    sendTuningProgram(value, options = {}) {\n      if (wm.validation) {\n        if (!Number.isInteger(value) || !(value >= 0 && value <= 127)) {\n          throw new RangeError(\"The tuning program number must be between 0 and 127.\");\n        }\n      }\n\n      this.sendRpnValue(\"tuningprogram\", value, options);\n      return this;\n    }\n    /**\n     * Turns local control on or off. Local control is usually enabled by default. If you disable it,\n     * the instrument will no longer trigger its own sounds. It will only send the MIDI messages to\n     * its out port.\n     *\n     * @param [state=false] {boolean} Whether to activate local control (`true`) or disable it\n     * (`false`).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */\n\n\n    sendLocalControl(state, options = {}) {\n      if (state) {\n        return this.sendChannelMode(\"localcontrol\", 127, options);\n      } else {\n        return this.sendChannelMode(\"localcontrol\", 0, options);\n      }\n    }\n    /**\n     * Sends an **all notes off** channel mode message. This will make all currently playing notes\n     * fade out just as if their key had been released. This is different from the\n     * [`sendAllSoundOff()`]{@link #sendAllSoundOff} method which mutes all sounds immediately.\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */\n\n\n    sendAllNotesOff(options = {}) {\n      return this.sendChannelMode(\"allnotesoff\", 0, options);\n    }\n    /**\n     * Sends an **all sound off** channel mode message. This will silence all sounds playing on that\n     * channel but will not prevent new sounds from being triggered.\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */\n\n\n    sendAllSoundOff(options = {}) {\n      return this.sendChannelMode(\"allsoundoff\", 0, options);\n    }\n    /**\n     * Sends a **reset all controllers** channel mode message. This resets all controllers, such as\n     * the pitch bend, to their default value.\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */\n\n\n    sendResetAllControllers(options = {}) {\n      return this.sendChannelMode(\"resetallcontrollers\", 0, options);\n    }\n    /**\n     * Sets the polyphonic mode. In `\"poly\"` mode (usually the default), multiple notes can be played\n     * and heard at the same time. In `\"mono\"` mode, only one note will be heard at once even if\n     * multiple notes are being played.\n     *\n     * @param {string} [mode=poly] The mode to use: `\"mono\"` or `\"poly\"`.\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n     */\n\n\n    sendPolyphonicMode(mode, options = {}) {\n      if (mode === \"mono\") {\n        return this.sendChannelMode(\"monomodeon\", 0, options);\n      } else {\n        return this.sendChannelMode(\"polymodeon\", 0, options);\n      }\n    }\n    /**\n     * An integer to offset the reported octave of outgoing note-specific messages (`noteon`,\n     * `noteoff` and `keyaftertouch`). By default, middle C (MIDI note number 60) is placed on the 4th\n     * octave (C4).\n     *\n     * Note that this value is combined with the global offset value defined in\n     * [`WebMidi.octaveOffset`](WebMidi#octaveOffset) and with the parent value defined in\n     * [`Output.octaveOffset`]{@link Output#octaveOffset}.\n     *\n     * @type {number}\n     *\n     * @since 3.0\n     */\n\n\n    get octaveOffset() {\n      return this._octaveOffset;\n    }\n\n    set octaveOffset(value) {\n      if (this.validation) {\n        value = parseInt(value);\n        if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n      }\n\n      this._octaveOffset = value;\n    }\n    /**\n     * The parent [`Output`]{@link Output} this channel belongs to.\n     * @type {Output}\n     * @since 3.0\n     */\n\n\n    get output() {\n      return this._output;\n    }\n    /**\n     * This channel's MIDI number (`1` - `16`).\n     * @type {number}\n     * @since 3.0\n     */\n\n\n    get number() {\n      return this._number;\n    }\n\n  }\n\n  /**\n   * The `Output` class represents a single MIDI output port (not to be confused with a MIDI channel).\n   * A port is made available by a MIDI device. A MIDI device can advertise several input and output\n   * ports. Each port has 16 MIDI channels which can be accessed via the [`channels`](#channels)\n   * property.\n   *\n   * The `Output` object is automatically instantiated by the library according to the host's MIDI\n   * subsystem and should not be directly instantiated.\n   *\n   * You can access all available `Output` objects by referring to the\n   * [`WebMidi.outputs`](WebMidi#outputs) array or by using methods such as\n   * [`WebMidi.getOutputByName()`](WebMidi#getOutputByName) or\n   * [`WebMidi.getOutputById()`](WebMidi#getOutputById).\n   *\n   * @fires Output#opened\n   * @fires Output#disconnected\n   * @fires Output#closed\n   *\n   * @extends EventEmitter\n   * @license Apache-2.0\n   */\n\n  class Output extends EventEmitter {\n    /**\n     * Creates an `Output` object.\n     *\n     * @param {MIDIOutput} midiOutput [`MIDIOutput`](https://developer.mozilla.org/en-US/docs/Web/API/MIDIOutput)\n     * object as provided by the MIDI subsystem.\n     */\n    constructor(midiOutput) {\n      super();\n      /**\n       * A reference to the `MIDIOutput` object\n       * @type {MIDIOutput}\n       * @private\n       */\n\n      this._midiOutput = midiOutput;\n      /**\n       * @type {number}\n       * @private\n       */\n\n      this._octaveOffset = 0;\n      /**\n       * Array containing the 16 [`OutputChannel`]{@link OutputChannel} objects available provided by\n       * this `Output`. The channels are numbered 1 through 16.\n       *\n       * @type {OutputChannel[]}\n       */\n\n      this.channels = [];\n\n      for (let i = 1; i <= 16; i++) this.channels[i] = new OutputChannel(this, i);\n\n      this._midiOutput.onstatechange = this._onStateChange.bind(this);\n    }\n    /**\n     * Destroys the `Output`. All listeners are removed, all channels are destroyed and the MIDI\n     * subsystem is unlinked.\n     * @returns {Promise<void>}\n     */\n\n\n    async destroy() {\n      this.removeListener();\n      this.channels.forEach(ch => ch.destroy());\n      this.channels = [];\n      if (this._midiOutput) this._midiOutput.onstatechange = null;\n      await this.close();\n      this._midiOutput = null;\n    }\n    /**\n     * @private\n     */\n\n\n    _onStateChange(e) {\n      let event = {\n        timestamp: wm.time\n      };\n\n      if (e.port.connection === \"open\") {\n        /**\n         * Event emitted when the {@link Output} has been opened by calling the\n         * [open()]{@link Output#open} method.\n         *\n         * @event Output#opened\n         * @type {object}\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         * @property {string} type `\"opened\"`\n         * @property {Output} target The object to which the listener was originally added (`Output`).\n         * @property {Output} port The port that was opened\n         */\n        event.type = \"opened\";\n        event.target = this;\n        event.port = event.target; // for consistency\n\n        this.emit(\"opened\", event);\n      } else if (e.port.connection === \"closed\" && e.port.state === \"connected\") {\n        /**\n         * Event emitted when the {@link Output} has been closed by calling the\n         * [close()]{@link Output#close} method.\n         *\n         * @event Output#closed\n         * @type {object}\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         * @property {string} type `\"closed\"`\n         * @property {Output} target The object to which the listener was originally added (`Output`).\n         * @property {Output} port The port that was closed\n         */\n        event.type = \"closed\";\n        event.target = this;\n        event.port = event.target; // for consistency\n\n        this.emit(\"closed\", event);\n      } else if (e.port.connection === \"closed\" && e.port.state === \"disconnected\") {\n        /**\n         * Event emitted when the {@link Output} becomes unavailable. This event is typically fired\n         * when the MIDI device is unplugged.\n         *\n         * @event Output#disconnected\n         * @type {object}\n         * @property {number} timestamp The moment (DOMHighResTimeStamp0 when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         * @property {string} type `\"disconnected\"`\n         * @property {Output} target The object to which the listener was originally added (`Output`).\n         * @property {object} port Object with properties describing the {@link Output} that was\n         * disconnected. This is not the actual `Output` as it is no longer available.\n         */\n        event.type = \"disconnected\";\n        event.port = {\n          connection: e.port.connection,\n          id: e.port.id,\n          manufacturer: e.port.manufacturer,\n          name: e.port.name,\n          state: e.port.state,\n          type: e.port.type\n        };\n        this.emit(\"disconnected\", event);\n      } else if (e.port.connection === \"pending\" && e.port.state === \"disconnected\") ; else {\n        console.warn(\"This statechange event was not caught:\", e.port.connection, e.port.state);\n      }\n    }\n    /**\n     * Opens the output for usage. When the library is enabled, all ports are automatically opened.\n     * This method is only useful for ports that have been manually closed.\n     *\n     * @returns {Promise<Output>} The promise is fulfilled with the `Output` object.\n     */\n\n\n    async open() {\n      // Explicitly opens the port for usage. This is not mandatory. When the port is not explicitly\n      // opened, it is implicitly opened (asynchronously) when calling `send()` on the `MIDIOutput`.\n      // We do it explicitly so that 'connected' events are dispatched immediately and we are ready to\n      // send.\n      try {\n        await this._midiOutput.open();\n        return Promise.resolve(this);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    }\n    /**\n     * Closes the output connection. When an output is closed, it cannot be used to send MIDI messages\n     * until the output is opened again by calling [`open()`]{@link #open}. You can check\n     * the connection status by looking at the [`connection`]{@link #connection} property.\n     *\n     * @returns {Promise<void>}\n     */\n\n\n    async close() {\n      // We close the port. This triggers a 'statechange' event which we listen to to re-trigger the\n      // 'closed' event.\n      if (this._midiOutput) {\n        await this._midiOutput.close();\n      } else {\n        await Promise.resolve();\n      }\n    }\n    /**\n     * Sends a MIDI message on the MIDI output port. If no time is specified, the message will be\n     * sent immediately. The message should be an array of 8 bit unsigned integers (0-225), a\n     * [`Uint8Array`]{@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array}\n     * object or a [`Message`](Message) object.\n     *\n     * It is usually not necessary to use this method directly as you can use one of the simpler\n     * helper methods such as [`playNote()`](#playNote), [`stopNote()`](#stopNote),\n     * [`sendControlChange()`](#sendControlChange), etc.\n     *\n     * Details on the format of MIDI messages are available in the summary of\n     * [MIDI messages]{@link https://www.midi.org/specifications-old/item/table-1-summary-of-midi-message}\n     * from the MIDI Manufacturers Association.\n     *\n     * @param message {number[]|Uint8Array|Message} An array of 8bit unsigned integers, a `Uint8Array`\n     * object (not available in Node.js) containing the message bytes or a `Message` object.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {RangeError} The first byte (status) must be an integer between 128 and 255.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     *\n     * @license Apache-2.0\n     */\n\n\n    send(message, options = {\n      time: 0\n    }, legacy = 0) {\n      // If a Message object is passed in we extract the message data (the jzz plugin used on Node.js\n      // does not support using Uint8Array).\n      if (message instanceof Message) {\n        message = Utilities.isNode ? message.data : message.rawData;\n      } // If the data is a Uint8Array and we are on Node, we must convert it to array so it works with\n      // the jzz module.\n\n\n      if (message instanceof Uint8Array && Utilities.isNode) {\n        message = Array.from(message);\n      } // Validation\n\n\n      if (wm.validation) {\n        // If message is neither an array nor a Uint8Array, then we are in legacy mode\n        if (!Array.isArray(message) && !(message instanceof Uint8Array)) {\n          message = [message];\n          if (Array.isArray(options)) message = message.concat(options);\n          options = isNaN(legacy) ? {\n            time: 0\n          } : {\n            time: legacy\n          };\n        }\n\n        if (!(parseInt(message[0]) >= 128 && parseInt(message[0]) <= 255)) {\n          throw new RangeError(\"The first byte (status) must be an integer between 128 and 255.\");\n        }\n\n        message.slice(1).forEach(value => {\n          value = parseInt(value);\n\n          if (!(value >= 0 && value <= 255)) {\n            throw new RangeError(\"Data bytes must be integers between 0 and 255.\");\n          }\n        });\n        if (!options) options = {\n          time: 0\n        };\n      } // Send message and return `Output` for chaining\n\n\n      this._midiOutput.send(message, Utilities.toTimestamp(options.time));\n\n      return this;\n    }\n    /**\n     * Sends a MIDI [**system exclusive**]{@link\n      * https://www.midi.org/specifications-old/item/table-4-universal-system-exclusive-messages}\n     * (*sysex*) message. There are two categories of system exclusive messages: manufacturer-specific\n     * messages and universal messages. Universal messages are further divided into three subtypes:\n     *\n     *   * Universal non-commercial (for research and testing): `0x7D`\n     *   * Universal non-realtime: `0x7E`\n     *   * Universal realtime: `0x7F`\n     *\n     * The method's first parameter (`identification`) identifies the type of message. If the value of\n     * `identification` is `0x7D` (125), `0x7E` (126) or `0x7F` (127), the message will be identified\n     * as a **universal non-commercial**, **universal non-realtime** or **universal realtime** message\n     * (respectively).\n     *\n     * If the `identification` value is an array or an integer between 0 and 124, it will be used to\n     * identify the manufacturer targeted by the message. The *MIDI Manufacturers Association*\n     * maintains a full list of\n     * [Manufacturer ID Numbers](https://www.midi.org/specifications-old/item/manufacturer-id-numbers).\n     *\n     * The `data` parameter should only contain the data of the message. When sending out the actual\n     * MIDI message, WEBMIDI.js will automatically prepend the data with the **sysex byte** (`0xF0`)\n     * and the identification byte(s). It will also automatically terminate the message with the\n     * **sysex end byte** (`0xF7`).\n     *\n     * To use the `sendSysex()` method, system exclusive message support must have been enabled. To\n     * do so, you must set the `sysex` option to `true` when calling\n     * [`WebMidi.enable()`]{@link WebMidi#enable}:\n     *\n     * ```js\n     * WebMidi.enable({sysex: true})\n     *   .then(() => console.log(\"System exclusive messages are enabled\");\n     * ```\n     *\n     * ##### Examples of manufacturer-specific system exclusive messages\n     *\n     * If you want to send a sysex message to a Korg device connected to the first output, you would\n     * use the following code:\n     *\n     * ```js\n     * WebMidi.outputs[0].sendSysex(0x42, [0x1, 0x2, 0x3, 0x4, 0x5]);\n     * ```\n     * In this case `0x42` is the ID of the manufacturer (Korg) and `[0x1, 0x2, 0x3, 0x4, 0x5]` is the\n     * data being sent.\n     *\n     * The parameters can be specified using any number notation (decimal, hex, binary, etc.).\n     * Therefore, the code above is equivalent to this code:\n     *\n     * ```js\n     * WebMidi.outputs[0].sendSysex(66, [1, 2, 3, 4, 5]);\n     * ```\n     *\n     * Some manufacturers are identified using 3 bytes. In this case, you would use a 3-position array\n     * as the first parameter. For example, to send the same sysex message to a\n     * *Native Instruments* device:\n     *\n     * ```js\n     * WebMidi.outputs[0].sendSysex([0x00, 0x21, 0x09], [0x1, 0x2, 0x3, 0x4, 0x5]);\n     * ```\n     *\n     * There is no limit for the length of the data array. However, it is generally suggested to keep\n     * system exclusive messages to 64Kb or less.\n     *\n     * ##### Example of universal system exclusive message\n     *\n     * If you want to send a universal sysex message, simply assign the correct identification number\n     * in the first parameter. Number `0x7D` (125) is for non-commercial, `0x7E` (126) is for\n     * non-realtime and `0x7F` (127) is for realtime.\n     *\n     * So, for example, if you wanted to send an identity request non-realtime message (`0x7E`), you\n     * could use the following:\n     *\n     * ```js\n     * WebMidi.outputs[0].sendSysex(0x7E, [0x7F, 0x06, 0x01]);\n     * ```\n     *\n     * For more details on the format of universal messages, consult the list of\n     * [universal sysex messages](https://www.midi.org/specifications-old/item/table-4-universal-system-exclusive-messages).\n     *\n     * @param {number|number[]} identification An unsigned integer or an array of three unsigned\n     * integers between `0` and `127` that either identify the manufacturer or sets the message to be\n     * a **universal non-commercial message** (`0x7D`), a **universal non-realtime message** (`0x7E`)\n     * or a **universal realtime message** (`0x7F`). The *MIDI Manufacturers Association* maintains a\n     * full list of\n     * [Manufacturer ID Numbers](https://www.midi.org/specifications-old/item/manufacturer-id-numbers).\n     *\n     * @param {number[]|Uint8Array} [data] A `Uint8Array` or an array of unsigned integers between `0`\n     * and `127`. This is the data you wish to transfer.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {DOMException} Failed to execute 'send' on 'MIDIOutput': System exclusive message is\n     * not allowed.\n     *\n     * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index x is greater\n     * than 0xFF.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */\n\n\n    sendSysex(identification, data = [], options = {}) {\n      identification = [].concat(identification); // Check if data is Uint8Array\n\n      if (data instanceof Uint8Array) {\n        const merged = new Uint8Array(1 + identification.length + data.length + 1);\n        merged[0] = Enumerations.SYSTEM_MESSAGES.sysex;\n        merged.set(Uint8Array.from(identification), 1);\n        merged.set(data, 1 + identification.length);\n        merged[merged.length - 1] = Enumerations.SYSTEM_MESSAGES.sysexend;\n        this.send(merged, {\n          time: options.time\n        });\n      } else {\n        const merged = identification.concat(data, Enumerations.SYSTEM_MESSAGES.sysexend);\n        this.send([Enumerations.SYSTEM_MESSAGES.sysex].concat(merged), {\n          time: options.time\n        });\n      }\n\n      return this;\n    }\n\n    /**\n     * Clears all messages that have been queued but not yet delivered.\n     *\n     * **Warning**: this method has been defined in the specification but has not been implemented\n     * yet. As soon as browsers implement it, it will work.\n     *\n     * You can check out the current status of this feature for Chromium (Chrome) here:\n     * https://bugs.chromium.org/p/chromium/issues/detail?id=471798\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */\n    clear() {\n      if (this._midiOutput.clear) {\n        this._midiOutput.clear();\n      } else {\n        if (wm.validation) {\n          console.warn(\"The 'clear()' method has not yet been implemented in your environment.\");\n        }\n      }\n\n      return this;\n    }\n    /**\n     * Sends a MIDI **timecode quarter frame** message. Please note that no processing is being done\n     * on the data. It is up to the developer to format the data according to the\n     * [MIDI Timecode](https://en.wikipedia.org/wiki/MIDI_timecode) format.\n     *\n     * @param value {number} The quarter frame message content (integer between 0 and 127).\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */\n\n\n    sendTimecodeQuarterFrame(value, options = {}) {\n      if (wm.validation) {\n        value = parseInt(value);\n\n        if (isNaN(value) || !(value >= 0 && value <= 127)) {\n          throw new RangeError(\"The value must be an integer between 0 and 127.\");\n        }\n      }\n\n      this.send([Enumerations.SYSTEM_MESSAGES.timecode, value], {\n        time: options.time\n      });\n      return this;\n    }\n\n    /**\n     * Sends a **song position** MIDI message. The value is expressed in MIDI beats (between `0` and\n     * `16383`) which are 16th note. Position `0` is always the start of the song.\n     *\n     * @param {number} [value=0] The MIDI beat to cue to (integer between `0` and `16383`).\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     *\n     * @since 3.0.0\n     */\n    sendSongPosition(value = 0, options = {}) {\n      // @todo allow passing in 2-entries array for msb/lsb\n      value = Math.floor(value) || 0;\n      var msb = value >> 7 & 0x7F;\n      var lsb = value & 0x7F;\n      this.send([Enumerations.SYSTEM_MESSAGES.songposition, msb, lsb], {\n        time: options.time\n      });\n      return this;\n    }\n    /**\n     * Sends a **song select** MIDI message.\n     *\n     * @param {number} [value=0] The number of the song to select (integer between `0` and `127`).\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws The song number must be between 0 and 127.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     *\n     * @since 3.0.0\n     */\n\n\n    sendSongSelect(value = 0, options = {}) {\n      if (wm.validation) {\n        value = parseInt(value);\n\n        if (isNaN(value) || !(value >= 0 && value <= 127)) {\n          throw new RangeError(\"The program value must be between 0 and 127\");\n        }\n      }\n\n      this.send([Enumerations.SYSTEM_MESSAGES.songselect, value], {\n        time: options.time\n      });\n      return this;\n    }\n    /**\n     * Sends a MIDI **tune request** real-time message.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     *\n     * @since 3.0.0\n     */\n\n\n    sendTuneRequest(options = {}) {\n      this.send([Enumerations.SYSTEM_MESSAGES.tunerequest], {\n        time: options.time\n      });\n      return this;\n    }\n    /**\n     * Sends a MIDI **clock** real-time message. According to the standard, there are 24 MIDI clocks\n     * for every quarter note.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */\n\n\n    sendClock(options = {}) {\n      this.send([Enumerations.SYSTEM_MESSAGES.clock], {\n        time: options.time\n      });\n      return this;\n    }\n    /**\n     * Sends a **start** real-time message. A MIDI Start message starts the playback of the current\n     * song at beat 0. To start playback elsewhere in the song, use the\n     * [`sendContinue()`]{@link #sendContinue} method.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */\n\n\n    sendStart(options = {}) {\n      this.send([Enumerations.SYSTEM_MESSAGES.start], {\n        time: options.time\n      });\n      return this;\n    }\n    /**\n     * Sends a **continue** real-time message. This resumes song playback where it was previously\n     * stopped or where it was last cued with a song position message. To start playback from the\n     * start, use the [`sendStart()`]{@link Output#sendStart}` method.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */\n\n\n    sendContinue(options = {}) {\n      this.send([Enumerations.SYSTEM_MESSAGES.continue], {\n        time: options.time\n      });\n      return this;\n    }\n    /**\n     * Sends a **stop** real-time message. This tells the device connected to this output to stop\n     * playback immediately (or at the scheduled time, if specified).\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */\n\n\n    sendStop(options = {}) {\n      this.send([Enumerations.SYSTEM_MESSAGES.stop], {\n        time: options.time\n      });\n      return this;\n    }\n    /**\n     * Sends an **active sensing** real-time message. This tells the device connected to this port\n     * that the connection is still good. Active sensing messages are often sent every 300 ms if there\n     * was no other activity on the MIDI port.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */\n\n\n    sendActiveSensing(options = {}) {\n      this.send([Enumerations.SYSTEM_MESSAGES.activesensing], {\n        time: options.time\n      });\n      return this;\n    }\n    /**\n     * Sends a **reset** real-time message. This tells the device connected to this output that it\n     * should reset itself to a default state.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */\n\n\n    sendReset(options = {}) {\n      this.send([Enumerations.SYSTEM_MESSAGES.reset], {\n        time: options.time\n      });\n      return this;\n    }\n    /**\n     * @private\n     * @deprecated since version 3.0\n     */\n\n\n    sendTuningRequest(options = {}) {\n      if (wm.validation) {\n        console.warn(\"The sendTuningRequest() method has been deprecated. Use sendTuningRequest() instead.\");\n      }\n\n      return this.sendTuneRequest(options);\n    }\n    /**\n     * Sends a MIDI **key aftertouch** message to the specified channel(s) at the scheduled time. This\n     * is a key-specific aftertouch. For a channel-wide aftertouch message, use\n     * [`setChannelAftertouch()`]{@link #setChannelAftertouch}.\n     *\n     * @param note {number|Note|string|number[]|Note[]|string[]} The note(s) for which you are sending\n     * an aftertouch value. The notes can be specified by using a MIDI note number (`0` - `127`), a\n     * [`Note`](Note) object, a note identifier (e.g. `C3`, `G#4`, `F-1`, `Db7`) or an array of the\n     * previous types. When using a note identifier, octave range must be between `-1` and `9`. The\n     * lowest note is `C-1` (MIDI note number `0`) and the highest note is `G9` (MIDI note number\n     * `127`).\n     *\n     * @param [pressure=0.5] {number} The pressure level (between 0 and 1). An invalid pressure value\n     * will silently trigger the default behaviour. If the `rawValue` option is set to `true`, the\n     * pressure can be defined by using an integer between 0 and 127.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n     * considered a float between `0` and `1.0` (default) or a raw integer between `0` and `127`.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @return {Output} Returns the `Output` object so methods can be chained.\n     *\n     * @since 3.0.0\n     */\n\n\n    sendKeyAftertouch(note, pressure, options = {}) {\n      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        this.channels[ch].sendKeyAftertouch(note, pressure, options);\n      });\n      return this;\n    }\n\n    /**\n     * Sends a MIDI **control change** message to the specified channel(s) at the scheduled time. The\n     * control change message to send can be specified numerically (0-127) or by using one of the\n     * following common names:\n     *\n     * | Number | Name                          |\n     * |--------|-------------------------------|\n     * | 0      |`bankselectcoarse`             |\n     * | 1      |`modulationwheelcoarse`        |\n     * | 2      |`breathcontrollercoarse`       |\n     * | 4      |`footcontrollercoarse`         |\n     * | 5      |`portamentotimecoarse`         |\n     * | 6      |`dataentrycoarse`              |\n     * | 7      |`volumecoarse`                 |\n     * | 8      |`balancecoarse`                |\n     * | 10     |`pancoarse`                    |\n     * | 11     |`expressioncoarse`             |\n     * | 12     |`effectcontrol1coarse`         |\n     * | 13     |`effectcontrol2coarse`         |\n     * | 18     |`generalpurposeslider3`        |\n     * | 19     |`generalpurposeslider4`        |\n     * | 32     |`bankselectfine`               |\n     * | 33     |`modulationwheelfine`          |\n     * | 34     |`breathcontrollerfine`         |\n     * | 36     |`footcontrollerfine`           |\n     * | 37     |`portamentotimefine`           |\n     * | 38     |`dataentryfine`                |\n     * | 39     |`volumefine`                   |\n     * | 40     |`balancefine`                  |\n     * | 42     |`panfine`                      |\n     * | 43     |`expressionfine`               |\n     * | 44     |`effectcontrol1fine`           |\n     * | 45     |`effectcontrol2fine`           |\n     * | 64     |`holdpedal`                    |\n     * | 65     |`portamento`                   |\n     * | 66     |`sustenutopedal`               |\n     * | 67     |`softpedal`                    |\n     * | 68     |`legatopedal`                  |\n     * | 69     |`hold2pedal`                   |\n     * | 70     |`soundvariation`               |\n     * | 71     |`resonance`                    |\n     * | 72     |`soundreleasetime`             |\n     * | 73     |`soundattacktime`              |\n     * | 74     |`brightness`                   |\n     * | 75     |`soundcontrol6`                |\n     * | 76     |`soundcontrol7`                |\n     * | 77     |`soundcontrol8`                |\n     * | 78     |`soundcontrol9`                |\n     * | 79     |`soundcontrol10`               |\n     * | 80     |`generalpurposebutton1`        |\n     * | 81     |`generalpurposebutton2`        |\n     * | 82     |`generalpurposebutton3`        |\n     * | 83     |`generalpurposebutton4`        |\n     * | 91     |`reverblevel`                  |\n     * | 92     |`tremololevel`                 |\n     * | 93     |`choruslevel`                  |\n     * | 94     |`celestelevel`                 |\n     * | 95     |`phaserlevel`                  |\n     * | 96     |`dataincrement`                |\n     * | 97     |`datadecrement`                |\n     * | 98     |`nonregisteredparametercoarse` |\n     * | 99     |`nonregisteredparameterfine`   |\n     * | 100    |`registeredparametercoarse`    |\n     * | 101    |`registeredparameterfine`      |\n     * | 120    |`allsoundoff`                  |\n     * | 121    |`resetallcontrollers`          |\n     * | 122    |`localcontrol`                 |\n     * | 123    |`allnotesoff`                  |\n     * | 124    |`omnimodeoff`                  |\n     * | 125    |`omnimodeon`                   |\n     * | 126    |`monomodeon`                   |\n     * | 127    |`polymodeon`                   |\n     *\n     * Note: as you can see above, not all control change message have a matching name. This does not\n     * mean you cannot use the others. It simply means you will need to use their number (`0` - `127`)\n     * instead of their name. While you can still use them, numbers `120` to `127` are usually\n     * reserved for *channel mode* messages. See [`sendChannelMode()`]{@link #sendChannelMode} method\n     * for more info.\n     *\n     * To view a list of all available **control change** messages, please consult [Table 3 - Control\n     * Change Messages](https://www.midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2)\n     * from the MIDI specification.\n     *\n     * @param controller {number|string} The MIDI controller name or number (0-127).\n     *\n     * @param [value=0] {number} The value to send (0-127).\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {RangeError} Controller numbers must be between 0 and 127.\n     * @throws {RangeError} Invalid controller name.\n     *\n     * @return {Output} Returns the `Output` object so methods can be chained.\n     */\n    sendControlChange(controller, value, options = {}, legacy = {}) {\n      if (wm.validation) {\n        // Legacy compatibility\n        if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n          const channels = options;\n          options = legacy;\n          options.channels = channels;\n          if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n        }\n      }\n\n      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        this.channels[ch].sendControlChange(controller, value, options);\n      });\n      return this;\n    }\n\n    /**\n     * Sends a **pitch bend range** message to the specified channel(s) at the scheduled time so that\n     * they adjust the range used by their pitch bend lever. The range is specified by using the\n     * `semitones` and `cents` parameters. For example, setting the `semitones` parameter to `12`\n     * means that the pitch bend range will be 12 semitones above and below the nominal pitch.\n     *\n     * @param {number} [semitones=0] The desired adjustment value in semitones (between `0` and `127`).\n     * While nothing imposes that in the specification, it is very common for manufacturers to limit\n     * the range to 2 octaves (-12 semitones to 12 semitones).\n     *\n     * @param {number} [cents=0] The desired adjustment value in cents (integer between `0` and\n     * `127`).\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {RangeError} The msb value must be between 0 and 127.\n     * @throws {RangeError} The lsb value must be between 0 and 127.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     *\n     * @since 3.0.0\n     */\n    sendPitchBendRange(semitones = 0, cents = 0, options = {}) {\n      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        this.channels[ch].sendPitchBendRange(semitones, cents, options);\n      });\n      return this;\n    }\n    /**\n     * @private\n     * @deprecated since version 3.0\n     */\n\n\n    setPitchBendRange(semitones = 0, cents = 0, channel = \"all\", options = {}) {\n      if (wm.validation) {\n        console.warn(\"The setPitchBendRange() method is deprecated. Use sendPitchBendRange() instead.\");\n        options.channels = channel;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n      return this.sendPitchBendRange(semitones, cents, options);\n    }\n    /**\n     * Sets the specified MIDI registered parameter to the desired value. The value is defined with\n     * up to two bytes of data (msb, lsb) that each can go from `0` to `127`.\n     *\n     * MIDI\n     * [registered parameters](https://www.midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2)\n     * extend the original list of control change messages. The MIDI 1.0 specification lists only a\n     * limited number of them:\n     *\n     * | Numbers      | Function                 |\n     * |--------------|--------------------------|\n     * | (0x00, 0x00) | `pitchbendrange`         |\n     * | (0x00, 0x01) | `channelfinetuning`      |\n     * | (0x00, 0x02) | `channelcoarsetuning`    |\n     * | (0x00, 0x03) | `tuningprogram`          |\n     * | (0x00, 0x04) | `tuningbank`             |\n     * | (0x00, 0x05) | `modulationrange`        |\n     * | (0x3D, 0x00) | `azimuthangle`           |\n     * | (0x3D, 0x01) | `elevationangle`         |\n     * | (0x3D, 0x02) | `gain`                   |\n     * | (0x3D, 0x03) | `distanceratio`          |\n     * | (0x3D, 0x04) | `maximumdistance`        |\n     * | (0x3D, 0x05) | `maximumdistancegain`    |\n     * | (0x3D, 0x06) | `referencedistanceratio` |\n     * | (0x3D, 0x07) | `panspreadangle`         |\n     * | (0x3D, 0x08) | `rollangle`              |\n     *\n     * Note that the `tuningprogram` and `tuningbank` parameters are part of the *MIDI Tuning\n     * Standard*, which is not widely implemented.\n     *\n     * @param parameter {string|number[]} A string identifying the parameter's name (see above) or a\n     * two-position array specifying the two control bytes (e.g. `[0x65, 0x64]`) that identify the\n     * registered parameter.\n     *\n     * @param [data=[]] {number|number[]} A single integer or an array of integers with a maximum\n     * length of 2 specifying the desired data.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */\n\n\n    sendRpnValue(parameter, data, options = {}) {\n      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        this.channels[ch].sendRpnValue(parameter, data, options);\n      });\n      return this;\n    }\n    /**\n     * @private\n     * @deprecated since version 3.0\n     */\n\n\n    setRegisteredParameter(parameter, data = [], channel = \"all\", options = {}) {\n      if (wm.validation) {\n        console.warn(\"The setRegisteredParameter() method is deprecated. Use sendRpnValue() instead.\");\n        options.channels = channel;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n      return this.sendRpnValue(parameter, data, options);\n    }\n    /**\n     * Sends a MIDI **channel aftertouch** message to the specified channel(s). For key-specific\n     * aftertouch, you should instead use [`setKeyAftertouch()`]{@link #setKeyAftertouch}.\n     *\n     * @param [pressure=0.5] {number} The pressure level (between `0` and `1`). An invalid pressure\n     * value will silently trigger the default behaviour. If the `rawValue` option is set to `true`,\n     * the pressure can be defined by using an integer between `0` and `127`.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n     * considered a float between `0` and `1.0` (default) or a raw integer between `0` and `127`.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @return {Output} Returns the `Output` object so methods can be chained.\n     * @since 3.0.0\n     */\n\n\n    sendChannelAftertouch(pressure, options = {}, legacy = {}) {\n      if (wm.validation) {\n        // Legacy compatibility\n        if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n          const channels = options;\n          options = legacy;\n          options.channels = channels;\n          if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n        }\n      }\n\n      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        this.channels[ch].sendChannelAftertouch(pressure, options);\n      });\n      return this;\n    }\n    /**\n     * Sends a MIDI **pitch bend** message to the specified channel(s) at the scheduled time.\n     *\n     * The resulting bend is relative to the pitch bend range that has been defined. The range can be\n     * set with [`sendPitchBendRange()`]{@link #sendPitchBendRange}. So, for example, if the pitch\n     * bend range has been set to 12 semitones, using a bend value of `-1` will bend the note 1 octave\n     * below its nominal value.\n     *\n     * @param {number|number[]} value The intensity of the bend (between `-1.0` and `1.0`). A value of\n     * `0` means no bend. If an invalid value is specified, the nearest valid value will be used\n     * instead. If the `rawValue` option is set to `true`, the intensity of the bend can be defined by\n     * either using a single integer between `0` and `127` (MSB) or an array of two integers between\n     * `0` and `127` representing, respectively, the MSB (most significant byte) and the LSB (least\n     * significant byte). The MSB is expressed in semitones with `64` meaning no bend. A value lower\n     * than `64` bends downwards while a value higher than `64` bends upwards. The LSB is expressed\n     * in cents (1/100 of a semitone). An LSB of `64` also means no bend.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n     * considered as a float between `-1.0` and `1.0` (default) or as raw integer between `0` and\n     * 127` (or an array of 2 integers if using both MSB and LSB).\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     *\n     * @since 3.0.0\n     */\n\n\n    sendPitchBend(value, options = {}, legacy = {}) {\n      if (wm.validation) {\n        // Legacy compatibility\n        if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n          const channels = options;\n          options = legacy;\n          options.channels = channels;\n          if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n        }\n      }\n\n      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        this.channels[ch].sendPitchBend(value, options);\n      });\n      return this;\n    }\n    /**\n     * Sends a MIDI **program change** message to the specified channel(s) at the scheduled time.\n     *\n     * @param {number} [program=0] The MIDI patch (program) number (integer between `0` and `127`).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index 1 is greater\n     * than 0xFF.\n     *\n     * @return {Output} Returns the `Output` object so methods can be chained.\n     *\n     * @since 3.0.0\n     */\n\n\n    sendProgramChange(program = 0, options = {}, legacy = {}) {\n      if (wm.validation) {\n        // Legacy compatibility\n        if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n          const channels = options;\n          options = legacy;\n          options.channels = channels;\n          if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n        }\n      }\n\n      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        this.channels[ch].sendProgramChange(program, options);\n      });\n      return this;\n    }\n    /**\n     * Sends a **modulation depth range** message to the specified channel(s) so that they adjust the\n     * depth of their modulation wheel's range. The range can be specified with the `semitones`\n     * parameter, the `cents` parameter or by specifying both parameters at the same time.\n     *\n     * @param [semitones=0] {number} The desired adjustment value in semitones (integer between\n     * 0 and 127).\n     *\n     * @param [cents=0] {number} The desired adjustment value in cents (integer between 0 and 127).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {RangeError} The msb value must be between 0 and 127\n     * @throws {RangeError} The lsb value must be between 0 and 127\n     *\n     * @return {Output} Returns the `Output` object so methods can be chained.\n     *\n     * @since 3.0.0\n     */\n\n\n    sendModulationRange(semitones, cents, options = {}) {\n      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        this.channels[ch].sendModulationRange(semitones, cents, options);\n      });\n      return this;\n    }\n\n    /**\n     * @private\n     * @deprecated since version 3.0\n     */\n    setModulationRange(semitones = 0, cents = 0, channel = \"all\", options = {}) {\n      if (wm.validation) {\n        console.warn(\"The setModulationRange() method is deprecated. Use sendModulationRange() instead.\");\n        options.channels = channel;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n      return this.sendModulationRange(semitones, cents, options);\n    }\n    /**\n     * Sends a master tuning message to the specified channel(s). The value is decimal and must be\n     * larger than `-65` semitones and smaller than `64` semitones.\n     *\n     * Because of the way the MIDI specification works, the decimal portion of the value will be\n     * encoded with a resolution of 14bit. The integer portion must be between -64 and 63\n     * inclusively. This function actually generates two MIDI messages: a **Master Coarse Tuning** and\n     * a **Master Fine Tuning** RPN messages.\n     *\n     * @param [value=0.0] {number} The desired decimal adjustment value in semitones (-65 < x < 64)\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {RangeError} The value must be a decimal number between larger than -65 and smaller\n     * than 64.\n     *\n     * @return {Output} Returns the `Output` object so methods can be chained.\n     *\n     * @since 3.0.0\n     */\n\n\n    sendMasterTuning(value, options = {}) {\n      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        this.channels[ch].sendMasterTuning(value, options);\n      });\n      return this;\n    }\n    /**\n     * @private\n     * @deprecated since version 3.0\n     */\n\n\n    setMasterTuning(value, channel = {}, options = {}) {\n      if (wm.validation) {\n        console.warn(\"The setMasterTuning() method is deprecated. Use sendMasterTuning() instead.\");\n        options.channels = channel;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n      return this.sendMasterTuning(value, options);\n    }\n    /**\n     * Sets the MIDI tuning program to use. Note that the **Tuning Program** parameter is part of the\n     * *MIDI Tuning Standard*, which is not widely implemented.\n     *\n     * @param value {number} The desired tuning program (integer between `0` and `127`).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {RangeError} The program value must be between 0 and 127.\n     *\n     * @return {Output} Returns the `Output` object so methods can be chained.\n     *\n     * @since 3.0.0\n     */\n\n\n    sendTuningProgram(value, options = {}) {\n      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        this.channels[ch].sendTuningProgram(value, options);\n      });\n      return this;\n    }\n    /**\n     * @private\n     * @deprecated since version 3.0\n     */\n\n\n    setTuningProgram(value, channel = \"all\", options = {}) {\n      if (wm.validation) {\n        console.warn(\"The setTuningProgram() method is deprecated. Use sendTuningProgram() instead.\");\n        options.channels = channel;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n      return this.sendTuningProgram(value, options);\n    }\n    /**\n     * Sets the MIDI tuning bank to use. Note that the **Tuning Bank** parameter is part of the\n     * *MIDI Tuning Standard*, which is not widely implemented.\n     *\n     * @param {number} [value=0] The desired tuning bank (integer between `0` and `127`).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {RangeError} The bank value must be between 0 and 127.\n     *\n     * @return {Output} Returns the `Output` object so methods can be chained.\n     *\n     * @since 3.0.0\n     */\n\n\n    sendTuningBank(value = 0, options = {}) {\n      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        this.channels[ch].sendTuningBank(value, options);\n      });\n      return this;\n    }\n\n    /**\n     * @private\n     * @deprecated since version 3.0\n     */\n    setTuningBank(parameter, channel = \"all\", options = {}) {\n      if (wm.validation) {\n        console.warn(\"The setTuningBank() method is deprecated. Use sendTuningBank() instead.\");\n        options.channels = channel;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n      return this.sendTuningBank(parameter, options);\n    }\n    /**\n     * Sends a MIDI **channel mode** message to the specified channel(s). The channel mode message to\n     * send can be specified numerically or by using one of the following common names:\n     *\n     * |  Type                |Number| Shortcut Method                                               |\n     * | ---------------------|------|-------------------------------------------------------------- |\n     * | `allsoundoff`        | 120  | [`sendAllSoundOff()`]{@link #sendAllSoundOff}                 |\n     * | `resetallcontrollers`| 121  | [`sendResetAllControllers()`]{@link #sendResetAllControllers} |\n     * | `localcontrol`       | 122  | [`sendLocalControl()`]{@link #sendLocalControl}               |\n     * | `allnotesoff`        | 123  | [`sendAllNotesOff()`]{@link #sendAllNotesOff}                 |\n     * | `omnimodeoff`        | 124  | [`sendOmniMode(false)`]{@link #sendOmniMode}                  |\n     * | `omnimodeon`         | 125  | [`sendOmniMode(true)`]{@link #sendOmniMode}                   |\n     * | `monomodeon`         | 126  | [`sendPolyphonicMode(\"mono\")`]{@link #sendPolyphonicMode}     |\n     * | `polymodeon`         | 127  | [`sendPolyphonicMode(\"poly\")`]{@link #sendPolyphonicMode}     |\n     *\n     * Note: as you can see above, to make it easier, all channel mode messages also have a matching\n     * helper method.\n     *\n     * It should also be noted that, per the MIDI specification, only `localcontrol` and `monomodeon`\n     * may require a value that's not zero. For that reason, the `value` parameter is optional and\n     * defaults to 0.\n     *\n     * @param {number|string} command The numerical identifier of the channel mode message (integer\n     * between 120-127) or its name as a string.\n     *\n     * @param {number} [value=0] The value to send (integer between 0-127).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {TypeError} Invalid channel mode message name.\n     * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n     * @throws {RangeError} Value must be an integer between 0 and 127.\n     *\n     * @return {Output} Returns the `Output` object so methods can be chained.\n     *\n     */\n\n\n    sendChannelMode(command, value = 0, options = {}, legacy = {}) {\n      if (wm.validation) {\n        // Legacy compatibility\n        if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n          const channels = options;\n          options = legacy;\n          options.channels = channels;\n          if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n        }\n      }\n\n      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        this.channels[ch].sendChannelMode(command, value, options);\n      });\n      return this;\n    }\n    /**\n     * Sends an **all sound off** channel mode message. This will silence all sounds playing on that\n     * channel but will not prevent new sounds from being triggered.\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output}\n     *\n     * @since 3.0.0\n     */\n\n\n    sendAllSoundOff(options = {}) {\n      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        this.channels[ch].sendAllSoundOff(options);\n      });\n      return this;\n    }\n    /**\n     * Sends an **all notes off** channel mode message. This will make all currently playing notes\n     * fade out just as if their key had been released. This is different from the\n     * [`turnSoundOff()`]{@link #turnSoundOff} method which mutes all sounds immediately.\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output}\n     *\n     * @since 3.0.0\n     */\n\n\n    sendAllNotesOff(options = {}) {\n      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        this.channels[ch].sendAllNotesOff(options);\n      });\n      return this;\n    }\n    /**\n     * Sends a **reset all controllers** channel mode message. This resets all controllers, such as\n     * the pitch bend, to their default value.\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output}\n     */\n\n\n    sendResetAllControllers(options = {}, legacy = {}) {\n      if (wm.validation) {\n        // Legacy compatibility\n        if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n          const channels = options;\n          options = legacy;\n          options.channels = channels;\n          if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n        }\n      }\n\n      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        this.channels[ch].sendResetAllControllers(options);\n      });\n      return this;\n    }\n    /**\n     * Sets the polyphonic mode. In `poly` mode (usually the default), multiple notes can be played\n     * and heard at the same time. In `mono` mode, only one note will be heard at once even if\n     * multiple notes are being played.\n     *\n     * @param mode {string} The mode to use: `mono` or `poly`.\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @return {Output} Returns the `Output` object so methods can be chained.\n     *\n     * @since 3.0.0\n     */\n\n\n    sendPolyphonicMode(mode, options = {}, legacy = {}) {\n      if (wm.validation) {\n        // Legacy compatibility\n        if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n          const channels = options;\n          options = legacy;\n          options.channels = channels;\n          if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n        }\n      }\n\n      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        this.channels[ch].sendPolyphonicMode(mode, options);\n      });\n      return this;\n    }\n    /**\n     * Turns local control on or off. Local control is usually enabled by default. If you disable it,\n     * the instrument will no longer trigger its own sounds. It will only send the MIDI messages to\n     * its out port.\n     *\n     * @param [state=false] {boolean} Whether to activate local control (`true`) or disable it\n     * (`false`).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @return {Output} Returns the `Output` object so methods can be chained.\n     *\n     * @since 3.0.0\n     */\n\n\n    sendLocalControl(state, options = {}, legacy = {}) {\n      if (wm.validation) {\n        // Legacy compatibility\n        if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n          const channels = options;\n          options = legacy;\n          options.channels = channels;\n          if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n        }\n      }\n\n      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        this.channels[ch].sendLocalControl(state, options);\n      });\n      return this;\n    }\n    /**\n     * Sets OMNI mode to **on** or **off** for the specified channel(s). MIDI's OMNI mode causes the\n     * instrument to respond to messages from all channels.\n     *\n     * It should be noted that support for OMNI mode is not as common as it used to be.\n     *\n     * @param [state] {boolean} Whether to activate OMNI mode (`true`) or not (`false`).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {TypeError} Invalid channel mode message name.\n     * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n     * @throws {RangeError} Value must be an integer between 0 and 127.\n     *\n     * @return {Output} Returns the `Output` object so methods can be chained.\n     *\n     * @since 3.0.0\n     */\n\n\n    sendOmniMode(state, options = {}, legacy = {}) {\n      if (wm.validation) {\n        // Legacy compatibility\n        if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n          const channels = options;\n          options = legacy;\n          options.channels = channels;\n          if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n        }\n      }\n\n      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        this.channels[ch].sendOmniMode(state, options);\n      });\n      return this;\n    }\n    /**\n     * Sets a non-registered parameter to the specified value. The NRPN is selected by passing a\n     * two-position array specifying the values of the two control bytes. The value is specified by\n     * passing a single integer (most cases) or an array of two integers.\n     *\n     * NRPNs are not standardized in any way. Each manufacturer is free to implement them any way\n     * they see fit. For example, according to the Roland GS specification, you can control the\n     * **vibrato rate** using NRPN (`1`, `8`). Therefore, to set the **vibrato rate** value to `123`\n     * you would use:\n     *\n     * ```js\n     * WebMidi.outputs[0].sendNrpnValue([1, 8], 123);\n     * ```\n     *\n     * You probably want to should select a channel so the message is not sent to all channels. For\n     * instance, to send to channel `1` of the first output port, you would use:\n     *\n     * ```js\n     * WebMidi.outputs[0].sendNrpnValue([1, 8], 123, 1);\n     * ```\n     *\n     * In some rarer cases, you need to send two values with your NRPN messages. In such cases, you\n     * would use a 2-position array. For example, for its **ClockBPM** parameter (`2`, `63`), Novation\n     * uses a 14-bit value that combines an MSB and an LSB (7-bit values). So, for example, if the\n     * value to send was `10`, you could use:\n     *\n     * ```js\n     * WebMidi.outputs[0].sendNrpnValue([2, 63], [0, 10], 1);\n     * ```\n     *\n     * For further implementation details, refer to the manufacturer's documentation.\n     *\n     * @param parameter {number[]} A two-position array specifying the two control bytes (`0x63`,\n     * `0x62`) that identify the non-registered parameter.\n     *\n     * @param [data=[]] {number|number[]} An integer or an array of integers with a length of 1 or 2\n     * specifying the desired data.\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws {RangeError} The control value must be between 0 and 127.\n     * @throws {RangeError} The msb value must be between 0 and 127\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */\n\n\n    sendNrpnValue(parameter, data, options = {}) {\n      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        this.channels[ch].sendNrpnValue(parameter, data, options);\n      });\n      return this;\n    }\n    /**\n     * @private\n     * @deprecated since version 3.0\n     */\n\n\n    setNonRegisteredParameter(parameter, data = [], channel = \"all\", options = {}) {\n      if (wm.validation) {\n        console.warn(\"The setNonRegisteredParameter() method is deprecated. Use sendNrpnValue() instead.\");\n        options.channels = channel;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n      return this.sendNrpnValue(parameter, data, options);\n    }\n    /**\n     * Increments the specified MIDI registered parameter by 1. Here is the full list of parameter\n     * names that can be used with this method:\n     *\n     *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n     *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n     *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n     *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n     *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n     *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n     *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n     *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n     *  * Gain (0x3D, 0x02): `\"gain\"`\n     *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n     *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n     *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n     *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n     *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n     *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n     *\n     * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n     * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n     * parameter.\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */\n\n\n    sendRpnIncrement(parameter, options = {}) {\n      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        this.channels[ch].sendRpnIncrement(parameter, options);\n      });\n      return this;\n    }\n    /**\n     * @private\n     * @deprecated since version 3.0\n     */\n\n\n    incrementRegisteredParameter(parameter, channel = \"all\", options = {}) {\n      if (wm.validation) {\n        console.warn(\"The incrementRegisteredParameter() method is deprecated. Use sendRpnIncrement() instead.\");\n        options.channels = channel;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n      return this.sendRpnIncrement(parameter, options);\n    }\n    /**\n     * Decrements the specified MIDI registered parameter by 1. Here is the full list of parameter\n     * names that can be used with this method:\n     *\n     *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n     *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n     *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n     *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n     *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n     *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n     *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n     *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n     *  * Gain (0x3D, 0x02): `\"gain\"`\n     *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n     *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n     *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n     *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n     *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n     *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n     *\n     * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n     * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n     * parameter.\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @throws TypeError The specified parameter is not available.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */\n\n\n    sendRpnDecrement(parameter, options = {}) {\n      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        this.channels[ch].sendRpnDecrement(parameter, options);\n      });\n      return this;\n    }\n    /**\n     * @private\n     * @deprecated since version 3.0\n     */\n\n\n    decrementRegisteredParameter(parameter, channel = \"all\", options = {}) {\n      if (wm.validation) {\n        console.warn(\"The decrementRegisteredParameter() method is deprecated. Use sendRpnDecrement() instead.\");\n        options.channels = channel;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n      return this.sendRpnDecrement(parameter, options);\n    }\n    /**\n     * Sends a **note off** message for the specified MIDI note number on the specified channel(s).\n     * The first parameter is the note to stop. It can be a single value or an array of the following\n     * valid values:\n     *\n     *  - A MIDI note number (integer between `0` and `127`)\n     *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n     *  - A [`Note`](Note) object\n     *\n     * The execution of the **note off** command can be delayed by using the `time` property of the\n     * `options` parameter.\n     *\n     * @param note {number|Note|string|number[]|Note[]|string[]} The note(s) to stop. The notes can be\n     * specified by using a MIDI note number (`0` - `127`), a note identifier (e.g. `C3`, `G#4`,\n     * `F-1`, `Db7`) or an array of the previous types. When using a note identifier, octave range\n     * must be between `-1` and `9`. The lowest note is `C-1` (MIDI note number `0`) and the highest\n     * note is `G9` (MIDI note number `127`).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number} [options.release=0.5] The velocity at which to release the note\n     * (between `0` and `1`).  If the `rawRelease` option is also defined, `rawRelease` will have\n     * priority. An invalid velocity value will silently trigger the default of `0.5`.\n     *\n     * @param {number} [options.rawRelease=64] The velocity at which to release the note\n     * (between `0` and `127`). If the `release` option is also defined, `rawRelease` will have\n     * priority. An invalid velocity value will silently trigger the default of `64`.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */\n\n\n    sendNoteOff(note, options = {}, legacy = {}) {\n      if (wm.validation) {\n        // Legacy compatibility\n        if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n          const channels = options;\n          options = legacy;\n          options.channels = channels;\n          if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n        }\n      }\n\n      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        this.channels[ch].sendNoteOff(note, options);\n      });\n      return this;\n    }\n    /**\n     * Sends a **note off** message for the specified MIDI note number on the specified channel(s).\n     * The first parameter is the note to stop. It can be a single value or an array of the following\n     * valid values:\n     *\n     *  - A MIDI note number (integer between `0` and `127`)\n     *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n     *  - A [`Note`](Note) object\n     *\n     * The execution of the **note off** command can be delayed by using the `time` property of the\n     * `options` parameter.\n     *\n     * @param note {number|Note|string|number[]|Note[]|string[]} The note(s) to stop. The notes can be\n     * specified by using a MIDI note number (`0` - `127`), a note identifier (e.g. `C3`, `G#4`, `F-1`,\n     * `Db7`) or an array of the previous types. When using a note identifier, octave range must be\n     * between `-1` and `9`. The lowest note is `C-1` (MIDI note number `0`) and the highest note is\n     * `G9` (MIDI note number `127`).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number} [options.release=0.5] The velocity at which to release the note\n     * (between `0` and `1`).  If the `rawRelease` option is also defined, `rawRelease` will have\n     * priority. An invalid velocity value will silently trigger the default of `0.5`.\n     *\n     * @param {number} [options.rawRelease=64] The velocity at which to release the note\n     * (between `0` and `127`). If the `release` option is also defined, `rawRelease` will have\n     * priority. An invalid velocity value will silently trigger the default of `64`.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */\n\n\n    stopNote(note, options) {\n      return this.sendNoteOff(note, options);\n    }\n    /**\n     * Plays a note or an array of notes on one or more channels of this output. If you intend to play\n     * notes on a single channel, you should probably use\n     * [`OutputChannel.playNote()`](OutputChannel#playNote) instead.\n     *\n     * The first parameter is the note to play. It can be a single value or an array of the following\n     * valid values:\n     *\n     *  - A MIDI note number (integer between `0` and `127`)\n     *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n     *  - A [`Note`]{@link Note} object\n     *\n     * The `playNote()` method sends a **note on** MIDI message for all specified notes on all\n     * specified channels. If no channel is specified, it will send to all channels. If a `duration`\n     * is set in the `options` parameter or in the [`Note`]{@link Note} object's\n     * [`duration`]{@link Note#duration} property, it will also schedule a **note off** message to end\n     * the note after said duration. If no `duration` is set, the note will simply play until a\n     * matching **note off** message is sent with [`stopNote()`]{@link #stopNote}.\n     *\n     * The execution of the **note on** command can be delayed by using the `time` property of the\n     * `options` parameter.\n     *\n     * When using [`Note`]{@link Note} objects, the durations and velocities defined in the\n     * [`Note`]{@link Note} objects have precedence over the ones specified via the method's `options`\n     * parameter.\n     *\n     * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n     * functionally equivalent to a **note off** message.\n     *\n     * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n     * specified by using a MIDI note number (0-127), a note identifier (e.g. C3, G#4, F-1, Db7), a\n     * [`Note`]{@link Note} object or an array of the previous types. When using a note identifier,\n     * octave range must be between -1 and 9. The lowest note is C-1 (MIDI note number `0`) and the\n     * highest note is G9 (MIDI note number `127`).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number} [options.duration=undefined] The number of milliseconds after which a\n     * **note off** message will be scheduled. If left undefined, only a **note on** message is sent.\n     *\n     * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n     * `1`). If the `rawAttack` option is also defined, it will have priority. An invalid velocity\n     * value will silently trigger the default of `0.5`.\n     *\n     * @param {number} [options.rawAttack=64] The attack velocity at which to play the note (between\n     * `0` and `127`). This has priority over the `attack` property. An invalid velocity value will\n     * silently trigger the default of 64.\n     *\n     * @param {number} [options.release=0.5] The velocity at which to release the note (between `0`\n     * and `1`). If the `rawRelease` option is also defined, it will have priority. An invalid\n     * velocity value will silently trigger the default of `0.5`. This is only used with the\n     * **note off** event triggered when `options.duration` is set.\n     *\n     * @param {number} [options.rawRelease=64] The velocity at which to release the note (between `0`\n     * and `127`). This has priority over the `release` property. An invalid velocity value will\n     * silently trigger the default of 64. This is only used with the **note off** event triggered\n     * when `options.duration` is set.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */\n\n\n    playNote(note, options = {}, legacy = {}) {\n      if (wm.validation) {\n        // Legacy-compatibility warnings\n        if (options.rawVelocity) {\n          console.warn(\"The 'rawVelocity' option is deprecated. Use 'rawAttack' instead.\");\n        }\n\n        if (options.velocity) {\n          console.warn(\"The 'velocity' option is deprecated. Use 'velocity' instead.\");\n        } // Legacy compatibility\n\n\n        if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n          const channels = options;\n          options = legacy;\n          options.channels = channels;\n          if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n        }\n      }\n\n      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        this.channels[ch].playNote(note, options);\n      });\n      return this;\n    }\n    /**\n     * Sends a **note on** message for the specified MIDI note number on the specified channel(s). The\n     * first parameter is the number. It can be a single value or an array of the following valid\n     * values:\n     *\n     *  - A MIDI note number (integer between `0` and `127`)\n     *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n     *  - A [`Note`](Note) object\n     *\n     *  The execution of the **note on** command can be delayed by using the `time` property of the\n     * `options` parameter.\n     *\n     * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n     * functionally equivalent to a **note off** message.\n     *\n     * @param note {number|Note|string|number[]|Note[]|string[]} The note(s) to stop. The notes can be\n     * specified by using a MIDI note number (`0` - `127`), a note identifier (e.g. `C3`, `G#4`, `F-1`,\n     * `Db7`) or an array of the previous types. When using a note identifier, octave range must be\n     * between `-1` and `9`. The lowest note is `C-1` (MIDI note number `0`) and the highest note is\n     * `G9` (MIDI note number `127`).\n     *\n     * @param {Object} [options={}]\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n     * channel is specified, all channels will be used.\n     *\n     * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n     * `1`).  If the `rawAttack` option is also defined, `rawAttack` will have priority. An invalid\n     * velocity value will silently trigger the default of `0.5`.\n     *\n     * @param {number} [options.rawAttack=64] The velocity at which to release the note (between `0`\n     * and `127`). If the `attack` option is also defined, `rawAttack` will have priority. An invalid\n     * velocity value will silently trigger the default of `64`.\n     *\n     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n     * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n     * positive number\n     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n     * the operation will be scheduled for that time. The current time can be retrieved with\n     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n     * operation will be carried out as soon as possible.\n     *\n     * @returns {Output} Returns the `Output` object so methods can be chained.\n     */\n\n\n    sendNoteOn(note, options = {}, legacy = {}) {\n      if (wm.validation) {\n        // Legacy compatibility\n        if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n          const channels = options;\n          options = legacy;\n          options.channels = channels;\n          if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n        }\n      }\n\n      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS; // This actually supports passing a Note object even if, semantically, this does not make sense.\n\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        this.channels[ch].sendNoteOn(note, options);\n      });\n      return this;\n    }\n    /**\n     * Name of the MIDI output.\n     *\n     * @type {string}\n     * @readonly\n     */\n\n\n    get name() {\n      return this._midiOutput.name;\n    }\n    /**\n     * ID string of the MIDI output. The ID is host-specific. Do not expect the same ID on different\n     * platforms. For example, Google Chrome and the Jazz-Plugin report completely different IDs for\n     * the same port.\n     *\n     * @type {string}\n     * @readonly\n     */\n\n\n    get id() {\n      return this._midiOutput.id;\n    }\n    /**\n     * Output port's connection state: `pending`, `open` or `closed`.\n     *\n     * @type {string}\n     * @readonly\n     */\n\n\n    get connection() {\n      return this._midiOutput.connection;\n    }\n    /**\n     * Name of the manufacturer of the device that makes this output port available.\n     *\n     * @type {string}\n     * @readonly\n     */\n\n\n    get manufacturer() {\n      return this._midiOutput.manufacturer;\n    }\n    /**\n     * State of the output port: `connected` or `disconnected`.\n     *\n     * @type {string}\n     * @readonly\n     */\n\n\n    get state() {\n      return this._midiOutput.state;\n    }\n    /**\n     * Type of the output port (it will always be: `output`).\n     *\n     * @type {string}\n     * @readonly\n     */\n\n\n    get type() {\n      return this._midiOutput.type;\n    }\n    /**\n     * An integer to offset the octave of outgoing notes. By default, middle C (MIDI note number 60)\n     * is placed on the 4th octave (C4).\n     *\n     * Note that this value is combined with the global offset value defined in\n     * [`WebMidi.octaveOffset`](WebMidi#octaveOffset) (if any).\n     *\n     * @type {number}\n     *\n     * @since 3.0\n     */\n\n\n    get octaveOffset() {\n      return this._octaveOffset;\n    }\n\n    set octaveOffset(value) {\n      if (this.validation) {\n        value = parseInt(value);\n        if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n      }\n\n      this._octaveOffset = value;\n    }\n\n  }\n\n  /**\n   * The `Forwarder` class allows the forwarding of MIDI messages to predetermined outputs. When you\n   * call its [`forward()`](#forward) method, it will send the specified [`Message`](Message) object\n   * to all the outputs listed in its [`destinations`](#destinations) property.\n   *\n   * If specific channels or message types have been defined in the [`channels`](#channels) or\n   * [`types`](#types) properties, only messages matching the channels/types will be forwarded.\n   *\n   * While it can be manually instantiated, you are more likely to come across a `Forwarder` object as\n   * the return value of the [`Input.addForwarder()`](Input#addForwarder) method.\n   *\n   * @license Apache-2.0\n   * @since 3.0.0\n   */\n\n  class Forwarder {\n    /**\n     * Creates a `Forwarder` object.\n     *\n     * @param {Output|Output[]} [destinations=\\[\\]] An [`Output`](Output) object, or an array of such\n     * objects, to forward the message to.\n     *\n     * @param {object} [options={}]\n     * @param {string|string[]} [options.types=(all messages)] A MIDI message type or an array of such\n     * types (`\"noteon\"`, `\"controlchange\"`, etc.), that the specified message must match in order to\n     * be forwarded. If this option is not specified, all types of messages will be forwarded. Valid\n     * messages are the ones found in either\n     * [`SYSTEM_MESSAGES`](Enumerations#SYSTEM_MESSAGES)\n     * or [`CHANNEL_MESSAGES`](Enumerations#CHANNEL_MESSAGES).\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * A MIDI channel number or an array of channel numbers that the message must match in order to be\n     * forwarded. By default all MIDI channels are included (`1` to `16`).\n     */\n    constructor(destinations = [], options = {}) {\n      /**\n       * An array of [`Output`](Output) objects to forward the message to.\n       * @type {Output[]}\n       */\n      this.destinations = [];\n      /**\n       * An array of message types (`\"noteon\"`, `\"controlchange\"`, etc.) that must be matched in order\n       * for messages to be forwarded. By default, this array includes all\n       * [`Enumerations.SYSTEM_MESSAGES`](Enumerations#SYSTEM_MESSAGES) and\n       * [`Enumerations.CHANNEL_MESSAGES`](Enumerations#CHANNEL_MESSAGES).\n       * @type {string[]}\n       */\n\n      this.types = [...Object.keys(Enumerations.SYSTEM_MESSAGES), ...Object.keys(Enumerations.CHANNEL_MESSAGES)];\n      /**\n       * An array of MIDI channel numbers that the message must match in order to be forwarded. By\n       * default, this array includes all MIDI channels (`1` to `16`).\n       * @type {number[]}\n       */\n\n      this.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      /**\n       * Indicates whether message forwarding is currently suspended or not in this forwarder.\n       * @type {boolean}\n       */\n\n      this.suspended = false; // Make sure parameters are arrays\n\n      if (!Array.isArray(destinations)) destinations = [destinations];\n      if (options.types && !Array.isArray(options.types)) options.types = [options.types];\n      if (options.channels && !Array.isArray(options.channels)) options.channels = [options.channels];\n\n      if (wm.validation) {\n        // Validate destinations\n        destinations.forEach(destination => {\n          if (!(destination instanceof Output)) {\n            throw new TypeError(\"Destinations must be of type 'Output'.\");\n          }\n        }); // Validate types\n\n        if (options.types !== undefined) {\n          options.types.forEach(type => {\n            if (!Enumerations.SYSTEM_MESSAGES.hasOwnProperty(type) && !Enumerations.CHANNEL_MESSAGES.hasOwnProperty(type)) {\n              throw new TypeError(\"Type must be a valid message type.\");\n            }\n          });\n        } // Validate channels\n\n\n        if (options.channels !== undefined) {\n          options.channels.forEach(channel => {\n            if (!Enumerations.MIDI_CHANNEL_NUMBERS.includes(channel)) {\n              throw new TypeError(\"MIDI channel must be between 1 and 16.\");\n            }\n          });\n        }\n      }\n\n      this.destinations = destinations;\n      if (options.types) this.types = options.types;\n      if (options.channels) this.channels = options.channels;\n    }\n    /**\n     * Sends the specified message to the forwarder's destination(s) if it matches the specified\n     * type(s) and channel(s).\n     *\n     * @param {Message} message The [`Message`](Message) object to forward.\n     */\n\n\n    forward(message) {\n      // Abort if forwarding is currently suspended\n      if (this.suspended) return; // Abort if this message type should not be forwarded\n\n      if (!this.types.includes(message.type)) return; // Abort if this channel should not be forwarded\n\n      if (message.channel && !this.channels.includes(message.channel)) return; // Forward\n\n      this.destinations.forEach(destination => {\n        if (wm.validation && !(destination instanceof Output)) return;\n        destination.send(message);\n      });\n    }\n\n  }\n\n  /**\n   * The `InputChannel` class represents a single MIDI input channel (1-16) from a single input\n   * device. This object is derived from the host's MIDI subsystem and should not be instantiated\n   * directly.\n   *\n   * All 16 `InputChannel` objects can be found inside the input's [`channels`](Input#channels)\n   * property.\n   *\n   * @fires InputChannel#midimessage\n   * @fires InputChannel#unknownmessage\n   *\n   * @fires InputChannel#noteoff\n   * @fires InputChannel#noteon\n   * @fires InputChannel#keyaftertouch\n   * @fires InputChannel#programchange\n   * @fires InputChannel#channelaftertouch\n   * @fires InputChannel#pitchbend\n   *\n   * @fires InputChannel#allnotesoff\n   * @fires InputChannel#allsoundoff\n   * @fires InputChannel#localcontrol\n   * @fires InputChannel#monomode\n   * @fires InputChannel#omnimode\n   * @fires InputChannel#resetallcontrollers\n   *\n   * @fires InputChannel#event:nrpn\n   * @fires InputChannel#event:nrpn-dataentrycoarse\n   * @fires InputChannel#event:nrpn-dataentryfine\n   * @fires InputChannel#event:nrpn-dataincrement\n   * @fires InputChannel#event:nrpn-datadecrement\n   * @fires InputChannel#event:rpn\n   * @fires InputChannel#event:rpn-dataentrycoarse\n   * @fires InputChannel#event:rpn-dataentryfine\n   * @fires InputChannel#event:rpn-dataincrement\n   * @fires InputChannel#event:rpn-datadecrement\n   *\n   * @fires InputChannel#controlchange\n   * @fires InputChannel#event:controlchange-controllerxxx\n   * @fires InputChannel#event:controlchange-bankselectcoarse\n   * @fires InputChannel#event:controlchange-modulationwheelcoarse\n   * @fires InputChannel#event:controlchange-breathcontrollercoarse\n   * @fires InputChannel#event:controlchange-footcontrollercoarse\n   * @fires InputChannel#event:controlchange-portamentotimecoarse\n   * @fires InputChannel#event:controlchange-dataentrycoarse\n   * @fires InputChannel#event:controlchange-volumecoarse\n   * @fires InputChannel#event:controlchange-balancecoarse\n   * @fires InputChannel#event:controlchange-pancoarse\n   * @fires InputChannel#event:controlchange-expressioncoarse\n   * @fires InputChannel#event:controlchange-effectcontrol1coarse\n   * @fires InputChannel#event:controlchange-effectcontrol2coarse\n   * @fires InputChannel#event:controlchange-generalpurposecontroller1\n   * @fires InputChannel#event:controlchange-generalpurposecontroller2\n   * @fires InputChannel#event:controlchange-generalpurposecontroller3\n   * @fires InputChannel#event:controlchange-generalpurposecontroller4\n   * @fires InputChannel#event:controlchange-bankselectfine\n   * @fires InputChannel#event:controlchange-modulationwheelfine\n   * @fires InputChannel#event:controlchange-breathcontrollerfine\n   * @fires InputChannel#event:controlchange-footcontrollerfine\n   * @fires InputChannel#event:controlchange-portamentotimefine\n   * @fires InputChannel#event:controlchange-dataentryfine\n   * @fires InputChannel#event:controlchange-channelvolumefine\n   * @fires InputChannel#event:controlchange-balancefine\n   * @fires InputChannel#event:controlchange-panfine\n   * @fires InputChannel#event:controlchange-expressionfine\n   * @fires InputChannel#event:controlchange-effectcontrol1fine\n   * @fires InputChannel#event:controlchange-effectcontrol2fine\n   * @fires InputChannel#event:controlchange-damperpedal\n   * @fires InputChannel#event:controlchange-portamento\n   * @fires InputChannel#event:controlchange-sostenuto\n   * @fires InputChannel#event:controlchange-softpedal\n   * @fires InputChannel#event:controlchange-legatopedal\n   * @fires InputChannel#event:controlchange-hold2\n   * @fires InputChannel#event:controlchange-soundvariation\n   * @fires InputChannel#event:controlchange-resonance\n   * @fires InputChannel#event:controlchange-releasetime\n   * @fires InputChannel#event:controlchange-attacktime\n   * @fires InputChannel#event:controlchange-brightness\n   * @fires InputChannel#event:controlchange-decaytime\n   * @fires InputChannel#event:controlchange-vibratorate\n   * @fires InputChannel#event:controlchange-vibratodepth\n   * @fires InputChannel#event:controlchange-vibratodelay\n   * @fires InputChannel#event:controlchange-generalpurposecontroller5\n   * @fires InputChannel#event:controlchange-generalpurposecontroller6\n   * @fires InputChannel#event:controlchange-generalpurposecontroller7\n   * @fires InputChannel#event:controlchange-generalpurposecontroller8\n   * @fires InputChannel#event:controlchange-portamentocontrol\n   * @fires InputChannel#event:controlchange-highresolutionvelocityprefix\n   * @fires InputChannel#event:controlchange-effect1depth\n   * @fires InputChannel#event:controlchange-effect2depth\n   * @fires InputChannel#event:controlchange-effect3depth\n   * @fires InputChannel#event:controlchange-effect4depth\n   * @fires InputChannel#event:controlchange-effect5depth\n   * @fires InputChannel#event:controlchange-dataincrement\n   * @fires InputChannel#event:controlchange-datadecrement\n   * @fires InputChannel#event:controlchange-nonregisteredparameterfine\n   * @fires InputChannel#event:controlchange-nonregisteredparametercoarse\n   * @fires InputChannel#event:controlchange-registeredparameterfine\n   * @fires InputChannel#event:controlchange-registeredparametercoarse\n   * @fires InputChannel#event:controlchange-allsoundoff\n   * @fires InputChannel#event:controlchange-resetallcontrollers\n   * @fires InputChannel#event:controlchange-localcontrol\n   * @fires InputChannel#event:controlchange-allnotesoff\n   * @fires InputChannel#event:controlchange-omnimodeoff\n   * @fires InputChannel#event:controlchange-omnimodeon\n   * @fires InputChannel#event:controlchange-monomodeon\n   * @fires InputChannel#event:controlchange-polymodeon\n   * @fires InputChannel#event:\n   *\n   * @extends EventEmitter\n   * @license Apache-2.0\n   * @since 3.0.0\n   */\n\n  class InputChannel extends EventEmitter {\n    /**\n     * Creates an `InputChannel` object.\n     *\n     * @param {Input} input The [`Input`](Input) object this channel belongs to.\n     * @param {number} number The channel's MIDI number (1-16).\n     */\n    constructor(input, number) {\n      super();\n      /**\n       * @type {Input}\n       * @private\n       */\n\n      this._input = input;\n      /**\n       * @type {number}\n       * @private\n       */\n\n      this._number = number;\n      /**\n       * @type {number}\n       * @private\n       */\n\n      this._octaveOffset = 0;\n      /**\n       * An array of messages that form the current NRPN sequence\n       * @private\n       * @type {Message[]}\n       */\n\n      this._nrpnBuffer = [];\n      /**\n       * An array of messages that form the current RPN sequence\n       * @private\n       * @type {Message[]}\n       */\n\n      this._rpnBuffer = [];\n      /**\n       * Indicates whether events for **Registered Parameter Number** and **Non-Registered Parameter\n       * Number** should be dispatched. RPNs and NRPNs are composed of a sequence of specific\n       * **control change** messages. When a valid sequence of such control change messages is\n       * received, an [`rpn`](#event-rpn) or [`nrpn`](#event-nrpn) event will fire.\n       *\n       * If an invalid or out-of-order **control change** message is received, it will fall through\n       * the collector logic and all buffered **control change** messages will be discarded as\n       * incomplete.\n       *\n       * @type {boolean}\n       */\n\n      this.parameterNumberEventsEnabled = true;\n      /**\n       * Contains the current playing state of all MIDI notes of this channel (0-127). The state is\n       * `true` for a currently playing note and `false` otherwise.\n       * @type {boolean[]}\n       */\n\n      this.notesState = new Array(128).fill(false);\n    }\n    /**\n     * Destroys the `InputChannel` by removing all listeners and severing the link with the MIDI\n     * subsystem's input.\n     */\n\n\n    destroy() {\n      this._input = null;\n      this._number = null;\n      this._octaveOffset = 0;\n      this._nrpnBuffer = [];\n      this.notesState = new Array(128).fill(false);\n      this.parameterNumberEventsEnabled = false;\n      this.removeListener();\n    }\n    /**\n     * @param e MIDIMessageEvent\n     * @private\n     */\n\n\n    _processMidiMessageEvent(e) {\n      // Create and emit a new 'midimessage' event based on the incoming one\n      const event = Object.assign({}, e);\n      event.port = this.input;\n      event.target = this;\n      event.type = \"midimessage\";\n      /**\n       * Event emitted when a MIDI message of any kind is received by an `InputChannel`\n       *\n       * @event InputChannel#midimessage\n       *\n       * @type {object}\n       *\n       * @property {string} type `midimessage`\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       */\n\n      this.emit(event.type, event); // Parse the inbound event for regular MIDI messages\n\n      this._parseEventForStandardMessages(event);\n    }\n    /**\n     * Parses incoming channel events and emit standard MIDI message events (noteon, noteoff, etc.)\n     * @param e Event\n     * @private\n     */\n\n\n    _parseEventForStandardMessages(e) {\n      const event = Object.assign({}, e);\n      event.type = event.message.type || \"unknownmessage\";\n      const data1 = e.message.dataBytes[0];\n      const data2 = e.message.dataBytes[1];\n\n      if (event.type === \"noteoff\" || event.type === \"noteon\" && data2 === 0) {\n        this.notesState[data1] = false;\n        event.type = \"noteoff\"; // necessary for note on with 0 velocity\n\n        /**\n         * Event emitted when a **note off** MIDI message has been received on the channel.\n         *\n         * @event InputChannel#noteoff\n         *\n         * @type {object}\n         * @property {string} type `noteoff`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the incoming\n         * MIDI message.\n         * @property {number} timestamp The moment\n         * ([`DOMHighResTimeStamp`](https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp))\n         * when the event occurred (in milliseconds since the navigation start of the document).\n         *\n         * @property {object} note A [`Note`](Note) object containing information such as note name,\n         * octave and release velocity.\n         * @property {number} value The release velocity amount expressed as a float between 0 and 1.\n         * @property {number} rawValue The release velocity amount expressed as an integer (between 0\n         * and 127).\n         */\n        // The object created when a noteoff event arrives is a Note with an attack velocity of 0.\n\n        event.note = new Note(Utilities.offsetNumber(data1, this.octaveOffset + this.input.octaveOffset + wm.octaveOffset), {\n          rawAttack: 0,\n          rawRelease: data2\n        });\n        event.value = Utilities.from7bitToFloat(data2);\n        event.rawValue = data2; // Those are kept for backwards-compatibility but are gone from the documentation. They will\n        // be removed in future versions (@deprecated).\n\n        event.velocity = event.note.release;\n        event.rawVelocity = event.note.rawRelease;\n      } else if (event.type === \"noteon\") {\n        this.notesState[data1] = true;\n        /**\n         * Event emitted when a **note on** MIDI message has been received.\n         *\n         * @event InputChannel#noteon\n         *\n         * @type {object}\n         * @property {string} type `noteon`\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} note A [`Note`](Note) object containing information such as note name,\n         * octave and release velocity.\n         * @property {number} value The attack velocity amount expressed as a float between 0 and 1.\n         * @property {number} rawValue The attack velocity amount expressed as an integer (between 0\n         * and 127).\n         */\n\n        event.note = new Note(Utilities.offsetNumber(data1, this.octaveOffset + this.input.octaveOffset + wm.octaveOffset), {\n          rawAttack: data2\n        });\n        event.value = Utilities.from7bitToFloat(data2);\n        event.rawValue = data2; // Those are kept for backwards-compatibility but are gone from the documentation. They will\n        // be removed in future versions (@deprecated).\n\n        event.velocity = event.note.attack;\n        event.rawVelocity = event.note.rawAttack;\n      } else if (event.type === \"keyaftertouch\") {\n        /**\n         * Event emitted when a **key-specific aftertouch** MIDI message has been received.\n         *\n         * @event InputChannel#keyaftertouch\n         *\n         * @type {object}\n         * @property {string} type `\"keyaftertouch\"`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} note A [`Note`](Note) object containing information such as note name\n         * and number.\n         * @property {number} value The aftertouch amount expressed as a float between 0 and 1.\n         * @property {number} rawValue The aftertouch amount expressed as an integer (between 0 and\n         * 127).\n         */\n        event.note = new Note(Utilities.offsetNumber(data1, this.octaveOffset + this.input.octaveOffset + wm.octaveOffset)); // Aftertouch value\n\n        event.value = Utilities.from7bitToFloat(data2);\n        event.rawValue = data2; // @deprecated\n\n        event.identifier = event.note.identifier;\n        event.key = event.note.number;\n        event.rawKey = data1;\n      } else if (event.type === \"controlchange\") {\n        /**\n         * Event emitted when a **control change** MIDI message has been received.\n         *\n         * @event InputChannel#controlchange\n         *\n         * @type {object}\n         * @property {string} type `controlchange`\n         * @property {string} subtype The type of control change message that was received.\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n        event.controller = {\n          number: data1,\n          name: Enumerations.CONTROL_CHANGE_MESSAGES[data1].name,\n          description: Enumerations.CONTROL_CHANGE_MESSAGES[data1].description,\n          position: Enumerations.CONTROL_CHANGE_MESSAGES[data1].position\n        };\n        event.subtype = event.controller.name || \"controller\" + data1;\n        event.value = Utilities.from7bitToFloat(data2);\n        event.rawValue = data2;\n        /**\n         * Event emitted when a **control change** MIDI message has been received and that message is\n         * targeting the controller numbered \"xxx\". Of course, \"xxx\" should be replaced by a valid\n         * controller number (0-127).\n         *\n         * @event InputChannel#controlchange-controllerxxx\n         *\n         * @type {object}\n         * @property {string} type `controlchange-controllerxxx`\n         * @property {string} subtype The type of control change message that was received.\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        const numberedEvent = Object.assign({}, event);\n        numberedEvent.type = `${event.type}-controller${data1}`;\n        delete numberedEvent.subtype;\n        this.emit(numberedEvent.type, numberedEvent);\n        /**\n         * Event emitted when a **controlchange-bankselectcoarse** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-bankselectcoarse\n         *\n         * @type {object}\n         * @property {string} type `controlchange-bankselectcoarse`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-modulationwheelcoarse** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-modulationwheelcoarse\n         *\n         * @type {object}\n         * @property {string} type `controlchange-modulationwheelcoarse`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-breathcontrollercoarse** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-breathcontrollercoarse\n         *\n         * @type {object}\n         * @property {string} type `controlchange-breathcontrollercoarse`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-footcontrollercoarse** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-footcontrollercoarse\n         *\n         * @type {object}\n         * @property {string} type `controlchange-footcontrollercoarse`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-portamentotimecoarse** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-portamentotimecoarse\n         *\n         * @type {object}\n         * @property {string} type `controlchange-portamentotimecoarse`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-dataentrycoarse** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-dataentrycoarse\n         *\n         * @type {object}\n         * @property {string} type `controlchange-dataentrycoarse`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-volumecoarse** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-volumecoarse\n         *\n         * @type {object}\n         * @property {string} type `controlchange-volumecoarse`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-balancecoarse** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-balancecoarse\n         *\n         * @type {object}\n         * @property {string} type `controlchange-balancecoarse`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-pancoarse** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-pancoarse\n         *\n         * @type {object}\n         * @property {string} type `controlchange-pancoarse`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-expressioncoarse** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-expressioncoarse\n         *\n         * @type {object}\n         * @property {string} type `controlchange-expressioncoarse`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-effectcontrol1coarse** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-effectcontrol1coarse\n         *\n         * @type {object}\n         * @property {string} type `controlchange-effectcontrol1coarse`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-effectcontrol2coarse** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-effectcontrol2coarse\n         *\n         * @type {object}\n         * @property {string} type `controlchange-effectcontrol2coarse`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-generalpurposecontroller1** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-generalpurposecontroller1\n         *\n         * @type {object}\n         * @property {string} type `controlchange-generalpurposecontroller1`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-generalpurposecontroller2** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-generalpurposecontroller2\n         *\n         * @type {object}\n         * @property {string} type `controlchange-generalpurposecontroller2`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-generalpurposecontroller3** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-generalpurposecontroller3\n         *\n         * @type {object}\n         * @property {string} type `controlchange-generalpurposecontroller3`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-generalpurposecontroller4** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-generalpurposecontroller4\n         *\n         * @type {object}\n         * @property {string} type `controlchange-generalpurposecontroller4`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-bankselectfine** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-bankselectfine\n         *\n         * @type {object}\n         * @property {string} type `controlchange-bankselectfine`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-modulationwheelfine** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-modulationwheelfine\n         *\n         * @type {object}\n         * @property {string} type `controlchange-modulationwheelfine`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-breathcontrollerfine** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-breathcontrollerfine\n         *\n         * @type {object}\n         * @property {string} type `controlchange-breathcontrollerfine`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-footcontrollerfine** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-footcontrollerfine\n         *\n         * @type {object}\n         * @property {string} type `controlchange-footcontrollerfine`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-portamentotimefine** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-portamentotimefine\n         *\n         * @type {object}\n         * @property {string} type `controlchange-portamentotimefine`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-dataentryfine** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-dataentryfine\n         *\n         * @type {object}\n         * @property {string} type `controlchange-dataentryfine`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-channelvolumefine** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-channelvolumefine\n         *\n         * @type {object}\n         * @property {string} type `controlchange-channelvolumefine`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-balancefine** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-balancefine\n         *\n         * @type {object}\n         * @property {string} type `controlchange-balancefine`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-panfine** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-panfine\n         *\n         * @type {object}\n         * @property {string} type `controlchange-panfine`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-expressionfine** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-expressionfine\n         *\n         * @type {object}\n         * @property {string} type `controlchange-expressionfine`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-effectcontrol1fine** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-effectcontrol1fine\n         *\n         * @type {object}\n         * @property {string} type `controlchange-effectcontrol1fine`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-effectcontrol2fine** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-effectcontrol2fine\n         *\n         * @type {object}\n         * @property {string} type `controlchange-effectcontrol2fine`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-damperpedal** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-damperpedal\n         *\n         * @type {object}\n         * @property {string} type `controlchange-damperpedal`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-portamento** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-portamento\n         *\n         * @type {object}\n         * @property {string} type `controlchange-portamento`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-sostenuto** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-sostenuto\n         *\n         * @type {object}\n         * @property {string} type `controlchange-sostenuto`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-softpedal** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-softpedal\n         *\n         * @type {object}\n         * @property {string} type `controlchange-softpedal`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-legatopedal** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-legatopedal\n         *\n         * @type {object}\n         * @property {string} type `controlchange-legatopedal`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-hold2** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-hold2\n         *\n         * @type {object}\n         * @property {string} type `controlchange-hold2`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-soundvariation** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-soundvariation\n         *\n         * @type {object}\n         * @property {string} type `controlchange-soundvariation`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-resonance** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-resonance\n         *\n         * @type {object}\n         * @property {string} type `controlchange-resonance`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-releasetime** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-releasetime\n         *\n         * @type {object}\n         * @property {string} type `controlchange-releasetime`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-attacktime** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-attacktime\n         *\n         * @type {object}\n         * @property {string} type `controlchange-attacktime`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-brightness** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-brightness\n         *\n         * @type {object}\n         * @property {string} type `controlchange-brightness`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-decaytime** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-decaytime\n         *\n         * @type {object}\n         * @property {string} type `controlchange-decaytime`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-vibratorate** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-vibratorate\n         *\n         * @type {object}\n         * @property {string} type `controlchange-vibratorate`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-vibratodepth** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-vibratodepth\n         *\n         * @type {object}\n         * @property {string} type `controlchange-vibratodepth`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-vibratodelay** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-vibratodelay\n         *\n         * @type {object}\n         * @property {string} type `controlchange-vibratodelay`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-generalpurposecontroller5** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-generalpurposecontroller5\n         *\n         * @type {object}\n         * @property {string} type `controlchange-generalpurposecontroller5`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-generalpurposecontroller6** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-generalpurposecontroller6\n         *\n         * @type {object}\n         * @property {string} type `controlchange-generalpurposecontroller6`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-generalpurposecontroller7** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-generalpurposecontroller7\n         *\n         * @type {object}\n         * @property {string} type `controlchange-generalpurposecontroller7`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-generalpurposecontroller8** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-generalpurposecontroller8\n         *\n         * @type {object}\n         * @property {string} type `controlchange-generalpurposecontroller8`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-portamentocontrol** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-portamentocontrol\n         *\n         * @type {object}\n         * @property {string} type `controlchange-portamentocontrol`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-highresolutionvelocityprefix** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-highresolutionvelocityprefix\n         *\n         * @type {object}\n         * @property {string} type `controlchange-highresolutionvelocityprefix`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-effect1depth** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-effect1depth\n         *\n         * @type {object}\n         * @property {string} type `controlchange-effect1depth`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-effect2depth** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-effect2depth\n         *\n         * @type {object}\n         * @property {string} type `controlchange-effect2depth`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-effect3depth** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-effect3depth\n         *\n         * @type {object}\n         * @property {string} type `controlchange-effect3depth`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-effect4depth** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-effect4depth\n         *\n         * @type {object}\n         * @property {string} type `controlchange-effect4depth`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-effect5depth** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-effect5depth\n         *\n         * @type {object}\n         * @property {string} type `controlchange-effect5depth`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-dataincrement** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-dataincrement\n         *\n         * @type {object}\n         * @property {string} type `controlchange-dataincrement`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-datadecrement** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-datadecrement\n         *\n         * @type {object}\n         * @property {string} type `controlchange-datadecrement`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-nonregisteredparameterfine** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-nonregisteredparameterfine\n         *\n         * @type {object}\n         * @property {string} type `controlchange-nonregisteredparameterfine`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-nonregisteredparametercoarse** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-nonregisteredparametercoarse\n         *\n         * @type {object}\n         * @property {string} type `controlchange-nonregisteredparametercoarse`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-registeredparameterfine** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-registeredparameterfine\n         *\n         * @type {object}\n         * @property {string} type `controlchange-registeredparameterfine`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-registeredparametercoarse** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-registeredparametercoarse\n         *\n         * @type {object}\n         * @property {string} type `controlchange-registeredparametercoarse`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-allsoundoff** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-allsoundoff\n         *\n         * @type {object}\n         * @property {string} type `controlchange-allsoundoff`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-resetallcontrollers** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-resetallcontrollers\n         *\n         * @type {object}\n         * @property {string} type `controlchange-resetallcontrollers`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-localcontrol** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-localcontrol\n         *\n         * @type {object}\n         * @property {string} type `controlchange-localcontrol`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-allnotesoff** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-allnotesoff\n         *\n         * @type {object}\n         * @property {string} type `controlchange-allnotesoff`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-omnimodeoff** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-omnimodeoff\n         *\n         * @type {object}\n         * @property {string} type `controlchange-omnimodeoff`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-omnimodeon** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-omnimodeon\n         *\n         * @type {object}\n         * @property {string} type `controlchange-omnimodeon`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-monomodeon** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-monomodeon\n         *\n         * @type {object}\n         * @property {string} type `controlchange-monomodeon`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        /**\n         * Event emitted when a **controlchange-polymodeon** MIDI message has been\n         * received.\n         *\n         * @event InputChannel#controlchange-polymodeon\n         *\n         * @type {object}\n         * @property {string} type `controlchange-polymodeon`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {object} controller\n         * @property {object} controller.number The number of the controller.\n         * @property {object} controller.name The usual name or function of the controller.\n         * @property {object} controller.description A user-friendly representation of the\n         * controller's default function\n         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n         */\n\n        const namedEvent = Object.assign({}, event);\n        namedEvent.type = `${event.type}-` + Enumerations.CONTROL_CHANGE_MESSAGES[data1].name;\n        delete namedEvent.subtype; // Dispatch controlchange-\"function\" events only if the \"function\" is defined (not the generic\n        // controllerXXX nomenclature)\n\n        if (namedEvent.type.indexOf(\"controller\") !== 0) {\n          this.emit(namedEvent.type, namedEvent);\n        } // Trigger channel mode message events (if appropriate)\n\n\n        if (event.message.dataBytes[0] >= 120) this._parseChannelModeMessage(event); // Parse the inbound event to see if its part of an RPN/NRPN sequence\n\n        if (this.parameterNumberEventsEnabled && this._isRpnOrNrpnController(event.message.dataBytes[0])) {\n          this._parseEventForParameterNumber(event);\n        }\n      } else if (event.type === \"programchange\") {\n        /**\n         * Event emitted when a **program change** MIDI message has been received.\n         *\n         * @event InputChannel#programchange\n         *\n         * @type {object}\n         * @property {string} type `programchange`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {number} value The value expressed as an integer between 0 and 127.\n         * @property {number} rawValue  The raw MIDI value expressed as an integer between 0 and 127.\n         */\n        event.value = data1;\n        event.rawValue = event.value;\n      } else if (event.type === \"channelaftertouch\") {\n        /**\n         * Event emitted when a control change MIDI message has been received.\n         *\n         * @event InputChannel#channelaftertouch\n         *\n         * @type {object}\n         * @property {string} type `channelaftertouch`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The raw MIDI value expressed as an integer between 0 and 127.\n         */\n        event.value = Utilities.from7bitToFloat(data1);\n        event.rawValue = data1;\n      } else if (event.type === \"pitchbend\") {\n        /**\n         * Event emitted when a pitch bend MIDI message has been received.\n         *\n         * @event InputChannel#pitchbend\n         *\n         * @type {object}\n         * @property {string} type `pitchbend`\n         *\n         * @property {InputChannel} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         * @property {Message} message A [`Message`](Message) object containing information about the\n         * incoming MIDI message.\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         *\n         * @property {number} value The value expressed as a float between 0 and 1.\n         * @property {number} rawValue The raw MIDI value expressed as an integer (between 0 and\n         * 16383).\n         */\n        event.value = ((data2 << 7) + data1 - 8192) / 8192;\n        event.rawValue = (data2 << 7) + data1;\n      } else {\n        event.type = \"unknownmessage\";\n      }\n\n      this.emit(event.type, event);\n    }\n    /**\n     * @param e {Object}\n     * @private\n     */\n\n\n    _parseChannelModeMessage(e) {\n      // Make a shallow copy of the incoming event so we can use it as the new event.\n      const event = Object.assign({}, e);\n      event.type = event.controller.name;\n      /**\n       * Event emitted when an \"all sound off\" channel-mode MIDI message has been received.\n       *\n       * @event InputChannel#allsoundoff\n       *\n       * @type {object}\n       * @property {string} type `allsoundoff`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       */\n\n      /**\n       * Event emitted when a \"reset all controllers\" channel-mode MIDI message has been received.\n       *\n       * @event InputChannel#resetallcontrollers\n       *\n       * @type {object}\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       */\n\n      /**\n       * Event emitted when a \"local control\" channel-mode MIDI message has been received. The value\n       * property of the event is set to either `true` (local control on) of `false` (local control\n       * off).\n       *\n       * @event InputChannel#localcontrol\n       *\n       * @type {object}\n       * @property {string} type `localcontrol`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {boolean} value For local control on, the value is `true`. For local control off,\n       * the value is `false`.\n       * @property {boolean} rawValue For local control on, the value is `127`. For local control off,\n       * the value is `0`.\n       */\n\n      if (event.type === \"localcontrol\") {\n        event.value = event.message.data[2] === 127 ? true : false;\n        event.rawValue = event.message.data[2];\n      }\n      /**\n       * Event emitted when an \"all notes off\" channel-mode MIDI message has been received.\n       *\n       * @event InputChannel#allnotesoff\n       *\n       * @type {object}\n       * @property {string} type `allnotesoff`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       */\n\n      /**\n       * Event emitted when an \"omni mode\" channel-mode MIDI message has been received. The value\n       * property of the event is set to either `true` (omni mode on) of `false` (omni mode off).\n       *\n       * @event InputChannel#omnimode\n       *\n       * @type {object}\n       * @property {string} type `\"omnimode\"`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {boolean} value The value is `true` for omni mode on and false for omni mode off.\n       * @property {boolean} rawValue The raw MIDI value\n       */\n\n\n      if (event.type === \"omnimodeon\") {\n        event.type = \"omnimode\";\n        event.value = true;\n        event.rawValue = event.message.data[2];\n      } else if (event.type === \"omnimodeoff\") {\n        event.type = \"omnimode\";\n        event.value = false;\n        event.rawValue = event.message.data[2];\n      }\n      /**\n       * Event emitted when a \"mono/poly mode\" MIDI message has been received. The value property of\n       * the event is set to either `true` (mono mode on / poly mode off) or `false` (mono mode off /\n       * poly mode on).\n       *\n       * @event InputChannel#monomode\n       *\n       * @type {object}\n       * @property {string} type `monomode`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {boolean} value The value is `true` for omni mode on and false for omni mode off.\n       * @property {boolean} rawValue The raw MIDI value\n       */\n\n\n      if (event.type === \"monomodeon\") {\n        event.type = \"monomode\";\n        event.value = true;\n        event.rawValue = event.message.data[2];\n      } else if (event.type === \"polymodeon\") {\n        event.type = \"monomode\";\n        event.value = false;\n        event.rawValue = event.message.data[2];\n      }\n\n      this.emit(event.type, event);\n    }\n    /**\n     * Parses inbound events to identify RPN/NRPN sequences.\n     * @param e Event\n     * @private\n     */\n\n\n    _parseEventForParameterNumber(event) {\n      // To make it more legible\n      const controller = event.message.dataBytes[0];\n      const value = event.message.dataBytes[1]; // A. Check if the message is the start of an RPN (101) or NRPN (99) parameter declaration.\n\n      if (controller === 99 || controller === 101) {\n        this._nrpnBuffer = [];\n        this._rpnBuffer = [];\n\n        if (controller === 99) {\n          // 99\n          this._nrpnBuffer = [event.message];\n        } else {\n          // 101\n          // 127 is a reset so we ignore it\n          if (value !== 127) this._rpnBuffer = [event.message];\n        } // B. Check if the message is the end of an RPN (100) or NRPN (98) parameter declaration.\n\n      } else if (controller === 98 || controller === 100) {\n        if (controller === 98) {\n          // 98\n          // Flush the other buffer (they are mutually exclusive)\n          this._rpnBuffer = []; // Check if we are in sequence\n\n          if (this._nrpnBuffer.length === 1) {\n            this._nrpnBuffer.push(event.message);\n          } else {\n            this._nrpnBuffer = []; // out of sequence\n          }\n        } else {\n          // 100\n          // Flush the other buffer (they are mutually exclusive)\n          this._nrpnBuffer = []; // 127 is a reset so we ignore it\n\n          if (this._rpnBuffer.length === 1 && value !== 127) {\n            this._rpnBuffer.push(event.message);\n          } else {\n            this._rpnBuffer = []; // out of sequence or reset\n          }\n        } // C. Check if the message is for data entry (6, 38, 96 or 97). Those messages trigger events.\n\n      } else if (controller === 6 || controller === 38 || controller === 96 || controller === 97) {\n        if (this._rpnBuffer.length === 2) {\n          this._dispatchParameterNumberEvent(\"rpn\", this._rpnBuffer[0].dataBytes[1], this._rpnBuffer[1].dataBytes[1], event);\n        } else if (this._nrpnBuffer.length === 2) {\n          this._dispatchParameterNumberEvent(\"nrpn\", this._nrpnBuffer[0].dataBytes[1], this._nrpnBuffer[1].dataBytes[1], event);\n        } else {\n          this._nrpnBuffer = [];\n          this._rpnBuffer = [];\n        }\n      }\n    }\n    /**\n     * Indicates whether the specified controller can be part of an RPN or NRPN sequence\n     * @param controller\n     * @returns {boolean}\n     * @private\n     */\n\n\n    _isRpnOrNrpnController(controller) {\n      return controller === 6 || controller === 38 || controller === 96 || controller === 97 || controller === 98 || controller === 99 || controller === 100 || controller === 101;\n    }\n    /**\n     * @private\n     */\n\n\n    _dispatchParameterNumberEvent(type, paramMsb, paramLsb, e) {\n      type = type === \"nrpn\" ? \"nrpn\" : \"rpn\";\n      /**\n       * Event emitted when an **RPN data entry coarse** message is received on the input. The\n       * specific parameter to which the message applies can be found in the event's `parameter`\n       * property. It is one of the ones defined in\n       * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n       *\n       * @event InputChannel#rpn-dataentrycoarse\n       *\n       * @type {object}\n       *\n       * @property {string} type `rpn-dataentrycoarse`\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {string} parameter The registered parameter's name\n       * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n       * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n       * @property {number} value The received value as a normalized number between 0 and 1.\n       * @property {number} rawValue The value as received (0-127)\n       */\n\n      /**\n       * Event emitted when an **RPN data entry fine** message is received on the input. The\n       * specific parameter to which the message applies can be found in the event's `parameter`\n       * property. It is one of the ones defined in\n       * [`EnumerationsREGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n       *\n       * @event InputChannel#rpn-dataentryfine\n       *\n       * @type {object}\n       *\n       * @property {string} type `rpn-dataentryfine`\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {string} parameter The registered parameter's name\n       * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n       * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n       * @property {number} value The received value as a normalized number between 0 and 1.\n       * @property {number} rawValue The value as received (0-127)\n       */\n\n      /**\n       * Event emitted when an **RPN data increment** message is received on the input. The specific\n       * parameter to which the message applies can be found in the event's `parameter` property. It\n       * is one of the ones defined in\n       * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n       *\n       * @event InputChannel#rpn-dataincrement\n       *\n       * @type {object}\n       *\n       * @property {string} type `rpn-dataincrement`\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {string} parameter The registered parameter's name\n       * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n       * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n       * @property {number} value The received value as a normalized number between 0 and 1.\n       * @property {number} rawValue The value as received (0-127)\n       */\n\n      /**\n       * Event emitted when an **RPN data decrement** message is received on the input. The specific\n       * parameter to which the message applies can be found in the event's `parameter` property. It\n       * is one of the ones defined in\n       * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n       *\n       * @event InputChannel#rpn-datadecrement\n       *\n       * @type {object}\n       *\n       * @property {string} type `rpn-datadecrement`\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {string} parameter The registered parameter's name\n       * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n       * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n       * @property {number} value The received value as a normalized number between 0 and 1.\n       * @property {number} rawValue The value as received (0-127)\n       */\n\n      /**\n       * Event emitted when an **NRPN data entry coarse** message is received on the input. The\n       * specific parameter to which the message applies can be found in the event's `parameter`\n       * property. It is one of the ones defined in\n       * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n       *\n       * @event InputChannel#nrpn-dataentrycoarse\n       *\n       * @type {object}\n       *\n       * @property {string} type `nrpn-dataentrycoarse`\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {string} parameter The registered parameter's name\n       * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n       * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n       * @property {number} value The received value as a normalized number between 0 and 1.\n       * @property {number} rawValue The value as received (0-127)\n       */\n\n      /**\n       * Event emitted when an **NRPN data entry fine** message is received on the input. The\n       * specific parameter to which the message applies can be found in the event's `parameter`\n       * property. It is one of the ones defined in\n       * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n       *\n       * @event InputChannel#nrpn-dataentryfine\n       *\n       * @type {object}\n       *\n       * @property {string} type `nrpn-dataentryfine`\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {string} parameter The registered parameter's name\n       * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n       * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n       * @property {number} value The received value as a normalized number between 0 and 1.\n       * @property {number} rawValue The value as received (0-127)\n       */\n\n      /**\n       * Event emitted when an **NRPN data increment** message is received on the input. The specific\n       * parameter to which the message applies can be found in the event's `parameter` property. It\n       * is one of the ones defined in\n       * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n       *\n       * @event InputChannel#nrpn-dataincrement\n       *\n       * @type {object}\n       *\n       * @property {string} type `nrpn-dataincrement`\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {string} parameter The registered parameter's name\n       * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n       * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n       * @property {number} value The received value as a normalized number between 0 and 1.\n       * @property {number} rawValue The value as received (0-127)\n       */\n\n      /**\n       * Event emitted when an **NRPN data decrement** message is received on the input. The specific\n       * parameter to which the message applies can be found in the event's `parameter` property. It\n       * is one of the ones defined in\n       * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n       *\n       * @event InputChannel#nrpn-datadecrement\n       *\n       * @type {object}\n       *\n       * @property {string} type `nrpn-datadecrement`\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {string} parameter The registered parameter's name\n       * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n       * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n       * @property {number} value The received value as a normalized number between 0 and 1.\n       * @property {number} rawValue The value as received (0-127)\n       */\n\n      const event = {\n        target: e.target,\n        timestamp: e.timestamp,\n        message: e.message,\n        parameterMsb: paramMsb,\n        parameterLsb: paramLsb,\n        value: Utilities.from7bitToFloat(e.message.dataBytes[1]),\n        rawValue: e.message.dataBytes[1]\n      }; // Identify the parameter (by name for RPN and by number for NRPN)\n\n      if (type === \"rpn\") {\n        event.parameter = Object.keys(Enumerations.REGISTERED_PARAMETERS).find(key => {\n          return Enumerations.REGISTERED_PARAMETERS[key][0] === paramMsb && Enumerations.REGISTERED_PARAMETERS[key][1] === paramLsb;\n        });\n      } else {\n        event.parameter = (paramMsb << 7) + paramLsb;\n      } // Type and subtype\n\n\n      const subtype = Enumerations.CONTROL_CHANGE_MESSAGES[e.message.dataBytes[0]].name; // Emit specific event\n\n      event.type = `${type}-${subtype}`;\n      this.emit(event.type, event); // Begin Legacy Block (remove in v4)\n\n      const legacyEvent = Object.assign({}, event);\n\n      if (legacyEvent.type === \"nrpn-dataincrement\") {\n        legacyEvent.type = \"nrpn-databuttonincrement\";\n      } else if (legacyEvent.type === \"nrpn-datadecrement\") {\n        legacyEvent.type = \"nrpn-databuttondecrement\";\n      } else if (legacyEvent.type === \"rpn-dataincrement\") {\n        legacyEvent.type = \"rpn-databuttonincrement\";\n      } else if (legacyEvent.type === \"rpn-datadecrement\") {\n        legacyEvent.type = \"rpn-databuttondecrement\";\n      }\n\n      this.emit(legacyEvent.type, legacyEvent); // End Legacy Block\n\n      /**\n       * Event emitted when any NRPN message is received on the input. There are four subtypes of NRPN\n       * messages:\n       *\n       *   * `nrpn-dataentrycoarse`\n       *   * `nrpn-dataentryfine`\n       *   * `nrpn-dataincrement`\n       *   * `nrpn-datadecrement`\n       *\n       * The parameter to which the message applies can be found in the event's `parameter` property.\n       *\n       * @event InputChannel#nrpn\n       *\n       * @type {object}\n       *\n       * @property {string} type `nrpn`\n       * @property {string} subtype The precise type of NRPN message that was received.\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} parameter The non-registered parameter number (0-16383)\n       * @property {number} parameterMsb The MSB portion of the non-registered parameter number\n       * (0-127)\n       * @property {number} parameterLsb: The LSB portion of the non-registered parameter number\n       * (0-127)\n       * @property {number} value The received value as a normalized number between 0 and 1.\n       * @property {number} rawValue The value as received (0-127)\n       */\n\n      /**\n       * Event emitted when any RPN message is received on the input. There are four subtypes of RPN\n       * messages:\n       *\n       *   * `rpn-dataentrycoarse`\n       *   * `rpn-dataentryfine`\n       *   * `rpn-dataincrement`\n       *   * `rpn-datadecrement`\n       *\n       * The parameter to which the message applies can be found in the event's `parameter` property.\n       * It is one of the ones defined in\n       * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n       *\n       * @event InputChannel#rpn\n       *\n       * @type {object}\n       *\n       * @property {string} type `rpn`\n       * @property {string} subtype The precise type of RPN message that was received.\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {string} parameter The registered parameter's name\n       * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n       * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n       * @property {number} value The received value as a normalized number between 0 and 1.\n       * @property {number} rawValue The value as received (0-127)\n       */\n      // Emit general event\n\n      event.type = type;\n      event.subtype = subtype;\n      this.emit(event.type, event);\n    }\n    /**\n     * @deprecated since version 3.\n     * @private\n     */\n\n\n    getChannelModeByNumber(number) {\n      if (wm.validation) {\n        console.warn(\"The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class.\");\n        number = Math.floor(number);\n      }\n\n      return Utilities.getChannelModeByNumber(number);\n    }\n    /**\n     * @deprecated since version 3.\n     * @private\n     */\n\n\n    getCcNameByNumber(number) {\n      if (wm.validation) {\n        console.warn(\"The 'getCcNameByNumber()' method has been moved to the 'Utilities' class.\");\n        number = parseInt(number);\n        if (!(number >= 0 && number <= 127)) throw new RangeError(\"Invalid control change number.\");\n      }\n\n      return Utilities.getCcNameByNumber(number);\n    }\n    /**\n     * Returns the playing status of the specified note (`true` if the note is currently playing,\n     * `false` if it is not). The `note` parameter can be an unsigned integer (0-127), a note\n     * identifier (`\"C4\"`, `\"G#5\"`, etc.) or a [`Note`]{@link Note} object.\n     *\n     * IF the note is specified using an integer (0-127), no octave offset will be applied.\n     *\n     * @param {number|string|Note} note The note to get the state for. The\n     * [`octaveOffset`](#octaveOffset) (channel, input and global) will be factored in for note\n     * identifiers and [`Note`]{@link Note} objects.\n     * @returns {boolean}\n     * @since version 3.0.0\n     */\n\n\n    getNoteState(note) {\n      // If it's a note object, we simply use the identifier\n      if (note instanceof Note) note = note.identifier;\n      const number = Utilities.guessNoteNumber(note, wm.octaveOffset + this.input.octaveOffset + this.octaveOffset);\n      return this.notesState[number];\n    }\n    /**\n     * An integer to offset the reported octave of incoming note-specific messages (`noteon`,\n     * `noteoff` and `keyaftertouch`). By default, middle C (MIDI note number 60) is placed on the 4th\n     * octave (C4).\n     *\n     * If, for example, `octaveOffset` is set to 2, MIDI note number 60 will be reported as C6. If\n     * `octaveOffset` is set to -1, MIDI note number 60 will be reported as C3.\n     *\n     * Note that this value is combined with the global offset value defined by\n     * [`WebMidi.octaveOffset`](WebMidi#octaveOffset) object and with the value defined on the parent\n     * input object with [`Input.octaveOffset`](Input#octaveOffset).\n     *\n     * @type {number}\n     *\n     * @since 3.0\n     */\n\n\n    get octaveOffset() {\n      return this._octaveOffset;\n    }\n\n    set octaveOffset(value) {\n      if (this.validation) {\n        value = parseInt(value);\n        if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n      }\n\n      this._octaveOffset = value;\n    }\n    /**\n     * The [`Input`](Input) this channel belongs to.\n     * @type {Input}\n     * @since 3.0\n     */\n\n\n    get input() {\n      return this._input;\n    }\n    /**\n     * This channel's MIDI number (1-16).\n     * @type {number}\n     * @since 3.0\n     */\n\n\n    get number() {\n      return this._number;\n    }\n    /**\n     * Whether RPN/NRPN events are parsed and dispatched.\n     * @type {boolean}\n     * @since 3.0\n     * @deprecated Use parameterNumberEventsEnabled instead.\n     * @private\n     */\n\n\n    get nrpnEventsEnabled() {\n      return this.parameterNumberEventsEnabled;\n    }\n\n    set nrpnEventsEnabled(value) {\n      if (this.validation) {\n        value = !!value;\n      }\n\n      this.parameterNumberEventsEnabled = value;\n    }\n\n  }\n\n  /**\n   * The `Message` class represents a single MIDI message. It has several properties that make it\n   * easy to make sense of the binary data it contains.\n   *\n   * @license Apache-2.0\n   * @since 3.0.0\n   */\n\n  class Message {\n    /**\n     * Creates a new `Message` object from raw MIDI data.\n     *\n     * @param {Uint8Array} data The raw data of the MIDI message as a\n     * [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)\n     * of integers between `0` and `255`.\n     */\n    constructor(data) {\n      /**\n       * A\n       * [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)\n       * containing the bytes of the MIDI message. Each byte is an integer between `0` and `255`.\n       *\n       * @type {Uint8Array}\n       * @readonly\n       */\n      this.rawData = data;\n      /**\n       * An array containing all the bytes of the MIDI message. Each byte is an integer between `0`\n       * and `255`.\n       *\n       * @type {number[]}\n       * @readonly\n       */\n\n      this.data = Array.from(this.rawData);\n      /**\n       * The MIDI status byte of the message as an integer between `0` and `255`.\n       *\n       * @type {number}\n       * @readonly\n       */\n\n      this.statusByte = this.rawData[0];\n      /**\n       * A\n       * [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)\n       * of the data byte(s) of the MIDI message. When the message is a system exclusive message\n       * (sysex), `rawDataBytes` explicitly excludes the manufacturer ID and the sysex end byte so\n       * only the actual data is included.\n       *\n       * @type {Uint8Array}\n       * @readonly\n       */\n\n      this.rawDataBytes = this.rawData.slice(1);\n      /**\n       * An array of the the data byte(s) of the MIDI message (as opposed to the status byte). When\n       * the message is a system exclusive message (sysex), `dataBytes` explicitly excludes the\n       * manufacturer ID and the sysex end byte so only the actual data is included.\n       *\n       * @type {number[]}\n       * @readonly\n       */\n\n      this.dataBytes = this.data.slice(1);\n      /**\n       * A boolean indicating whether the MIDI message is a channel-specific message.\n       *\n       * @type {boolean}\n       * @readonly\n       */\n\n      this.isChannelMessage = false;\n      /**\n       * A boolean indicating whether the MIDI message is a system message (not specific to a\n       * channel).\n       *\n       * @type {boolean}\n       * @readonly\n       */\n\n      this.isSystemMessage = false;\n      /**\n       * An integer identifying the MIDI command. For channel-specific messages, the value is 4-bit\n       * and will be between `8` and `14`. For system messages, the value will be between `240` and\n       * `255`.\n       *\n       * @type {number}\n       * @readonly\n       */\n\n      this.command = undefined;\n      /**\n       * The MIDI channel number (`1` - `16`) that the message is targeting. This is only for\n       * channel-specific messages. For system messages, this will be left `undefined`.\n       *\n       * @type {number}\n       * @readonly\n       */\n\n      this.channel = undefined;\n      /**\n       * When the message is a system exclusive message (sysex), this property contains an array with\n       * either 1 or 3 entries that identify the manufacturer targeted by the message.\n       *\n       * To know how to translate these entries into manufacturer names, check out the official list:\n       * https://www.midi.org/specifications-old/item/manufacturer-id-numbers\n       *\n       * @type {number[]}\n       * @readonly\n       */\n\n      this.manufacturerId = undefined;\n      /**\n       * The type of message as a string (`\"noteon\"`, `\"controlchange\"`, `\"sysex\"`, etc.)\n       *\n       * @type {string}\n       * @readonly\n       */\n\n      this.type = undefined; // Assign values to property that vary according to whether they are channel-specific or system\n\n      if (this.statusByte < 240) {\n        this.isChannelMessage = true;\n        this.command = this.statusByte >> 4;\n        this.channel = (this.statusByte & 0b00001111) + 1;\n      } else {\n        this.isSystemMessage = true;\n        this.command = this.statusByte;\n      } // Assign type (depending on whether the message is channel-specific or system)\n\n\n      if (this.isChannelMessage) {\n        this.type = Utilities.getPropertyByValue(Enumerations.CHANNEL_MESSAGES, this.command);\n      } else if (this.isSystemMessage) {\n        this.type = Utilities.getPropertyByValue(Enumerations.SYSTEM_MESSAGES, this.command);\n      } // When the message is a sysex message, we add a manufacturer property and strip out the id from\n      // dataBytes and rawDataBytes.\n\n\n      if (this.statusByte === Enumerations.SYSTEM_MESSAGES.sysex) {\n        if (this.dataBytes[0] === 0) {\n          this.manufacturerId = this.dataBytes.slice(0, 3);\n          this.dataBytes = this.dataBytes.slice(3, this.rawDataBytes.length - 1);\n          this.rawDataBytes = this.rawDataBytes.slice(3, this.rawDataBytes.length - 1);\n        } else {\n          this.manufacturerId = [this.dataBytes[0]];\n          this.dataBytes = this.dataBytes.slice(1, this.dataBytes.length - 1);\n          this.rawDataBytes = this.rawDataBytes.slice(1, this.rawDataBytes.length - 1);\n        }\n      }\n    }\n\n  }\n\n  /**\n   * The `Input` class represents a single MIDI input port. This object is automatically instantiated\n   * by the library according to the host's MIDI subsystem and does not need to be directly\n   * instantiated. Instead, you can access all `Input` objects by referring to the\n   * [`WebMidi.inputs`](WebMidi#inputs) array. You can also retrieve inputs by using methods such as\n   * [`WebMidi.getInputByName()`](WebMidi#getInputByName) and\n   * [`WebMidi.getInputById()`](WebMidi#getInputById).\n   *\n   * Note that a single MIDI device may expose several inputs and/or outputs.\n   *\n   * **Important**: the `Input` class does not directly fire channel-specific MIDI messages\n   * (such as [`noteon`](InputChannel#event:noteon) or\n   * [`controlchange`](InputChannel#event:controlchange), etc.). The [`InputChannel`](InputChannel)\n   * object does that. However, you can still use the\n   * [`Input.addListener()`](#addListener) method to listen to channel-specific events on multiple\n   * [`InputChannel`](InputChannel) objects at once.\n   *\n   * @fires Input#opened\n   * @fires Input#disconnected\n   * @fires Input#closed\n   * @fires Input#midimessage\n   *\n   * @fires Input#sysex\n   * @fires Input#timecode\n   * @fires Input#songposition\n   * @fires Input#songselect\n   * @fires Input#tunerequest\n   * @fires Input#clock\n   * @fires Input#start\n   * @fires Input#continue\n   * @fires Input#stop\n   * @fires Input#activesensing\n   * @fires Input#reset\n   *\n   * @fires Input#unknownmidimessage\n   *\n   * @extends EventEmitter\n   * @license Apache-2.0\n   */\n\n  class Input extends EventEmitter {\n    /**\n     * Creates an `Input` object.\n     *\n     * @param {MIDIInput} midiInput [`MIDIInput`](https://developer.mozilla.org/en-US/docs/Web/API/MIDIInput)\n     * object as provided by the MIDI subsystem (Web MIDI API).\n     */\n    constructor(midiInput) {\n      super();\n      /**\n       * Reference to the actual MIDIInput object\n       * @private\n       */\n\n      this._midiInput = midiInput;\n      /**\n       * @type {number}\n       * @private\n       */\n\n      this._octaveOffset = 0;\n      /**\n       * Array containing the 16 [`InputChannel`](InputChannel) objects available for this `Input`. The\n       * channels are numbered 1 through 16.\n       *\n       * @type {InputChannel[]}\n       */\n\n      this.channels = [];\n\n      for (let i = 1; i <= 16; i++) this.channels[i] = new InputChannel(this, i);\n      /**\n       * @type {Forwarder[]}\n       * @private\n       */\n\n\n      this._forwarders = []; // Setup listeners\n\n      this._midiInput.onstatechange = this._onStateChange.bind(this);\n      this._midiInput.onmidimessage = this._onMidiMessage.bind(this);\n    }\n    /**\n     * Destroys the `Input` by removing all listeners, emptying the [`channels`](#channels) array and\n     * unlinking the MIDI subsystem. This is mostly for internal use.\n     *\n     * @returns {Promise<void>}\n     */\n\n\n    async destroy() {\n      this.removeListener();\n      this.channels.forEach(ch => ch.destroy());\n      this.channels = [];\n      this._forwarders = [];\n\n      if (this._midiInput) {\n        this._midiInput.onstatechange = null;\n        this._midiInput.onmidimessage = null;\n      }\n\n      await this.close();\n      this._midiInput = null;\n    }\n    /**\n     * Executed when a `\"statechange\"` event occurs.\n     *\n     * @param e\n     * @private\n     */\n\n\n    _onStateChange(e) {\n      let event = {\n        timestamp: wm.time,\n        target: this,\n        port: this // for consistency\n\n      };\n\n      if (e.port.connection === \"open\") {\n        /**\n         * Event emitted when the `Input` has been opened by calling the [`open()`]{@link #open}\n         * method.\n         *\n         * @event Input#opened\n         * @type {object}\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         * @property {string} type `opened`\n         * @property {Input} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         */\n        event.type = \"opened\";\n        this.emit(\"opened\", event);\n      } else if (e.port.connection === \"closed\" && e.port.state === \"connected\") {\n        /**\n         * Event emitted when the `Input` has been closed by calling the\n         * [`close()`]{@link #close} method.\n         *\n         * @event Input#closed\n         * @type {object}\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         * @property {string} type `closed`\n         * @property {Input} target The object that dispatched the event.\n         * @property {Input} port The `Input` that triggered the event.\n         */\n        event.type = \"closed\";\n        this.emit(\"closed\", event);\n      } else if (e.port.connection === \"closed\" && e.port.state === \"disconnected\") {\n        /**\n         * Event emitted when the `Input` becomes unavailable. This event is typically fired\n         * when the MIDI device is unplugged.\n         *\n         * @event Input#disconnected\n         * @type {object}\n         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         * @property {string} type `disconnected`\n         * @property {Input} port Object with properties describing the {@link Input} that was\n         * disconnected. This is not the actual `Input` as it is no longer available.\n         * @property {Input} target The object that dispatched the event.\n         */\n        event.type = \"disconnected\";\n        event.port = {\n          connection: e.port.connection,\n          id: e.port.id,\n          manufacturer: e.port.manufacturer,\n          name: e.port.name,\n          state: e.port.state,\n          type: e.port.type\n        };\n        this.emit(\"disconnected\", event);\n      } else if (e.port.connection === \"pending\" && e.port.state === \"disconnected\") ; else {\n        console.warn(\"This statechange event was not caught: \", e.port.connection, e.port.state);\n      }\n    }\n    /**\n     * Executed when a `\"midimessage\"` event is received\n     * @param e\n     * @private\n     */\n\n\n    _onMidiMessage(e) {\n      // Create Message object from MIDI data\n      const message = new Message(e.data);\n      /**\n       * Event emitted when any MIDI message is received on an `Input`.\n       *\n       * @event Input#midimessage\n       *\n       * @type {object}\n       *\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Input} target The object that dispatched the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `midimessage`\n       *\n       * @since 2.1\n       */\n\n      const event = {\n        port: this,\n        target: this,\n        message: message,\n        timestamp: e.timeStamp,\n        type: \"midimessage\",\n        data: message.data,\n        // @deprecated (will be removed in v4)\n        rawData: message.data,\n        // @deprecated (will be removed in v4)\n        statusByte: message.data[0],\n        // @deprecated (will be removed in v4)\n        dataBytes: message.dataBytes // @deprecated (will be removed in v4)\n\n      };\n      this.emit(\"midimessage\", event); // Messages are forwarded to InputChannel if they are channel messages or parsed locally for\n      // system messages.\n\n      if (message.isSystemMessage) {\n        // system messages\n        this._parseEvent(event);\n      } else if (message.isChannelMessage) {\n        // channel messages\n        this.channels[message.channel]._processMidiMessageEvent(event);\n      } // Forward message if forwarders have been defined\n\n\n      this._forwarders.forEach(forwarder => forwarder.forward(message));\n    }\n    /**\n     * @private\n     */\n\n\n    _parseEvent(e) {\n      // Make a shallow copy of the incoming event so we can use it as the new event.\n      const event = Object.assign({}, e);\n      event.type = event.message.type || \"unknownmidimessage\"; // Add custom property for 'songselect'\n\n      if (event.type === \"songselect\") {\n        event.song = e.data[1] + 1; // deprecated\n\n        event.value = e.data[1];\n        event.rawValue = event.value;\n      } // Emit event\n\n\n      this.emit(event.type, event);\n    }\n    /**\n     * Opens the input for usage. This is usually unnecessary as the port is opened automatically when\n     * WebMidi is enabled.\n     *\n     * @returns {Promise<Input>} The promise is fulfilled with the `Input` object.\n     */\n\n\n    async open() {\n      // Explicitly opens the port for usage. This is not mandatory. When the port is not explicitly\n      // opened, it is implicitly opened (asynchronously) when assigning a listener to the\n      // `onmidimessage` property of the `MIDIInput`. We do it explicitly so that 'connected' events\n      // are dispatched immediately and that we are ready to listen.\n      try {\n        await this._midiInput.open();\n      } catch (err) {\n        return Promise.reject(err);\n      }\n\n      return Promise.resolve(this);\n    }\n    /**\n     * Closes the input. When an input is closed, it cannot be used to listen to MIDI messages until\n     * the input is opened again by calling [`Input.open()`](Input#open).\n     *\n     * **Note**: if what you want to do is stop events from being dispatched, you should use\n     * [`eventsSuspended`](#eventsSuspended) instead.\n     *\n     * @returns {Promise<Input>} The promise is fulfilled with the `Input` object\n     */\n\n\n    async close() {\n      // We close the port. This triggers a statechange event which, in turn, will emit the 'closed'\n      // event.\n      if (!this._midiInput) return Promise.resolve(this);\n\n      try {\n        await this._midiInput.close();\n      } catch (err) {\n        return Promise.reject(err);\n      }\n\n      return Promise.resolve(this);\n    }\n    /**\n     * @private\n     * @deprecated since v3.0.0 (moved to 'Utilities' class)\n     */\n\n\n    getChannelModeByNumber() {\n      if (wm.validation) {\n        console.warn(\"The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class.\");\n      }\n    }\n    /**\n     * Adds an event listener that will trigger a function callback when the specified event is\n     * dispatched. The event usually is **input-wide** but can also be **channel-specific**.\n     *\n     * Input-wide events do not target a specific MIDI channel so it makes sense to listen for them\n     * at the `Input` level and not at the [`InputChannel`](InputChannel) level. Channel-specific\n     * events target a specific channel. Usually, in this case, you would add the listener to the\n     * [`InputChannel`](InputChannel) object. However, as a convenience, you can also listen to\n     * channel-specific events directly on an `Input`. This allows you to react to a channel-specific\n     * event no matter which channel it actually came through.\n     *\n     * When listening for an event, you simply need to specify the event name and the function to\n     * execute:\n     *\n     * ```javascript\n     * const listener = WebMidi.inputs[0].addListener(\"midimessage\", e => {\n     *   console.log(e);\n     * });\n     * ```\n     *\n     * Calling the function with an input-wide event (such as\n     * [`\"midimessage\"`]{@link #event:midimessage}), will return the [`Listener`](Listener) object\n     * that was created.\n     *\n     * If you call the function with a channel-specific event (such as\n     * [`\"noteon\"`]{@link InputChannel#event:noteon}), it will return an array of all\n     * [`Listener`](Listener) objects that were created (one for each channel):\n     *\n     * ```javascript\n     * const listeners = WebMidi.inputs[0].addListener(\"noteon\", someFunction);\n     * ```\n     *\n     * You can also specify which channels you want to add the listener to:\n     *\n     * ```javascript\n     * const listeners = WebMidi.inputs[0].addListener(\"noteon\", someFunction, {channels: [1, 2, 3]});\n     * ```\n     *\n     * In this case, `listeners` is an array containing 3 [`Listener`](Listener) objects. The order of\n     * the listeners in the array follows the order the channels were specified in.\n     *\n     * Note that, when adding channel-specific listeners, it is the [`InputChannel`](InputChannel)\n     * instance that actually gets a listener added and not the `Input` instance. You can check that\n     * by calling [`InputChannel.hasListener()`](InputChannel#hasListener()).\n     *\n     * There are 8 families of events you can listen to:\n     *\n     * 1. **MIDI System Common** Events (input-wide)\n     *\n     *    * [`songposition`]{@link Input#event:songposition}\n     *    * [`songselect`]{@link Input#event:songselect}\n     *    * [`sysex`]{@link Input#event:sysex}\n     *    * [`timecode`]{@link Input#event:timecode}\n     *    * [`tunerequest`]{@link Input#event:tunerequest}\n     *\n     * 2. **MIDI System Real-Time** Events (input-wide)\n     *\n     *    * [`clock`]{@link Input#event:clock}\n     *    * [`start`]{@link Input#event:start}\n     *    * [`continue`]{@link Input#event:continue}\n     *    * [`stop`]{@link Input#event:stop}\n     *    * [`activesensing`]{@link Input#event:activesensing}\n     *    * [`reset`]{@link Input#event:reset}\n     *\n     * 3. **State Change** Events (input-wide)\n     *\n     *    * [`opened`]{@link Input#event:opened}\n     *    * [`closed`]{@link Input#event:closed}\n     *    * [`disconnected`]{@link Input#event:disconnected}\n     *\n     * 4. **Catch-All** Events (input-wide)\n     *\n     *    * [`midimessage`]{@link Input#event:midimessage}\n     *    * [`unknownmidimessage`]{@link Input#event:unknownmidimessage}\n     *\n     * 5. **Channel Voice** Events (channel-specific)\n     *\n     *    * [`channelaftertouch`]{@link InputChannel#event:channelaftertouch}\n     *    * [`controlchange`]{@link InputChannel#event:controlchange}\n     *      * [`controlchange-controller0`]{@link InputChannel#event:controlchange-controller0}\n     *      * [`controlchange-controller1`]{@link InputChannel#event:controlchange-controller1}\n     *      * [`controlchange-controller2`]{@link InputChannel#event:controlchange-controller2}\n     *      * (...)\n     *      * [`controlchange-controller127`]{@link InputChannel#event:controlchange-controller127}\n     *    * [`keyaftertouch`]{@link InputChannel#event:keyaftertouch}\n     *    * [`noteoff`]{@link InputChannel#event:noteoff}\n     *    * [`noteon`]{@link InputChannel#event:noteon}\n     *    * [`pitchbend`]{@link InputChannel#event:pitchbend}\n     *    * [`programchange`]{@link InputChannel#event:programchange}\n     *\n     *    Note: you can listen for a specific control change message by using an event name like this:\n     *    `controlchange-controller23`, `controlchange-controller99`, `controlchange-controller122`,\n     *    etc.\n     *\n     * 6. **Channel Mode** Events (channel-specific)\n     *\n     *    * [`allnotesoff`]{@link InputChannel#event:allnotesoff}\n     *    * [`allsoundoff`]{@link InputChannel#event:allsoundoff}\n     *    * [`localcontrol`]{@link InputChannel#event:localcontrol}\n     *    * [`monomode`]{@link InputChannel#event:monomode}\n     *    * [`omnimode`]{@link InputChannel#event:omnimode}\n     *    * [`resetallcontrollers`]{@link InputChannel#event:resetallcontrollers}\n     *\n     * 7. **NRPN** Events (channel-specific)\n     *\n     *    * [`nrpn`]{@link InputChannel#event:nrpn}\n     *    * [`nrpn-dataentrycoarse`]{@link InputChannel#event:nrpn-dataentrycoarse}\n     *    * [`nrpn-dataentryfine`]{@link InputChannel#event:nrpn-dataentryfine}\n     *    * [`nrpn-dataincrement`]{@link InputChannel#event:nrpn-dataincrement}\n     *    * [`nrpn-datadecrement`]{@link InputChannel#event:nrpn-datadecrement}\n     *\n     * 8. **RPN** Events (channel-specific)\n     *\n     *    * [`rpn`]{@link InputChannel#event:rpn}\n     *    * [`rpn-dataentrycoarse`]{@link InputChannel#event:rpn-dataentrycoarse}\n     *    * [`rpn-dataentryfine`]{@link InputChannel#event:rpn-dataentryfine}\n     *    * [`rpn-dataincrement`]{@link InputChannel#event:rpn-dataincrement}\n     *    * [`rpn-datadecrement`]{@link InputChannel#event:rpn-datadecrement}\n     *\n     * @param event {string | EventEmitter.ANY_EVENT} The type of the event.\n     *\n     * @param listener {function} A callback function to execute when the specified event is detected.\n     * This function will receive an event parameter object. For details on this object's properties,\n     * check out the documentation for the various events (links above).\n     *\n     * @param {object} [options={}]\n     *\n     * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n     * callback function. This array is stored in the [`arguments`](Listener#arguments) property of\n     * the [`Listener`](Listener) object and can be retrieved or modified as desired.\n     *\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * An integer between 1 and 16 or an array of such integers representing the MIDI channel(s) to\n     * listen on. If no channel is specified, all channels will be used. This parameter is ignored for\n     * input-wide events.\n     *\n     * @param {object} [options.context=this] The value of `this` in the callback function.\n     *\n     * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n     * automatically expires.\n     *\n     * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n     * of the listeners array and thus be triggered before others.\n     *\n     * @param {number} [options.remaining=Infinity] The number of times after which the callback\n     * should automatically be removed.\n     *\n     * @returns {Listener|Listener[]} If the event is input-wide, a single [`Listener`](Listener)\n     * object is returned. If the event is channel-specific, an array of all the\n     * [`Listener`](Listener) objects is returned (one for each channel).\n     */\n\n\n    addListener(event, listener, options = {}) {\n      if (wm.validation) {\n        // Legacy compatibility\n        if (typeof options === \"function\") {\n          let channels = listener != undefined ? [].concat(listener) : undefined; // clone\n\n          listener = options;\n          options = {\n            channels: channels\n          };\n        }\n      } // Check if the event is channel-specific or input-wide\n\n\n      if (Enumerations.CHANNEL_EVENTS.includes(event)) {\n        // If no channel defined, use all.\n        if (options.channels === undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n        let listeners = [];\n        Utilities.sanitizeChannels(options.channels).forEach(ch => {\n          listeners.push(this.channels[ch].addListener(event, listener, options));\n        });\n        return listeners;\n      } else {\n        return super.addListener(event, listener, options);\n      }\n    }\n    /**\n     * Adds a one-time event listener that will trigger a function callback when the specified event\n     * happens. The event can be **channel-bound** or **input-wide**. Channel-bound events are\n     * dispatched by [`InputChannel`]{@link InputChannel} objects and are tied to a specific MIDI\n     * channel while input-wide events are dispatched by the `Input` object itself and are not tied\n     * to a specific channel.\n     *\n     * Calling the function with an input-wide event (such as\n     * [`\"midimessage\"`]{@link #event:midimessage}), will return the [`Listener`](Listener) object\n     * that was created.\n     *\n     * If you call the function with a channel-specific event (such as\n     * [`\"noteon\"`]{@link InputChannel#event:noteon}), it will return an array of all\n     * [`Listener`](Listener) objects that were created (one for each channel):\n     *\n     * ```javascript\n     * const listeners = WebMidi.inputs[0].addOneTimeListener(\"noteon\", someFunction);\n     * ```\n     *\n     * You can also specify which channels you want to add the listener to:\n     *\n     * ```javascript\n     * const listeners = WebMidi.inputs[0].addOneTimeListener(\"noteon\", someFunction, {channels: [1, 2, 3]});\n     * ```\n     *\n     * In this case, the `listeners` variable contains an array of 3 [`Listener`](Listener) objects.\n     *\n     * The code above will add a listener for the `\"noteon\"` event and call `someFunction` when the\n     * event is triggered on MIDI channels `1`, `2` or `3`.\n     *\n     * Note that, when adding events to channels, it is the [`InputChannel`](InputChannel) instance\n     * that actually gets a listener added and not the `Input` instance.\n     *\n     * Note: if you want to add a listener to a single MIDI channel you should probably do so directly\n     * on the [`InputChannel`](InputChannel) object itself.\n     *\n     * There are 8 families of events you can listen to:\n     *\n     * 1. **MIDI System Common** Events (input-wide)\n     *\n     *    * [`songposition`]{@link Input#event:songposition}\n     *    * [`songselect`]{@link Input#event:songselect}\n     *    * [`sysex`]{@link Input#event:sysex}\n     *    * [`timecode`]{@link Input#event:timecode}\n     *    * [`tunerequest`]{@link Input#event:tunerequest}\n     *\n     * 2. **MIDI System Real-Time** Events (input-wide)\n     *\n     *    * [`clock`]{@link Input#event:clock}\n     *    * [`start`]{@link Input#event:start}\n     *    * [`continue`]{@link Input#event:continue}\n     *    * [`stop`]{@link Input#event:stop}\n     *    * [`activesensing`]{@link Input#event:activesensing}\n     *    * [`reset`]{@link Input#event:reset}\n     *\n     * 3. **State Change** Events (input-wide)\n     *\n     *    * [`opened`]{@link Input#event:opened}\n     *    * [`closed`]{@link Input#event:closed}\n     *    * [`disconnected`]{@link Input#event:disconnected}\n     *\n     * 4. **Catch-All** Events (input-wide)\n     *\n     *    * [`midimessage`]{@link Input#event:midimessage}\n     *    * [`unknownmidimessage`]{@link Input#event:unknownmidimessage}\n     *\n     * 5. **Channel Voice** Events (channel-specific)\n     *\n     *    * [`channelaftertouch`]{@link InputChannel#event:channelaftertouch}\n     *    * [`controlchange`]{@link InputChannel#event:controlchange}\n     *      * [`controlchange-controller0`]{@link InputChannel#event:controlchange-controller0}\n     *      * [`controlchange-controller1`]{@link InputChannel#event:controlchange-controller1}\n     *      * [`controlchange-controller2`]{@link InputChannel#event:controlchange-controller2}\n     *      * (...)\n     *      * [`controlchange-controller127`]{@link InputChannel#event:controlchange-controller127}\n     *    * [`keyaftertouch`]{@link InputChannel#event:keyaftertouch}\n     *    * [`noteoff`]{@link InputChannel#event:noteoff}\n     *    * [`noteon`]{@link InputChannel#event:noteon}\n     *    * [`pitchbend`]{@link InputChannel#event:pitchbend}\n     *    * [`programchange`]{@link InputChannel#event:programchange}\n     *\n     *    Note: you can listen for a specific control change message by using an event name like this:\n     *    `controlchange-controller23`, `controlchange-controller99`, `controlchange-controller122`,\n     *    etc.\n     *\n     * 6. **Channel Mode** Events (channel-specific)\n     *\n     *    * [`allnotesoff`]{@link InputChannel#event:allnotesoff}\n     *    * [`allsoundoff`]{@link InputChannel#event:allsoundoff}\n     *    * [`localcontrol`]{@link InputChannel#event:localcontrol}\n     *    * [`monomode`]{@link InputChannel#event:monomode}\n     *    * [`omnimode`]{@link InputChannel#event:omnimode}\n     *    * [`resetallcontrollers`]{@link InputChannel#event:resetallcontrollers}\n     *\n     * 7. **NRPN** Events (channel-specific)\n     *\n     *    * [`nrpn`]{@link InputChannel#event:nrpn}\n     *    * [`nrpn-dataentrycoarse`]{@link InputChannel#event:nrpn-dataentrycoarse}\n     *    * [`nrpn-dataentryfine`]{@link InputChannel#event:nrpn-dataentryfine}\n     *    * [`nrpn-dataincrement`]{@link InputChannel#event:nrpn-dataincrement}\n     *    * [`nrpn-datadecrement`]{@link InputChannel#event:nrpn-datadecrement}\n     *\n     * 8. **RPN** Events (channel-specific)\n     *\n     *    * [`rpn`]{@link InputChannel#event:rpn}\n     *    * [`rpn-dataentrycoarse`]{@link InputChannel#event:rpn-dataentrycoarse}\n     *    * [`rpn-dataentryfine`]{@link InputChannel#event:rpn-dataentryfine}\n     *    * [`rpn-dataincrement`]{@link InputChannel#event:rpn-dataincrement}\n     *    * [`rpn-datadecrement`]{@link InputChannel#event:rpn-datadecrement}\n     *\n     * @param event {string} The type of the event.\n     *\n     * @param listener {function} A callback function to execute when the specified event is detected.\n     * This function will receive an event parameter object. For details on this object's properties,\n     * check out the documentation for the various events (links above).\n     *\n     * @param {object} [options={}]\n     *\n     * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n     * callback function. This array is stored in the [`arguments`](Listener#arguments) property of\n     * the [`Listener`](Listener) object and can be retrieved or modified as desired.\n     *\n     * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of\n     * such integers representing the MIDI channel(s) to listen on. This parameter is ignored for\n     * input-wide events.\n     *\n     * @param {object} [options.context=this] The value of `this` in the callback function.\n     *\n     * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n     * automatically expires.\n     *\n     * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n     * of the listeners array and thus be triggered before others.\n     *\n     * @returns {Listener[]} An array of all [`Listener`](Listener) objects that were created.\n     */\n\n\n    addOneTimeListener(event, listener, options = {}) {\n      options.remaining = 1;\n      return this.addListener(event, listener, options);\n    }\n    /**\n     * This is an alias to the [Input.addListener()]{@link Input#addListener} method.\n     * @since 2.0.0\n     * @deprecated since v3.0\n     * @private\n     */\n\n\n    on(event, channel, listener, options) {\n      return this.addListener(event, channel, listener, options);\n    }\n    /**\n     * Checks if the specified event type is already defined to trigger the specified callback\n     * function. For channel-specific events, the function will return `true` only if all channels\n     * have the listener defined.\n     *\n     * @param event {string|Symbol} The type of the event.\n     *\n     * @param listener {function} The callback function to check for.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of such\n     * integers representing the MIDI channel(s) to check. This parameter is ignored for input-wide\n     * events.\n     *\n     * @returns {boolean} Boolean value indicating whether or not the `Input` or\n     * [`InputChannel`](InputChannel) already has this listener defined.\n     */\n\n\n    hasListener(event, listener, options = {}) {\n      if (wm.validation) {\n        // Legacy compatibility\n        if (typeof options === \"function\") {\n          let channels = [].concat(listener); // clone\n\n          listener = options;\n          options = {\n            channels: channels\n          };\n        }\n      }\n\n      if (Enumerations.CHANNEL_EVENTS.includes(event)) {\n        // If no channel defined, use all.\n        if (options.channels === undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n        return Utilities.sanitizeChannels(options.channels).every(ch => {\n          return this.channels[ch].hasListener(event, listener);\n        });\n      } else {\n        return super.hasListener(event, listener);\n      }\n    }\n    /**\n     * Removes the specified event listener. If no listener is specified, all listeners matching the\n     * specified event will be removed. If the event is channel-specific, the listener will be removed\n     * from all [`InputChannel`]{@link InputChannel} objects belonging to that channel. If no event is\n     * specified, all listeners for the `Input` as well as all listeners for all\n     * [`InputChannel`]{@link InputChannel} objects belonging to the `Input` will be removed.\n     *\n     * By default, channel-specific listeners will be removed from all\n     * [`InputChannel`]{@link InputChannel} objects unless the `options.channel` narrows it down.\n     *\n     * @param [type] {string} The type of the event.\n     *\n     * @param [listener] {function} The callback function to check for.\n     *\n     * @param {object} [options={}]\n     *\n     * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of\n     * such integers representing the MIDI channel(s) to match. This parameter is ignored for\n     * input-wide events.\n     *\n     * @param {*} [options.context] Only remove the listeners that have this exact context.\n     *\n     * @param {number} [options.remaining] Only remove the listener if it has exactly that many\n     * remaining times to be executed.\n     */\n\n\n    removeListener(event, listener, options = {}) {\n      if (wm.validation) {\n        // Legacy compatibility\n        if (typeof options === \"function\") {\n          let channels = [].concat(listener); // clone\n\n          listener = options;\n          options = {\n            channels: channels\n          };\n        }\n      }\n\n      if (options.channels === undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS; // If the event is not specified, remove everything (channel-specific and input-wide)!\n\n      if (event == undefined) {\n        Utilities.sanitizeChannels(options.channels).forEach(ch => {\n          if (this.channels[ch]) this.channels[ch].removeListener();\n        });\n        return super.removeListener();\n      } // If the event is specified, check if it's channel-specific or input-wide.\n\n\n      if (Enumerations.CHANNEL_EVENTS.includes(event)) {\n        Utilities.sanitizeChannels(options.channels).forEach(ch => {\n          this.channels[ch].removeListener(event, listener, options);\n        });\n      } else {\n        super.removeListener(event, listener, options);\n      }\n    }\n    /**\n     * Adds a forwarder that will forward all incoming MIDI messages matching the criteria to the\n     * specified [`Output`](Output) destination(s). This is akin to the hardware MIDI THRU port, with\n     * the added benefit of being able to filter which data is forwarded.\n     *\n     * @param {Output|Output[]} output An [`Output`](Output) object, or an array of such\n     * objects, to forward messages to.\n     * @param {object} [options={}]\n     * @param {string|string[]} [options.types=(all messages)] A message type, or an array of such\n     * types (`noteon`, `controlchange`, etc.), that the message type must match in order to be\n     * forwarded. If this option is not specified, all types of messages will be forwarded. Valid\n     * messages are the ones found in either\n     * [`SYSTEM_MESSAGES`](Enumerations#SYSTEM_MESSAGES) or\n     * [`CHANNEL_MESSAGES`](Enumerations#CHANNEL_MESSAGES).\n     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n     * A MIDI channel number or an array of channel numbers that the message must match in order to be\n     * forwarded. By default all MIDI channels are included (`1` to `16`).\n     *\n     * @returns {Forwarder} The [`Forwarder`](Forwarder) object created to handle the forwarding. This\n     * is useful if you wish to manipulate or remove the [`Forwarder`](Forwarder) later on.\n     */\n\n\n    addForwarder(output, options = {}) {\n      let forwarder; // Unless 'output' is a forwarder, create a new forwarder\n\n      if (output instanceof Forwarder) {\n        forwarder = output;\n      } else {\n        forwarder = new Forwarder(output, options);\n      }\n\n      this._forwarders.push(forwarder);\n\n      return forwarder;\n    }\n    /**\n     * Removes the specified [`Forwarder`](Forwarder) object from the input.\n     *\n     * @param {Forwarder} forwarder The [`Forwarder`](Forwarder) to remove (the\n     * [`Forwarder`](Forwarder) object is returned when calling `addForwarder()`.\n     */\n\n\n    removeForwarder(forwarder) {\n      this._forwarders = this._forwarders.filter(item => item !== forwarder);\n    }\n    /**\n     * Checks whether the specified [`Forwarder`](Forwarder) object has already been attached to this\n     * input.\n     *\n     * @param {Forwarder} forwarder The [`Forwarder`](Forwarder) to check for (the\n     * [`Forwarder`](Forwarder) object is returned when calling [`addForwarder()`](#addForwarder).\n     * @returns {boolean}\n     */\n\n\n    hasForwarder(forwarder) {\n      return this._forwarders.includes(forwarder);\n    }\n    /**\n     * Name of the MIDI input.\n     *\n     * @type {string}\n     * @readonly\n     */\n\n\n    get name() {\n      return this._midiInput.name;\n    }\n    /**\n     * ID string of the MIDI port. The ID is host-specific. Do not expect the same ID on different\n     * platforms. For example, Google Chrome and the Jazz-Plugin report completely different IDs for\n     * the same port.\n     *\n     * @type {string}\n     * @readonly\n     */\n\n\n    get id() {\n      return this._midiInput.id;\n    }\n    /**\n     * Input port's connection state: `pending`, `open` or `closed`.\n     *\n     * @type {string}\n     * @readonly\n     */\n\n\n    get connection() {\n      return this._midiInput.connection;\n    }\n    /**\n     * Name of the manufacturer of the device that makes this input port available.\n     *\n     * @type {string}\n     * @readonly\n     */\n\n\n    get manufacturer() {\n      return this._midiInput.manufacturer;\n    }\n    /**\n     * An integer to offset the reported octave of incoming notes. By default, middle C (MIDI note\n     * number 60) is placed on the 4th octave (C4).\n     *\n     * If, for example, `octaveOffset` is set to 2, MIDI note number 60 will be reported as C6. If\n     * `octaveOffset` is set to -1, MIDI note number 60 will be reported as C3.\n     *\n     * Note that this value is combined with the global offset value defined in the\n     * [`WebMidi.octaveOffset`](WebMidi#octaveOffset) property (if any).\n     *\n     * @type {number}\n     *\n     * @since 3.0\n     */\n\n\n    get octaveOffset() {\n      return this._octaveOffset;\n    }\n\n    set octaveOffset(value) {\n      if (this.validation) {\n        value = parseInt(value);\n        if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n      }\n\n      this._octaveOffset = value;\n    }\n    /**\n     * State of the input port: `connected` or `disconnected`.\n     *\n     * @type {string}\n     * @readonly\n     */\n\n\n    get state() {\n      return this._midiInput.state;\n    }\n    /**\n     * The port type. In the case of the `Input` object, this is always: `input`.\n     *\n     * @type {string}\n     * @readonly\n     */\n\n\n    get type() {\n      return this._midiInput.type;\n    }\n    /**\n     * @type {boolean}\n     * @private\n     * @deprecated since v3.0.0 (moved to 'InputChannel' class)\n     */\n\n\n    get nrpnEventsEnabled() {\n      if (wm.validation) {\n        console.warn(\"The 'nrpnEventsEnabled' property has been moved to the 'InputChannel' class.\");\n      }\n\n      return false;\n    }\n\n  } // Events that do not have code below them must be placed outside the class definition (?!)\n\n  /**\n   * Input-wide (system) event emitted when a **system exclusive** message has been received.\n   * You should note that, to receive `sysex` events, you must call the\n   * [`WebMidi.enable()`](WebMidi#enable()) method with the `sysex` option set to `true`:\n   *\n   * ```js\n   * WebMidi.enable({sysex: true})\n   *  .then(() => console.log(\"WebMidi has been enabled with sysex support.\"))\n   * ```\n   *\n   * @event Input#sysex\n   *\n   * @type {object}\n   *\n   * @property {Input} port The `Input` that triggered the event.\n   * @property {Input} target The object that dispatched the event.\n   * @property {Message} message A [`Message`](Message) object containing information about the\n   * incoming MIDI message.\n   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n   * milliseconds since the navigation start of the document).\n   * @property {string} type `sysex`\n   *\n   */\n\n  /**\n   * Input-wide (system) event emitted when a **time code quarter frame** message has been\n   * received.\n   *\n   * @event Input#timecode\n   *\n   * @type {object}\n   *\n   * @property {Input} port The `Input` that triggered the event.\n   * @property {Input} target The object that dispatched the event.\n   * @property {Message} message A [`Message`](Message) object containing information about the\n   * incoming MIDI message.\n   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n   * milliseconds since the navigation start of the document).\n   * @property {string} type `timecode`\n   *\n   * @since 2.1\n   */\n\n  /**\n   * Input-wide (system) event emitted when a **song position** message has been received.\n   *\n   * @event Input#songposition\n   *\n   * @type {object}\n   *\n   * @property {Input} port The `Input` that triggered the event.\n   * @property {Input} target The object that dispatched the event.\n   * @property {Message} message A [`Message`](Message) object containing information about the\n   * incoming MIDI message.\n   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n   * milliseconds since the navigation start of the document).\n   * @property {string} type `songposition`\n   *\n   * @since 2.1\n   */\n\n  /**\n   * Input-wide (system) event emitted when a **song select** message has been received.\n   *\n   * @event Input#songselect\n   *\n   * @type {object}\n   *\n   * @property {Input} port The `Input` that triggered the event.\n   * @property {Input} target The object that dispatched the event.\n   * @property {Message} message A [`Message`](Message) object containing information about the\n   * incoming MIDI message.\n   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n   * milliseconds since the navigation start of the document).\n   * @property {string} value Song (or sequence) number to select (0-127)\n   * @property {string} rawValue Song (or sequence) number to select (0-127)\n   *\n   * @since 2.1\n   */\n\n  /**\n   * Input-wide (system) event emitted when a **tune request** message has been received.\n   *\n   * @event Input#tunerequest\n   *\n   * @type {object}\n   *\n   * @property {Input} port The `Input` that triggered the event.\n   * @property {Input} target The object that dispatched the event.\n   * @property {Message} message A [`Message`](Message) object containing information about the\n   * incoming MIDI message.\n   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n   * milliseconds since the navigation start of the document).\n   * @property {string} type `tunerequest`\n   *\n   * @since 2.1\n   */\n\n  /**\n   * Input-wide (system) event emitted when a **timing clock** message has been received.\n   *\n   * @event Input#clock\n   *\n   * @type {object}\n   *\n   * @property {Input} port The `Input` that triggered the event.\n   * @property {Input} target The object that dispatched the event.\n   * @property {Message} message A [`Message`](Message) object containing information about the\n   * incoming MIDI message.\n   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n   * milliseconds since the navigation start of the document).\n   * @property {string} type `clock`\n   *\n   * @since 2.1\n   */\n\n  /**\n   * Input-wide (system) event emitted when a **start** message has been received.\n   *\n   * @event Input#start\n   *\n   * @type {object}\n   *\n   * @property {Input} port The `Input` that triggered the event.\n   * @property {Input} target The object that dispatched the event.\n   * @property {Message} message A [`Message`](Message) object containing information about the\n   * incoming MIDI message.\n   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n   * milliseconds since the navigation start of the document).\n   * @property {string} type `start`\n   *\n   * @since 2.1\n   */\n\n  /**\n   * Input-wide (system) event emitted when a **continue** message has been received.\n   *\n   * @event Input#continue\n   *\n   * @type {object}\n   *\n   * @property {Input} port The `Input` that triggered the event.\n   * @property {Input} target The object that dispatched the event.\n   * @property {Message} message A [`Message`](Message) object containing information about the\n   * incoming MIDI message.\n   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n   * milliseconds since the navigation start of the document).\n   * @property {string} type `continue`\n   *\n   * @since 2.1\n   */\n\n  /**\n   * Input-wide (system) event emitted when a **stop** message has been received.\n   *\n   * @event Input#stop\n   *\n   * @type {object}\n   *\n   * @property {Input} port The `Input` that triggered the event.\n   * @property {Input} target The object that dispatched the event.\n   * @property {Message} message A [`Message`](Message) object containing information about the\n   * incoming MIDI message.\n   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n   * milliseconds since the navigation start of the document).\n   * @property {string} type `stop`\n   *\n   * @since 2.1\n   */\n\n  /**\n   * Input-wide (system) event emitted when an **active sensing** message has been received.\n   *\n   * @event Input#activesensing\n   *\n   * @type {object}\n   *\n   * @property {Input} port The `Input` that triggered the event.\n   * @property {Input} target The object that dispatched the event.\n   * @property {Message} message A [`Message`](Message) object containing information about the\n   * incoming MIDI message.\n   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n   * milliseconds since the navigation start of the document).\n   * @property {string} type `activesensing`\n   *\n   * @since 2.1\n   */\n\n  /**\n   * Input-wide (system) event emitted when a **reset** message has been received.\n   *\n   * @event Input#reset\n   *\n   * @type {object}\n   *\n   * @property {Input} port The `Input` that triggered the event.\n   * @property {Input} target The object that dispatched the event.\n   * @property {Message} message A [`Message`](Message) object containing information about the\n   * incoming MIDI message.\n   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n   * milliseconds since the navigation start of the document).\n   * @property {string} type `reset`\n   *\n   * @since 2.1\n   */\n\n  /**\n   * Input-wide (system) event emitted when an unknown MIDI message has been received. It could\n   * be, for example, one of the undefined/reserved messages.\n   *\n   * @event Input#unknownmessage\n   *\n   * @type {Object}\n   *\n   * @property {Input} port The `Input` that triggered the event.\n   * @property {Input} target The object that dispatched the event.\n   * @property {Message} message A [`Message`](Message) object containing information about the\n   * incoming MIDI message.\n   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n   * milliseconds since the navigation start of the document).\n   * @property {string} type `unknownmessage`\n   *\n   * @since 2.1\n   */\n\n  /**\n   * The `WebMidi` object makes it easier to work with the low-level Web MIDI API. Basically, it\n   * simplifies sending outgoing MIDI messages and reacting to incoming MIDI messages.\n   *\n   * When using the WebMidi.js library, you should know that the `WebMidi` class has already been\n   * instantiated. You cannot instantiate it yourself. If you use the **IIFE** version, you should\n   * simply use the global object called `WebMidi`. If you use the **CJS** (CommonJS) or **ESM** (ES6\n   * module) version, you get an already-instantiated object when you import the module.\n   *\n   * @fires WebMidi#connected\n   * @fires WebMidi#disabled\n   * @fires WebMidi#disconnected\n   * @fires WebMidi#enabled\n   * @fires WebMidi#error\n   * @fires WebMidi#midiaccessgranted\n   * @fires WebMidi#portschanged\n   *\n   * @extends EventEmitter\n   * @license Apache-2.0\n   */\n\n  class WebMidi extends EventEmitter {\n    /**\n     * The WebMidi class is a singleton and you cannot instantiate it directly. It has already been\n     * instantiated for you.\n     */\n    constructor() {\n      super();\n      /**\n       * Object containing system-wide default values that can be changed to customize how the library\n       * works.\n       *\n       * @type {object}\n       *\n       * @property {object}  defaults.note - Default values relating to note\n       * @property {number}  defaults.note.attack - A number between 0 and 127 representing the\n       * default attack velocity of notes. Initial value is 64.\n       * @property {number}  defaults.note.release - A number between 0 and 127 representing the\n       * default release velocity of notes. Initial value is 64.\n       * @property {number}  defaults.note.duration - A number representing the default duration of\n       * notes (in seconds). Initial value is Infinity.\n       */\n\n      this.defaults = {\n        note: {\n          attack: Utilities.from7bitToFloat(64),\n          release: Utilities.from7bitToFloat(64),\n          duration: Infinity\n        }\n      };\n      /**\n       * The [`MIDIAccess`](https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess)\n       * instance used to talk to the lower-level Web MIDI API. This should not be used directly\n       * unless you know what you are doing.\n       *\n       * @type {MIDIAccess}\n       * @readonly\n       */\n\n      this.interface = null;\n      /**\n       * Indicates whether argument validation and backwards-compatibility checks are performed\n       * throughout the WebMidi.js library for object methods and property setters.\n       *\n       * This is an advanced setting that should be used carefully. Setting `validation` to `false`\n       * improves performance but should only be done once the project has been thoroughly tested with\n       * `validation` turned on.\n       *\n       * @type {boolean}\n       */\n\n      this.validation = true;\n      /**\n       * Array of all (Input) objects\n       * @type {Input[]}\n       * @private\n       */\n\n      this._inputs = [];\n      /**\n       * Array of disconnected [`Input`](Input) objects. This is used when inputs are plugged back in\n       * to retain their previous state.\n       * @type {Input[]}\n       * @private\n       */\n\n      this._disconnectedInputs = [];\n      /**\n       * Array of all [`Output`](Output) objects\n       * @type {Output[]}\n       * @private\n       */\n\n      this._outputs = [];\n      /**\n       * Array of disconnected [`Output`](Output) objects. This is used when outputs are plugged back\n       * in to retain their previous state.\n       * @type {Output[]}\n       * @private\n       */\n\n      this._disconnectedOutputs = [];\n      /**\n       * Array of statechange events to process. These events must be parsed synchronously so they do\n       * not override each other.\n       *\n       * @type {string[]}\n       * @private\n       */\n\n      this._stateChangeQueue = [];\n      /**\n       * @type {number}\n       * @private\n       */\n\n      this._octaveOffset = 0;\n    }\n    /**\n     * Checks if the Web MIDI API is available in the current environment and then tries to connect to\n     * the host's MIDI subsystem. This is an asynchronous operation and it causes a security prompt to\n     * be displayed to the user.\n     *\n     * To enable the use of MIDI system exclusive messages, the `sysex` option should be set to\n     * `true`. However, under some environments (e.g. Jazz-Plugin), the `sysex` option is ignored\n     * and system exclusive messages are always enabled. You can check the\n     * [`sysexEnabled`](#sysexEnabled) property to confirm.\n     *\n     * To enable access to software synthesizers available on the host, you would set the `software`\n     * option to `true`. However, this option is only there to future-proof the library as support for\n     * software synths has not yet been implemented in any browser (as of September 2021).\n     *\n     * By the way, if you call the [`enable()`](#enable) method while WebMidi.js is already enabled,\n     * the callback function will be executed (if any), the promise will resolve but the events\n     * ([`\"midiaccessgranted\"`](#event:midiaccessgranted), [`\"connected\"`](#event:connected) and\n     * [`\"enabled\"`](#event:enabled)) will not be fired.\n     *\n     * There are 3 ways to execute code after `WebMidi` has been enabled:\n     *\n     * - Pass a callback function in the `options`\n     * - Listen to the [`\"enabled\"`](#event:enabled) event\n     * - Wait for the promise to resolve\n     *\n     * In order, this is what happens towards the end of the enabling process:\n     *\n     * 1. [`\"midiaccessgranted\"`](#event:midiaccessgranted) event is triggered once the user has\n     * granted access to use MIDI.\n     * 2. [`\"connected\"`](#event:connected) events are triggered (for each available input and output)\n     * 3. [`\"enabled\"`](#event:enabled) event is triggered when WebMidi.js is fully ready\n     * 4. specified callback (if any) is executed\n     * 5. promise is resolved and fulfilled with the `WebMidi` object.\n     *\n     * **Important note**: starting with Chrome v77, a page using Web MIDI API must be hosted on a\n     * secure origin (`https://`, `localhost` or `file:///`) and the user will always be prompted to\n     * authorize the operation (no matter if the `sysex` option is `true` or not).\n     *\n     * ##### Example\n     * ```js\n     * // Enabling WebMidi and using the promise\n     * WebMidi.enable().then(() => {\n     *   console.log(\"WebMidi.js has been enabled!\");\n     * })\n     * ```\n     *\n     * @param [options] {object}\n     *\n     * @param [options.callback] {function} A function to execute once the operation completes. This\n     * function will receive an `Error` object if enabling the Web MIDI API failed.\n     *\n     * @param [options.sysex=false] {boolean} Whether to enable MIDI system exclusive messages or not.\n     *\n     * @param [options.validation=true] {boolean} Whether to enable library-wide validation of method\n     * arguments and setter values. This is an advanced setting that should be used carefully. Setting\n     * [`validation`](#validation) to `false` improves performance but should only be done once the\n     * project has been thoroughly tested with [`validation`](#validation)  turned on.\n     *\n     * @param [options.software=false] {boolean} Whether to request access to software synthesizers on\n     * the host system. This is part of the spec but has not yet been implemented by most browsers as\n     * of April 2020.\n     *\n     * @param [options.requestMIDIAccessFunction] {function} A custom function to use to return\n     * the MIDIAccess object. This is useful if you want to use a polyfill for the Web MIDI API\n     * or if you want to use a custom implementation of the Web MIDI API - probably for testing\n     * purposes.\n     *\n     * @async\n     *\n     * @returns {Promise.<WebMidi>} The promise is fulfilled with the `WebMidi` object for\n     * chainability\n     *\n     * @throws {Error} The Web MIDI API is not supported in your environment.\n     * @throws {Error} Jazz-Plugin must be installed to use WebMIDIAPIShim.\n     */\n\n\n    async enable(options = {}, legacy = false) {\n      this.validation = options.validation !== false;\n\n      if (this.validation) {\n        // Backwards-compatibility. Previous syntax was: enable(callback, sysex)\n        if (typeof options === \"function\") options = {\n          callback: options,\n          sysex: legacy\n        };\n        if (legacy) options.sysex = true;\n      } // If already enabled, trigger callback and resolve promise but do not dispatch events.\n\n\n      if (this.enabled) {\n        if (typeof options.callback === \"function\") options.callback();\n        return Promise.resolve();\n      } // The Jazz-Plugin takes a while to be available (even after the Window's 'load' event has been\n      // fired). Therefore, we wait a little while to give it time to finish loading (initiqted in\n      // constructor).\n      // if (!this.supported) {\n      //\n      //   await new Promise((resolve, reject) => {\n      //\n      //     const start = this.time;\n      //\n      //     const intervalID = setInterval(() => {\n      //\n      //       if (this.supported) {\n      //         clearInterval(intervalID);\n      //         resolve();\n      //       } else {\n      //         if (this.time > start + 1500) {\n      //           clearInterval(intervalID);\n      //           let error = new Error(\"The Web MIDI API is not available in your environment.\");\n      //           if (typeof options.callback === \"function\") options.callback(error);\n      //           reject(error);\n      //         }\n      //       }\n      //\n      //     }, 25);\n      //\n      //   });\n      //\n      // }\n\n      /**\n       * Event emitted when an error occurs trying to enable `WebMidi`\n       *\n       * @event WebMidi#error\n       * @type {object}\n       * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {WebMidi} target The object that triggered the event\n       * @property {string} type `error`\n       * @property {*} error Actual error that occurred\n       */\n\n\n      const errorEvent = {\n        timestamp: this.time,\n        target: this,\n        type: \"error\",\n        error: undefined\n      };\n      /**\n       * Event emitted once the MIDI interface has been successfully created (which implies user has\n       * granted access to MIDI).\n       *\n       * @event WebMidi#midiaccessgranted\n       * @type {object}\n       * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds\n       * since the navigation start of the document).\n       * @property {WebMidi} target The object that triggered the event\n       * @property {string} type `midiaccessgranted`\n       */\n\n      const midiAccessGrantedEvent = {\n        timestamp: this.time,\n        target: this,\n        type: \"midiaccessgranted\"\n      };\n      /**\n       * Event emitted once `WebMidi` has been fully enabled\n       *\n       * @event WebMidi#enabled\n       * @type {object}\n       * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds\n       * since the navigation start of the document).\n       * @property {WebMidi} target The object that triggered the event\n       * @property {string} type `\"enabled\"`\n       */\n\n      const enabledEvent = {\n        timestamp: this.time,\n        target: this,\n        type: \"enabled\"\n      }; // Request MIDI access (this is where the prompt will appear)\n\n      try {\n        if (typeof options.requestMIDIAccessFunction === \"function\") {\n          this.interface = await options.requestMIDIAccessFunction({\n            sysex: options.sysex,\n            software: options.software\n          });\n        } else {\n          this.interface = await navigator.requestMIDIAccess({\n            sysex: options.sysex,\n            software: options.software\n          });\n        }\n      } catch (err) {\n        errorEvent.error = err;\n        this.emit(\"error\", errorEvent);\n        if (typeof options.callback === \"function\") options.callback(err);\n        return Promise.reject(err);\n      } // Now that the Web MIDI API interface has been created, we trigger the 'midiaccessgranted'\n      // event. This allows the developer an occasion to assign listeners on 'connected' events.\n\n\n      this.emit(\"midiaccessgranted\", midiAccessGrantedEvent); // We setup the state change listener before creating the ports so that it properly catches the\n      // the ports' `connected` events\n\n      this.interface.onstatechange = this._onInterfaceStateChange.bind(this); // Update inputs and outputs (this is where `Input` and `Output` objects are created).\n\n      try {\n        await this._updateInputsAndOutputs();\n      } catch (err) {\n        errorEvent.error = err;\n        this.emit(\"error\", errorEvent);\n        if (typeof options.callback === \"function\") options.callback(err);\n        return Promise.reject(err);\n      } // If we make it here, the ports have been successfully created, so we trigger the 'enabled'\n      // event.\n\n\n      this.emit(\"enabled\", enabledEvent); // Execute the callback (if any) and resolve the promise with 'this' (for chainability)\n\n      if (typeof options.callback === \"function\") options.callback();\n      return Promise.resolve(this);\n    }\n    /**\n     * Completely disables **WebMidi.js** by unlinking the MIDI subsystem's interface and closing all\n     * [`Input`](Input) and [`Output`](Output) objects that may have been opened. This also means that\n     * listeners added to [`Input`](Input) objects, [`Output`](Output) objects or to `WebMidi` itself\n     * are also destroyed.\n     *\n     * @async\n     * @returns {Promise<Array>}\n     *\n     * @throws {Error} The Web MIDI API is not supported by your environment.\n     *\n     * @since 2.0.0\n     */\n\n\n    async disable() {\n      // This needs to be done right away to prevent racing conditions in listeners while the inputs\n      // are being destroyed.\n      if (this.interface) this.interface.onstatechange = undefined;\n      return this._destroyInputsAndOutputs().then(() => {\n        if (navigator && typeof navigator.close === \"function\") navigator.close(); // jzz\n\n        this.interface = null; // also resets enabled, sysexEnabled\n\n        /**\n         * Event emitted once `WebMidi` has been successfully disabled.\n         *\n         * @event WebMidi#disabled\n         * @type {object}\n         * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in\n         * milliseconds since the navigation start of the document).\n         * @property {WebMidi} target The object that triggered the event\n         * @property {string} type `\"disabled\"`\n         */\n\n        let event = {\n          timestamp: this.time,\n          target: this,\n          type: \"disabled\"\n        }; // Finally, trigger the 'disabled' event and then remove all listeners.\n\n        this.emit(\"disabled\", event);\n        this.removeListener();\n      });\n    }\n\n    /**\n     * Returns the [`Input`](Input) object that matches the specified ID string or `false` if no\n     * matching input is found. As per the Web MIDI API specification, IDs are strings (not integers).\n     *\n     * Please note that IDs change from one host to another. For example, Chrome does not use the same\n     * kind of IDs as Jazz-Plugin.\n     *\n     * @param id {string} The ID string of the input. IDs can be viewed by looking at the\n     * [`WebMidi.inputs`](WebMidi#inputs) array. Even though they sometimes look like integers, IDs\n     * are strings.\n     * @param [options] {object}\n     * @param [options.disconnected] {boolean} Whether to retrieve a disconnected input\n     *\n     * @returns {Input} An [`Input`](Input) object matching the specified ID string or `undefined`\n     * if no matching input can be found.\n     *\n     * @throws {Error} WebMidi is not enabled.\n     *\n     * @since 2.0.0\n     */\n    getInputById(id, options = {\n      disconnected: false\n    }) {\n      if (this.validation) {\n        if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n        if (!id) return;\n      }\n\n      if (options.disconnected) {\n        for (let i = 0; i < this._disconnectedInputs.length; i++) {\n          if (this._disconnectedInputs[i].id === id.toString()) return this._disconnectedInputs[i];\n        }\n      } else {\n        for (let i = 0; i < this.inputs.length; i++) {\n          if (this.inputs[i].id === id.toString()) return this.inputs[i];\n        }\n      }\n    }\n\n    /**\n     * Returns the first [`Input`](Input) object whose name **contains** the specified string. Note\n     * that the port names change from one environment to another. For example, Chrome does not report\n     * input names in the same way as the Jazz-Plugin does.\n     *\n     * @param name {string} The non-empty string to look for within the name of MIDI inputs (such as\n     * those visible in the [inputs](WebMidi#inputs) array).\n     *\n     * @returns {Input} The [`Input`](Input) that was found or `undefined` if no input contained the\n     * specified name.\n     * @param [options] {object}\n     * @param [options.disconnected] {boolean} Whether to retrieve a disconnected input\n     *\n     * @throws {Error} WebMidi is not enabled.\n     *\n     * @since 2.0.0\n     */\n    getInputByName(name, options = {\n      disconnected: false\n    }) {\n      if (this.validation) {\n        if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n        if (!name) return;\n        name = name.toString();\n      }\n\n      if (options.disconnected) {\n        for (let i = 0; i < this._disconnectedInputs.length; i++) {\n          if (~this._disconnectedInputs[i].name.indexOf(name)) return this._disconnectedInputs[i];\n        }\n      } else {\n        for (let i = 0; i < this.inputs.length; i++) {\n          if (~this.inputs[i].name.indexOf(name)) return this.inputs[i];\n        }\n      }\n    }\n\n    /**\n     * Returns the first [`Output`](Output) object whose name **contains** the specified string. Note\n     * that the port names change from one environment to another. For example, Chrome does not report\n     * input names in the same way as the Jazz-Plugin does.\n     *\n     * @param name {string} The non-empty string to look for within the name of MIDI inputs (such as\n     * those visible in the [`outputs`](#outputs) array).\n     * @param [options] {object}\n     * @param [options.disconnected] {boolean} Whether to retrieve a disconnected output\n     *\n     * @returns {Output} The [`Output`](Output) that was found or `undefined` if no output matched\n     * the specified name.\n     *\n     * @throws {Error} WebMidi is not enabled.\n     *\n     * @since 2.0.0\n     */\n    getOutputByName(name, options = {\n      disconnected: false\n    }) {\n      if (this.validation) {\n        if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n        if (!name) return;\n        name = name.toString();\n      }\n\n      if (options.disconnected) {\n        for (let i = 0; i < this._disconnectedOutputs.length; i++) {\n          if (~this._disconnectedOutputs[i].name.indexOf(name)) return this._disconnectedOutputs[i];\n        }\n      } else {\n        for (let i = 0; i < this.outputs.length; i++) {\n          if (~this.outputs[i].name.indexOf(name)) return this.outputs[i];\n        }\n      }\n    }\n\n    /**\n     * Returns the [`Output`](Output) object that matches the specified ID string or `false` if no\n     * matching output is found. As per the Web MIDI API specification, IDs are strings (not\n     * integers).\n     *\n     * Please note that IDs change from one host to another. For example, Chrome does not use the same\n     * kind of IDs as Jazz-Plugin.\n     *\n     * @param id {string} The ID string of the port. IDs can be viewed by looking at the\n     * [`WebMidi.outputs`](WebMidi#outputs) array.\n     * @param [options] {object}\n     * @param [options.disconnected] {boolean} Whether to retrieve a disconnected output\n     *\n     * @returns {Output} An [`Output`](Output) object matching the specified ID string. If no\n     * matching output can be found, the method returns `undefined`.\n     *\n     * @throws {Error} WebMidi is not enabled.\n     *\n     * @since 2.0.0\n     */\n    getOutputById(id, options = {\n      disconnected: false\n    }) {\n      if (this.validation) {\n        if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n        if (!id) return;\n      }\n\n      if (options.disconnected) {\n        for (let i = 0; i < this._disconnectedOutputs.length; i++) {\n          if (this._disconnectedOutputs[i].id === id.toString()) return this._disconnectedOutputs[i];\n        }\n      } else {\n        for (let i = 0; i < this.outputs.length; i++) {\n          if (this.outputs[i].id === id.toString()) return this.outputs[i];\n        }\n      }\n    }\n\n    /**\n     * @private\n     * @deprecated since version 3.0.0, use Utilities.toNoteNumber() instead.\n     */\n    noteNameToNumber(name) {\n      if (this.validation) {\n        console.warn(\"The noteNameToNumber() method is deprecated. Use \" + \"Utilities.toNoteNumber() instead.\");\n      }\n\n      return Utilities.toNoteNumber(name, this.octaveOffset);\n    }\n    /**\n     * @private\n     * @deprecated since 3.0.0, use Utilities.getNoteDetails() instead.\n     */\n\n\n    getOctave(number) {\n      if (this.validation) {\n        console.warn(\"The getOctave()is deprecated. Use Utilities.getNoteDetails() instead\");\n        number = parseInt(number);\n      }\n\n      if (!isNaN(number) && number >= 0 && number <= 127) {\n        return Utilities.getNoteDetails(Utilities.offsetNumber(number, this.octaveOffset)).octave;\n      } else {\n        return false;\n      }\n    }\n    /**\n     * @private\n     * @deprecated since 3.0.0, use Utilities.sanitizeChannels() instead.\n     */\n\n\n    sanitizeChannels(channel) {\n      if (this.validation) {\n        console.warn(\"The sanitizeChannels() method has been moved to the utilities class.\");\n      }\n\n      return Utilities.sanitizeChannels(channel);\n    }\n    /**\n     * @private\n     * @deprecated since version 3.0.0, use Utilities.sanitizeChannels() instead.\n     */\n\n\n    toMIDIChannels(channel) {\n      if (this.validation) {\n        console.warn(\"The toMIDIChannels() method has been deprecated. Use Utilities.sanitizeChannels() instead.\");\n      }\n\n      return Utilities.sanitizeChannels(channel);\n    }\n    /**\n     * @private\n     * @deprecated since version 3.0.0, use Utilities.guessNoteNumber() instead.\n     */\n\n\n    guessNoteNumber(input) {\n      if (this.validation) {\n        console.warn(\"The guessNoteNumber() method has been deprecated. Use Utilities.guessNoteNumber() instead.\");\n      }\n\n      return Utilities.guessNoteNumber(input, this.octaveOffset);\n    }\n    /**\n     * @private\n     * @deprecated since version 3.0.0, use Utilities.buildNoteArray() instead.\n     */\n\n\n    getValidNoteArray(notes, options = {}) {\n      if (this.validation) {\n        console.warn(\"The getValidNoteArray() method has been moved to the Utilities.buildNoteArray()\");\n      }\n\n      return Utilities.buildNoteArray(notes, options);\n    }\n    /**\n     * @private\n     * @deprecated since version 3.0.0, use Utilities.toTimestamp() instead.\n     */\n\n\n    convertToTimestamp(time) {\n      if (this.validation) {\n        console.warn(\"The convertToTimestamp() method has been moved to Utilities.toTimestamp().\");\n      }\n\n      return Utilities.toTimestamp(time);\n    }\n    /**\n     * @return {Promise<void>}\n     * @private\n     */\n\n\n    async _destroyInputsAndOutputs() {\n      let promises = [];\n      this.inputs.forEach(input => promises.push(input.destroy()));\n      this.outputs.forEach(output => promises.push(output.destroy()));\n      return Promise.all(promises).then(() => {\n        this._inputs = [];\n        this._outputs = [];\n      });\n    }\n    /**\n     * @private\n     */\n\n\n    _onInterfaceStateChange(e) {\n      this._updateInputsAndOutputs();\n      /**\n       * Event emitted when an [`Input`](Input) or [`Output`](Output) port is connected or\n       * disconnected. This event is typically fired whenever a MIDI device is plugged in or\n       * unplugged. Please note that it may fire several times if a device possesses multiple inputs\n       * and/or outputs (which is often the case).\n       *\n       * @event WebMidi#portschanged\n       * @type {object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred\n       * (in milliseconds since the navigation start of the document).\n       * @property {string} type `portschanged`\n       * @property {WebMidi} target The object to which the listener was originally added (`WebMidi`)\n       * @property {Input|Output} port The [`Input`](Input) or [`Output`](Output) object that\n       * triggered the event.\n       *\n       * @since 3.0.2\n       */\n\n      /**\n       * Event emitted when an [`Input`](Input) or [`Output`](Output) becomes available. This event is\n       * typically fired whenever a MIDI device is plugged in. Please note that it may fire several\n       * times if a device possesses multiple inputs and/or outputs (which is often the case).\n       *\n       * @event WebMidi#connected\n       * @type {object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred\n       * (in milliseconds since the navigation start of the document).\n       * @property {string} type `connected`\n       * @property {WebMidi} target The object to which the listener was originally added (`WebMidi`)\n       * @property {Input|Output} port The [`Input`](Input) or [`Output`](Output) object that\n       * triggered the event.\n       */\n\n      /**\n       * Event emitted when an [`Input`](Input) or [`Output`](Output) becomes unavailable. This event\n       * is typically fired whenever a MIDI device is unplugged. Please note that it may fire several\n       * times if a device possesses multiple inputs and/or outputs (which is often the case).\n       *\n       * @event WebMidi#disconnected\n       * @type {object}\n       * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds\n       * since the navigation start of the document).\n       * @property {string} type `disconnected`\n       * @property {WebMidi} target The object to which the listener was originally added (`WebMidi`)\n       * @property {Input|Output} port The [`Input`](Input) or [`Output`](Output) object that\n       * triggered the event.\n       */\n\n\n      let event = {\n        timestamp: e.timeStamp,\n        type: e.port.state,\n        target: this\n      }; // We check if \"connection\" is \"open\" because connected events are also triggered with\n      // \"connection=closed\"\n\n      if (e.port.state === \"connected\" && e.port.connection === \"open\") {\n        if (e.port.type === \"output\") {\n          event.port = this.getOutputById(e.port.id);\n        } else if (e.port.type === \"input\") {\n          event.port = this.getInputById(e.port.id);\n        } // Emit \"connected\" event\n\n\n        this.emit(e.port.state, event); // Make a shallow copy of the event so we can use it for the \"portschanged\" event\n\n        const portsChangedEvent = Object.assign({}, event);\n        portsChangedEvent.type = \"portschanged\";\n        this.emit(portsChangedEvent.type, portsChangedEvent); // We check if \"connection\" is \"pending\" because we do not always get the \"closed\" event\n      } else if (e.port.state === \"disconnected\" && e.port.connection === \"pending\") {\n        if (e.port.type === \"input\") {\n          event.port = this.getInputById(e.port.id, {\n            disconnected: true\n          });\n        } else if (e.port.type === \"output\") {\n          event.port = this.getOutputById(e.port.id, {\n            disconnected: true\n          });\n        } // Emit \"disconnected\" event\n\n\n        this.emit(e.port.state, event); // Make a shallow copy of the event so we can use it for the \"portschanged\" event\n\n        const portsChangedEvent = Object.assign({}, event);\n        portsChangedEvent.type = \"portschanged\";\n        this.emit(portsChangedEvent.type, portsChangedEvent);\n      }\n    }\n\n    /**\n     * @private\n     */\n    async _updateInputsAndOutputs() {\n      return Promise.all([this._updateInputs(), this._updateOutputs()]);\n    }\n\n    /**\n     * @private\n     */\n    async _updateInputs() {\n      // We must check for the existence of this.interface because it might have been closed via\n      // WebMidi.disable().\n      if (!this.interface) return; // Check for items to remove from the existing array (because they are no longer being reported\n      // by the MIDI back-end).\n\n      for (let i = this._inputs.length - 1; i >= 0; i--) {\n        const current = this._inputs[i];\n        const inputs = Array.from(this.interface.inputs.values());\n\n        if (!inputs.find(input => input === current._midiInput)) {\n          // Instead of destroying removed inputs, we stash them in case they come back (which is the\n          // case when the computer goes to sleep and is later brought back online).\n          this._disconnectedInputs.push(current);\n\n          this._inputs.splice(i, 1);\n        }\n      } // Array to hold pending promises from trying to open all input ports\n\n\n      let promises = []; // Add new inputs (if not already present)\n\n      this.interface.inputs.forEach(nInput => {\n        // Check if the input is currently absent from the 'inputs' array.\n        if (!this._inputs.find(input => input._midiInput === nInput)) {\n          // If the input has previously been stashed away, reuse it. If not, create a new one.\n          let input = this._disconnectedInputs.find(input => input._midiInput === nInput);\n\n          if (!input) input = new Input(nInput);\n\n          this._inputs.push(input);\n\n          promises.push(input.open());\n        }\n      }); // Return a promise that resolves when all promises have resolved\n\n      return Promise.all(promises);\n    }\n\n    /**\n     * @private\n     */\n    async _updateOutputs() {\n      // We must check for the existence of this.interface because it might have been closed via\n      // WebMidi.disable().\n      if (!this.interface) return; // Check for items to remove from the existing array (because they are no longer being reported\n      // by the MIDI back-end).\n\n      for (let i = this._outputs.length - 1; i >= 0; i--) {\n        const current = this._outputs[i];\n        const outputs = Array.from(this.interface.outputs.values());\n\n        if (!outputs.find(output => output === current._midiOutput)) {\n          // Instead of destroying removed inputs, we stash them in case they come back (which is the\n          // case when the computer goes to sleep and is later brought back online).\n          this._disconnectedOutputs.push(current);\n\n          this._outputs.splice(i, 1);\n        }\n      } // Array to hold pending promises from trying to open all output ports\n\n\n      let promises = []; // Add new outputs (if not already present)\n\n      this.interface.outputs.forEach(nOutput => {\n        // Check if the output is currently absent from the 'outputs' array.\n        if (!this._outputs.find(output => output._midiOutput === nOutput)) {\n          // If the output has previously been stashed away, reuse it. If not, create a new one.\n          let output = this._disconnectedOutputs.find(output => output._midiOutput === nOutput);\n\n          if (!output) output = new Output(nOutput);\n\n          this._outputs.push(output);\n\n          promises.push(output.open());\n        }\n      }); // Return a promise that resolves when all sub-promises have resolved\n\n      return Promise.all(promises);\n    }\n\n    // injectPluginMarkup(parent) {\n    //\n    //   // Silently ignore on Node.js\n    //   if (Utilities.isNode) return;\n    //\n    //   // Default to <body> if no parent is specified\n    //   if (!(parent instanceof Element) && !(parent instanceof HTMLDocument)) {\n    //     parent = document.body;\n    //   }\n    //\n    //   // IE10 needs this:\n    //   // <meta http-equiv=\"X-UA-Compatible\" content=\"requiresActiveX=true\"/>\n    //\n    //   // Create markup and add to parent\n    //   const obj = document.createElement(\"object\");\n    //   obj.classid = \"CLSID:1ACE1618-1C7D-4561-AEE1-34842AA85E90\"; // IE\n    //   if (!obj.isJazz) obj.type = \"audio/x-jazz\";                 // Standards-compliant\n    //   obj.style.visibility = \"hidden\";\n    //   obj.style.width = obj.style.height = \"0px\";\n    //   parent.appendChild(obj);\n    //\n    // }\n\n    /**\n     * Indicates whether access to the host's MIDI subsystem is active or not.\n     *\n     * @readonly\n     * @type {boolean}\n     */\n    get enabled() {\n      return this.interface !== null;\n    }\n    /**\n     * An array of all currently available MIDI inputs.\n     *\n     * @readonly\n     * @type {Input[]}\n     */\n\n\n    get inputs() {\n      return this._inputs;\n    }\n    /**\n     * @private\n     * @deprecated\n     */\n\n\n    get isNode() {\n      if (this.validation) {\n        console.warn(\"WebMidi.isNode has been deprecated. Use Utilities.isNode instead.\");\n      }\n\n      return Utilities.isNode;\n    }\n    /**\n     * @private\n     * @deprecated\n     */\n\n\n    get isBrowser() {\n      if (this.validation) {\n        console.warn(\"WebMidi.isBrowser has been deprecated. Use Utilities.isBrowser instead.\");\n      }\n\n      return Utilities.isBrowser;\n    }\n    /**\n     * An integer to offset the octave of notes received from external devices or sent to external\n     * devices.\n     *\n     * When a MIDI message comes in on an input channel the reported note name will be offset. For\n     * example, if the `octaveOffset` is set to `-1` and a [`\"noteon\"`](InputChannel#event:noteon)\n     * message with MIDI number 60 comes in, the note will be reported as C3 (instead of C4).\n     *\n     * By the same token, when [`OutputChannel.playNote()`](OutputChannel#playNote) is called, the\n     * MIDI note number being sent will be offset. If `octaveOffset` is set to `-1`, the MIDI note\n     * number sent will be 72 (instead of 60).\n     *\n     * @type {number}\n     *\n     * @since 2.1\n     */\n\n\n    get octaveOffset() {\n      return this._octaveOffset;\n    }\n\n    set octaveOffset(value) {\n      if (this.validation) {\n        value = parseInt(value);\n        if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n      }\n\n      this._octaveOffset = value;\n    }\n    /**\n     * An array of all currently available MIDI outputs as [`Output`](Output) objects.\n     *\n     * @readonly\n     * @type {Output[]}\n     */\n\n\n    get outputs() {\n      return this._outputs;\n    }\n    /**\n     * Indicates whether the environment provides support for the Web MIDI API or not.\n     *\n     * **Note**: in environments that do not offer built-in MIDI support, this will report `true` if\n     * the\n     * [`navigator.requestMIDIAccess`](https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess)\n     * function is available. For example, if you have installed WebMIDIAPIShim.js but no plugin, this\n     * property will be `true` even though actual support might not be there.\n     *\n     * @readonly\n     * @type {boolean}\n     */\n\n\n    get supported() {\n      return typeof navigator !== \"undefined\" && navigator.requestMIDIAccess;\n    }\n    /**\n     * Indicates whether MIDI system exclusive messages have been activated when WebMidi.js was\n     * enabled via the [`enable()`](#enable) method.\n     *\n     * @readonly\n     * @type boolean\n     */\n\n\n    get sysexEnabled() {\n      return !!(this.interface && this.interface.sysexEnabled);\n    }\n    /**\n     * The elapsed time, in milliseconds, since the time\n     * [origin](https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp#The_time_origin).\n     * Said simply, it is the number of milliseconds that passed since the page was loaded. Being a\n     * floating-point number, it has sub-millisecond accuracy. According to the\n     * [documentation](https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp), the\n     * time should be accurate to 5 µs (microseconds). However, due to various constraints, the\n     * browser might only be accurate to one millisecond.\n     *\n     * Note: `WebMidi.time` is simply an alias to `performance.now()`.\n     *\n     * @type {DOMHighResTimeStamp}\n     * @readonly\n     */\n\n\n    get time() {\n      return performance.now();\n    }\n    /**\n     * The version of the library as a [semver](https://semver.org/) string.\n     *\n     * @readonly\n     * @type string\n     */\n\n\n    get version() {\n      return \"3.1.6\";\n    }\n    /**\n     * The flavour of the library. Can be one of:\n     *\n     * * `esm`: ECMAScript Module\n     * * `cjs`: CommonJS Module\n     * * `iife`: Immediately-Invoked Function Expression\n     *\n     * @readonly\n     * @type string\n     * @since 3.0.25\n     */\n\n\n    get flavour() {\n      return \"iife\"; // will be replaced during bundling by the correct identifier\n    }\n    /**\n     * @private\n     * @deprecated since 3.0.0. Use Enumerations.CHANNEL_EVENTS instead.\n     */\n\n\n    get CHANNEL_EVENTS() {\n      if (this.validation) {\n        console.warn(\"The CHANNEL_EVENTS enum has been moved to Enumerations.CHANNEL_EVENTS.\");\n      }\n\n      return Enumerations.CHANNEL_EVENTS;\n    }\n    /**\n     * @private\n     * @deprecated since 3.0.0. Use Enumerations.SYSTEM_MESSAGES instead.\n     */\n\n\n    get MIDI_SYSTEM_MESSAGES() {\n      if (this.validation) {\n        console.warn(\"The MIDI_SYSTEM_MESSAGES enum has been moved to \" + \"Enumerations.SYSTEM_MESSAGES.\");\n      }\n\n      return Enumerations.SYSTEM_MESSAGES;\n    }\n    /**\n     * @private\n     * @deprecated since 3.0.0. Use Enumerations.CHANNEL_MODE_MESSAGES instead\n     */\n\n\n    get MIDI_CHANNEL_MODE_MESSAGES() {\n      if (this.validation) {\n        console.warn(\"The MIDI_CHANNEL_MODE_MESSAGES enum has been moved to \" + \"Enumerations.CHANNEL_MODE_MESSAGES.\");\n      }\n\n      return Enumerations.CHANNEL_MODE_MESSAGES;\n    }\n    /**\n     * @private\n     * @deprecated since 3.0.0. Use Enumerations.CONTROL_CHANGE_MESSAGES instead.\n     */\n\n\n    get MIDI_CONTROL_CHANGE_MESSAGES() {\n      if (this.validation) {\n        console.warn(\"The MIDI_CONTROL_CHANGE_MESSAGES enum has been replaced by the \" + \"Enumerations.CONTROL_CHANGE_MESSAGES array.\");\n      }\n\n      return Enumerations.MIDI_CONTROL_CHANGE_MESSAGES;\n    }\n    /**\n     * @deprecated since 3.0.0. Use Enumerations.REGISTERED_PARAMETERS instead.\n     * @private\n     */\n\n\n    get MIDI_REGISTERED_PARAMETER() {\n      if (this.validation) {\n        console.warn(\"The MIDI_REGISTERED_PARAMETER enum has been moved to \" + \"Enumerations.REGISTERED_PARAMETERS.\");\n      }\n\n      return Enumerations.REGISTERED_PARAMETERS;\n    }\n    /**\n     * @deprecated since 3.0.0.\n     * @private\n     */\n\n\n    get NOTES() {\n      if (this.validation) {\n        console.warn(\"The NOTES enum has been deprecated.\");\n      }\n\n      return [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n    }\n\n  } // Export singleton instance of WebMidi class. The 'constructor' is nulled so that it cannot be used\n  // to instantiate a new WebMidi object or extend it. However, it is not freezed so it remains\n  // extensible (properties can be added at will).\n\n\n  const wm = new WebMidi();\n  wm.constructor = null;\n\n  exports.Enumerations = Enumerations;\n  exports.Forwarder = Forwarder;\n  exports.Input = Input;\n  exports.InputChannel = InputChannel;\n  exports.Message = Message;\n  exports.Note = Note;\n  exports.Output = Output;\n  exports.OutputChannel = OutputChannel;\n  exports.Utilities = Utilities;\n  exports.WebMidi = wm;\n\n}(this.window = this.window || {}));\n"],"names":["exports","EventEmitter","constructor","eventsSuspended","eventMap","addListener","event","callback","options","length","String","ANY_EVENT","TypeError","listener","Listener","prepend","unshift","push","addOneTimeListener","remaining","Symbol","for","hasListener","undefined","Object","entries","some","value","result","filter","eventNames","keys","getListeners","suspendEvent","forEach","suspended","unsuspendEvent","getListenerCount","emit","args","results","listeners","concat","params","Array","isArray","arguments","apply","context","count","remove","removeListener","waitFor","duration","parseInt","isNaN","Infinity","Promise","resolve","reject","timeout","clearTimeout","setTimeout","eventCount","target","ReferenceError","assign","Enumerations","MIDI_CHANNEL_MESSAGES","validation","console","warn","CHANNEL_MESSAGES","noteoff","noteon","keyaftertouch","controlchange","programchange","channelaftertouch","pitchbend","CHANNEL_NUMBERS","MIDI_CHANNEL_NUMBERS","CHANNEL_MODE_MESSAGES","allsoundoff","resetallcontrollers","localcontrol","allnotesoff","omnimodeoff","omnimodeon","monomodeon","polymodeon","MIDI_CHANNEL_MODE_MESSAGES","MIDI_CONTROL_CHANGE_MESSAGES","bankselectcoarse","modulationwheelcoarse","breathcontrollercoarse","controller3","footcontrollercoarse","portamentotimecoarse","dataentrycoarse","volumecoarse","balancecoarse","controller9","pancoarse","expressioncoarse","effectcontrol1coarse","effectcontrol2coarse","controller14","controller15","generalpurposeslider1","generalpurposeslider2","generalpurposeslider3","generalpurposeslider4","controller20","controller21","controller22","controller23","controller24","controller25","controller26","controller27","controller28","controller29","controller30","controller31","bankselectfine","modulationwheelfine","breathcontrollerfine","controller35","footcontrollerfine","portamentotimefine","dataentryfine","volumefine","balancefine","controller41","panfine","expressionfine","effectcontrol1fine","effectcontrol2fine","controller46","controller47","controller48","controller49","controller50","controller51","controller52","controller53","controller54","controller55","controller56","controller57","controller58","controller59","controller60","controller61","controller62","controller63","holdpedal","portamento","sustenutopedal","softpedal","legatopedal","hold2pedal","soundvariation","resonance","soundreleasetime","soundattacktime","brightness","soundcontrol6","soundcontrol7","soundcontrol8","soundcontrol9","soundcontrol10","generalpurposebutton1","generalpurposebutton2","generalpurposebutton3","generalpurposebutton4","controller84","controller85","controller86","controller87","controller88","controller89","controller90","reverblevel","tremololevel","choruslevel","celestelevel","phaserlevel","databuttonincrement","databuttondecrement","nonregisteredparametercoarse","nonregisteredparameterfine","registeredparametercoarse","registeredparameterfine","controller102","controller103","controller104","controller105","controller106","controller107","controller108","controller109","controller110","controller111","controller112","controller113","controller114","controller115","controller116","controller117","controller118","controller119","CONTROL_CHANGE_MESSAGES","number","name","description","position","REGISTERED_PARAMETERS","pitchbendrange","channelfinetuning","channelcoarsetuning","tuningprogram","tuningbank","modulationrange","azimuthangle","elevationangle","gain","distanceratio","maximumdistance","maximumdistancegain","referencedistanceratio","panspreadangle","rollangle","MIDI_REGISTERED_PARAMETERS","SYSTEM_MESSAGES","sysex","timecode","songposition","songselect","tunerequest","tuningrequest","sysexend","clock","start","continue","stop","activesensing","reset","midimessage","unknownsystemmessage","MIDI_SYSTEM_MESSAGES","CHANNEL_EVENTS","Note","wm","defaults","note","attack","release","rawAttack","Utilities","from7bitToFloat","rawRelease","Number","isInteger","identifier","toNoteIdentifier","_name","_accidental","_octave","fragments","getNoteDetails","Error","accidental","octave","includes","toUpperCase","toLowerCase","_duration","parseFloat","RangeError","_attack","_release","fromFloatTo7Bit","toNoteNumber","getOffsetNumber","octaveOffset","semitoneOffset","Math","min","max","notes","C","D","E","F","G","A","B","startsWith","matches","match","sanitizeChannels","channel","channels","indexOf","map","ch","toTimestamp","time","parsed","substring","guessNoteNumber","input","output","trim","e","floor","toString","buildNote","buildNoteArray","round","fromMsbLsbToFloat","msb","lsb","fromFloatToMsbLsb","multiplied","offsetNumber","getPropertyByValue","object","find","key","getCcNameByNumber","getCcNumberByName","message","element","getChannelModeByNumber","cm","hasOwnProperty","isNode","process","versions","node","isBrowser","window","document","OutputChannel","_output","_number","_octaveOffset","destroy","send","sendKeyAftertouch","pressure","useRawValue","rawValue","offset","n","sendControlChange","controller","item","index","_selectNonRegisteredParameter","parameter","_deselectRegisteredParameter","_deselectNonRegisteredParameter","_selectRegisteredParameter","_setCurrentParameter","data","sendRpnDecrement","valid","getOwnPropertyNames","p","sendRpnIncrement","playNote","sendNoteOn","noteOffOptions","sendNoteOff","rawVelocity","velocity","nVelocity","stopNote","sendChannelMode","command","sendOmniMode","state","sendChannelAftertouch","sendMasterTuning","coarse","fine","sendRpnValue","sendModulationRange","semitones","cents","sendNrpnValue","nrpn","sendPitchBend","sendPitchBendRange","sendProgramChange","program","rpn","sendTuningBank","sendTuningProgram","sendLocalControl","sendAllNotesOff","sendAllSoundOff","sendResetAllControllers","sendPolyphonicMode","mode","Output","midiOutput","_midiOutput","i","onstatechange","_onStateChange","bind","close","timestamp","port","connection","type","id","manufacturer","open","err","legacy","Message","rawData","Uint8Array","from","slice","sendSysex","identification","merged","set","clear","sendTimecodeQuarterFrame","sendSongPosition","sendSongSelect","sendTuneRequest","sendClock","sendStart","sendContinue","sendStop","sendActiveSensing","sendReset","sendTuningRequest","setPitchBendRange","setRegisteredParameter","setModulationRange","setMasterTuning","setTuningProgram","setTuningBank","setNonRegisteredParameter","incrementRegisteredParameter","decrementRegisteredParameter","Forwarder","destinations","types","destination","forward","InputChannel","_input","_nrpnBuffer","_rpnBuffer","parameterNumberEventsEnabled","notesState","fill","_processMidiMessageEvent","_parseEventForStandardMessages","data1","dataBytes","data2","rawKey","subtype","numberedEvent","namedEvent","_parseChannelModeMessage","_isRpnOrNrpnController","_parseEventForParameterNumber","_dispatchParameterNumberEvent","paramMsb","paramLsb","parameterMsb","parameterLsb","legacyEvent","getNoteState","nrpnEventsEnabled","statusByte","rawDataBytes","isChannelMessage","isSystemMessage","manufacturerId","Input","midiInput","_midiInput","_forwarders","onmidimessage","_onMidiMessage","timeStamp","_parseEvent","forwarder","song","on","every","addForwarder","removeForwarder","hasForwarder","interface","_inputs","_disconnectedInputs","_outputs","_disconnectedOutputs","_stateChangeQueue","enable","enabled","errorEvent","error","midiAccessGrantedEvent","enabledEvent","requestMIDIAccessFunction","software","navigator","requestMIDIAccess","_onInterfaceStateChange","_updateInputsAndOutputs","disable","_destroyInputsAndOutputs","then","getInputById","disconnected","inputs","getInputByName","getOutputByName","outputs","getOutputById","noteNameToNumber","getOctave","toMIDIChannels","getValidNoteArray","convertToTimestamp","promises","all","portsChangedEvent","_updateInputs","_updateOutputs","current","values","splice","nInput","nOutput","supported","sysexEnabled","performance","now","version","flavour","MIDI_REGISTERED_PARAMETER","NOTES","WebMidi"],"version":3,"file":"index.b4642bf0.js.map"}