{"mappings":"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,c;oB,O,C;gB,I,E,gB,G,E,oB,G,E,mB,G,K,GChBA,EAAAL,mBAAAA,GAAsB;oBAClC;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAA,EAGY,EAAAG,oBAAAA,GAAuB;oBACnC;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAA,EAGY,EAAAJ,gBAAAA,GAAmB;oBAC/B,GAAG;oBACH,GAAG;oBACH,IAAI;oBACJ,IAAI;oBACJ,IAAI;oBACJ,IAAI;oBACJ,IAAI;oBACJ,IAAI;oBACJ,IAAI;gBAAA;YAAA;Y,K,S,C,E,C,E,C;gB;gB,I,I,I,I,I,C,S,I,S,C,E,C,E,C,E,C;oB,O,I,C,K,C,I,O,C,E,S,C,E,C;wB,S,E,C;4B,I;gC,E,E,I,C;4B,E,O,G;gC,E;4B;wB;wB,S,E,C;4B,I;gC,E,E,K,C;4B,E,O,G;gC,E;4B;wB;wB,S,E,C;4B,I;4B,E,I,G,E,E,K,I,A,C,I,E,K,E,a,I,I,I,E,S,C;gC,E;4B,E,E,I,C,G;wB;wB,E,A,C,I,E,K,C,G,K,E,C,E,I;oB;gB,G,I,I,I,I,C,W,I,S,C,E,C;oB,I,G,G,G,G,I;wB,O;wB,M;4B,I,I,C,C,E,E,M,C,C,E;4B,O,C,C,E;wB;wB,M,E;wB,K,E;oB;oB,O,I;wB,M,E;wB,O,E;wB,Q,E;oB,G,c,O,U,C,C,C,O,Q,C,G;wB,O,I;oB,C,G;oB,S,E,C;wB,O,S,C;4B,O,S,C;gC,I,G,M,I,U;gC,M,G,I;oC,I,I,G,K,C,I,I,C,C,E,G,E,M,G,C,C,E,G,E,K,I,C,A,C,I,E,M,A,K,E,I,C,I,C,I,E,I,A,K,C,A,C,I,E,I,C,G,C,C,E,C,E,I,E,O;oC,O,I,G,K,C,I;wC,I,C,C,E;wC,E,K;qC,A,G,C,C,E;wC,K;wC,K;4C,I;4C;wC,K;4C,O,E,K,I;gD,O,C,C,E;gD,M,C;4C;wC,K;4C,E,K,I,I,C,C,E,E,I;gD;6C;4C;wC,K;4C,I,E,G,C,G,I,E,I,C,G;4C;wC;4C,I,C,C,A,C,I,A,C,I,E,I,A,E,M,G,K,C,C,E,M,G,E,A,K,M,C,C,E,I,M,C,C,E,A,G;gD,I;gD;4C;4C,I,M,C,C,E,I,C,C,K,C,C,E,G,C,C,E,I,C,C,E,G,C,C,E,A,G;gD,E,K,G,C,C,E;gD;4C;4C,I,M,C,C,E,I,E,K,G,C,C,E,E;gD,E,K,G,C,C,E,E,I;gD;4C;4C,I,K,E,K,G,C,C,E,E;gD,E,K,G,C,C,E,E,E,G,C,I,C;gD;4C;4C,C,C,E,I,E,G,C,G,I,E,I,C,G;4C;oC;oC,I,E,I,C,G;gC,E,O,G;oC,I;wC;wC;qC,E,I;gC,S;oC,I,I;gC;gC,I,I,C,C,E,E,M,C,C,E;gC,O;oC,O,C,C,E,G,C,C,E,G,K;oC,M,C;gC;4B,E;gC;gC;6B;wB;oB;gB;gB,O,c,C,G,c;oB,O,C;gB,I,E,M,G,E,K,G,E,I,G,K;gBC1JL,IAAA,IAAA,EAAA,MAE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","sources":["src/js/utils/libs/@tonejs/midi/build/Midi.js","src/js/utils/libs/@tonejs/midi/build/webpack:/@tonejs/midi/webpack/universalModuleDefinition","src/js/utils/libs/@tonejs/midi/build/webpack:/@tonejs/midi/node_modules/array-flatten/dist.es2015/index.js","src/js/utils/libs/@tonejs/midi/build/webpack:/@tonejs/midi/node_modules/midi-file/index.js","src/js/utils/libs/@tonejs/midi/build/webpack:/@tonejs/midi/node_modules/midi-file/lib/midi-parser.js","src/js/utils/libs/@tonejs/midi/build/webpack:/@tonejs/midi/node_modules/midi-file/lib/midi-writer.js","src/js/utils/libs/@tonejs/midi/build/webpack:/@tonejs/midi/src/BinarySearch.ts","src/js/utils/libs/@tonejs/midi/build/webpack:/@tonejs/midi/src/ControlChange.ts","src/js/utils/libs/@tonejs/midi/build/webpack:/@tonejs/midi/src/ControlChanges.ts","src/js/utils/libs/@tonejs/midi/build/webpack:/@tonejs/midi/src/Encode.ts","src/js/utils/libs/@tonejs/midi/build/webpack:/@tonejs/midi/src/Header.ts","src/js/utils/libs/@tonejs/midi/build/webpack:/@tonejs/midi/src/Instrument.ts","src/js/utils/libs/@tonejs/midi/build/webpack:/@tonejs/midi/src/InstrumentMaps.ts","src/js/utils/libs/@tonejs/midi/build/webpack:/@tonejs/midi/src/Midi.ts","src/js/utils/libs/@tonejs/midi/build/webpack:/@tonejs/midi/src/Note.ts","src/js/utils/libs/@tonejs/midi/build/webpack:/@tonejs/midi/src/PitchBend.ts","src/js/utils/libs/@tonejs/midi/build/webpack:/@tonejs/midi/src/Track.ts","src/js/utils/libs/@tonejs/midi/build/webpack:/@tonejs/midi/webpack/bootstrap","src/js/utils/libs/@tonejs/midi/build/webpack:/@tonejs/midi/webpack/runtime/define property getters","src/js/utils/libs/@tonejs/midi/build/webpack:/@tonejs/midi/webpack/runtime/hasOwnProperty shorthand","src/js/utils/libs/@tonejs/midi/build/webpack:/@tonejs/midi/webpack/runtime/make namespace object","src/js/utils/libs/@tonejs/midi/build/webpack:/@tonejs/midi/webpack/startup"],"sourcesContent":[null,"(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn ","/**\n * Flatten an array indefinitely.\n */\nexport function flatten(array) {\n    var result = [];\n    $flatten(array, result);\n    return result;\n}\n/**\n * Internal flatten function recursively passes `result`.\n */\nfunction $flatten(array, result) {\n    for (var i = 0; i < array.length; i++) {\n        var value = array[i];\n        if (Array.isArray(value)) {\n            $flatten(value, result);\n        }\n        else {\n            result.push(value);\n        }\n    }\n}\n//# sourceMappingURL=index.js.map","exports.parseMidi = require('./lib/midi-parser')\nexports.writeMidi = require('./lib/midi-writer')\n","// data can be any array-like object.  It just needs to support .length, .slice, and an element getter []\n\nfunction parseMidi(data) {\n  var p = new Parser(data)\n\n  var headerChunk = p.readChunk()\n  if (headerChunk.id != 'MThd')\n    throw \"Bad MIDI file.  Expected 'MHdr', got: '\" + headerChunk.id + \"'\"\n  var header = parseHeader(headerChunk.data)\n\n  var tracks = []\n  for (var i=0; !p.eof() && i < header.numTracks; i++) {\n    var trackChunk = p.readChunk()\n    if (trackChunk.id != 'MTrk')\n      throw \"Bad MIDI file.  Expected 'MTrk', got: '\" + trackChunk.id + \"'\"\n    var track = parseTrack(trackChunk.data)\n    tracks.push(track)\n  }\n\n  return {\n    header: header,\n    tracks: tracks\n  }\n}\n\n\nfunction parseHeader(data) {\n  var p = new Parser(data)\n\n  var format = p.readUInt16()\n  var numTracks = p.readUInt16()\n\n  var result = {\n    format: format,\n    numTracks: numTracks\n  }\n\n  var timeDivision = p.readUInt16()\n  if (timeDivision & 0x8000) {\n    result.framesPerSecond = 0x100 - (timeDivision >> 8)\n    result.ticksPerFrame = timeDivision & 0xFF\n  } else {\n    result.ticksPerBeat = timeDivision\n  }\n\n  return result\n}\n\nfunction parseTrack(data) {\n  var p = new Parser(data)\n\n  var events = []\n  while (!p.eof()) {\n    var event = readEvent()\n    events.push(event)\n  }\n\n  return events\n\n  var lastEventTypeByte = null\n\n  function readEvent() {\n    var event = {}\n    event.deltaTime = p.readVarInt()\n\n    var eventTypeByte = p.readUInt8()\n\n    if ((eventTypeByte & 0xf0) === 0xf0) {\n      // system / meta event\n      if (eventTypeByte === 0xff) {\n        // meta event\n        event.meta = true\n        var metatypeByte = p.readUInt8()\n        var length = p.readVarInt()\n        switch (metatypeByte) {\n          case 0x00:\n            event.type = 'sequenceNumber'\n            if (length !== 2) throw \"Expected length for sequenceNumber event is 2, got \" + length\n            event.number = p.readUInt16()\n            return event\n          case 0x01:\n            event.type = 'text'\n            event.text = p.readString(length)\n            return event\n          case 0x02:\n            event.type = 'copyrightNotice'\n            event.text = p.readString(length)\n            return event\n          case 0x03:\n            event.type = 'trackName'\n            event.text = p.readString(length)\n            return event\n          case 0x04:\n            event.type = 'instrumentName'\n            event.text = p.readString(length)\n            return event\n          case 0x05:\n            event.type = 'lyrics'\n            event.text = p.readString(length)\n            return event\n          case 0x06:\n            event.type = 'marker'\n            event.text = p.readString(length)\n            return event\n          case 0x07:\n            event.type = 'cuePoint'\n            event.text = p.readString(length)\n            return event\n          case 0x20:\n            event.type = 'channelPrefix'\n            if (length != 1) throw \"Expected length for channelPrefix event is 1, got \" + length\n            event.channel = p.readUInt8()\n            return event\n          case 0x21:\n            event.type = 'portPrefix'\n            if (length != 1) throw \"Expected length for portPrefix event is 1, got \" + length\n            event.port = p.readUInt8()\n            return event\n          case 0x2f:\n            event.type = 'endOfTrack'\n            if (length != 0) throw \"Expected length for endOfTrack event is 0, got \" + length\n            return event\n          case 0x51:\n            event.type = 'setTempo';\n            if (length != 3) throw \"Expected length for setTempo event is 3, got \" + length\n            event.microsecondsPerBeat = p.readUInt24()\n            return event\n          case 0x54:\n            event.type = 'smpteOffset';\n            if (length != 5) throw \"Expected length for smpteOffset event is 5, got \" + length\n            var hourByte = p.readUInt8()\n            var FRAME_RATES = { 0x00: 24, 0x20: 25, 0x40: 29, 0x60: 30 }\n            event.frameRate = FRAME_RATES[hourByte & 0x60]\n            event.hour = hourByte & 0x1f\n            event.min = p.readUInt8()\n            event.sec = p.readUInt8()\n            event.frame = p.readUInt8()\n            event.subFrame = p.readUInt8()\n            return event\n          case 0x58:\n            event.type = 'timeSignature'\n            if (length != 4) throw \"Expected length for timeSignature event is 4, got \" + length\n            event.numerator = p.readUInt8()\n            event.denominator = (1 << p.readUInt8())\n            event.metronome = p.readUInt8()\n            event.thirtyseconds = p.readUInt8()\n            return event\n          case 0x59:\n            event.type = 'keySignature'\n            if (length != 2) throw \"Expected length for keySignature event is 2, got \" + length\n            event.key = p.readInt8()\n            event.scale = p.readUInt8()\n            return event\n          case 0x7f:\n            event.type = 'sequencerSpecific'\n            event.data = p.readBytes(length)\n            return event\n          default:\n            event.type = 'unknownMeta'\n            event.data = p.readBytes(length)\n            event.metatypeByte = metatypeByte\n            return event\n        }\n      } else if (eventTypeByte == 0xf0) {\n        event.type = 'sysEx'\n        var length = p.readVarInt()\n        event.data = p.readBytes(length)\n        return event\n      } else if (eventTypeByte == 0xf7) {\n        event.type = 'endSysEx'\n        var length = p.readVarInt()\n        event.data = p.readBytes(length)\n        return event\n      } else {\n        throw \"Unrecognised MIDI event type byte: \" + eventTypeByte\n      }\n    } else {\n      // channel event\n      var param1\n      if ((eventTypeByte & 0x80) === 0) {\n        // running status - reuse lastEventTypeByte as the event type.\n        // eventTypeByte is actually the first parameter\n        if (lastEventTypeByte === null)\n          throw \"Running status byte encountered before status byte\"\n        param1 = eventTypeByte\n        eventTypeByte = lastEventTypeByte\n        event.running = true\n      } else {\n        param1 = p.readUInt8()\n        lastEventTypeByte = eventTypeByte\n      }\n      var eventType = eventTypeByte >> 4\n      event.channel = eventTypeByte & 0x0f\n      switch (eventType) {\n        case 0x08:\n          event.type = 'noteOff'\n          event.noteNumber = param1\n          event.velocity = p.readUInt8()\n          return event\n        case 0x09:\n          var velocity = p.readUInt8()\n          event.type = velocity === 0 ? 'noteOff' : 'noteOn'\n          event.noteNumber = param1\n          event.velocity = velocity\n          if (velocity === 0) event.byte9 = true\n          return event\n        case 0x0a:\n          event.type = 'noteAftertouch'\n          event.noteNumber = param1\n          event.amount = p.readUInt8()\n          return event\n        case 0x0b:\n          event.type = 'controller'\n          event.controllerType = param1\n          event.value = p.readUInt8()\n          return event\n        case 0x0c:\n          event.type = 'programChange'\n          event.programNumber = param1\n          return event\n        case 0x0d:\n          event.type = 'channelAftertouch'\n          event.amount = param1\n          return event\n        case 0x0e:\n          event.type = 'pitchBend'\n          event.value = (param1 + (p.readUInt8() << 7)) - 0x2000\n          return event\n        default:\n          throw \"Unrecognised MIDI event type: \" + eventType\n      }\n    }\n  }\n}\n\nfunction Parser(data) {\n  this.buffer = data\n  this.bufferLen = this.buffer.length\n  this.pos = 0\n}\n\nParser.prototype.eof = function() {\n  return this.pos >= this.bufferLen\n}\n\nParser.prototype.readUInt8 = function() {\n  var result = this.buffer[this.pos]\n  this.pos += 1\n  return result\n}\n\nParser.prototype.readInt8 = function() {\n  var u = this.readUInt8()\n  if (u & 0x80)\n    return u - 0x100\n  else\n    return u\n}\n\nParser.prototype.readUInt16 = function() {\n  var b0 = this.readUInt8(),\n      b1 = this.readUInt8()\n\n    return (b0 << 8) + b1\n}\n\nParser.prototype.readInt16 = function() {\n  var u = this.readUInt16()\n  if (u & 0x8000)\n    return u - 0x10000\n  else\n    return u\n}\n\nParser.prototype.readUInt24 = function() {\n  var b0 = this.readUInt8(),\n      b1 = this.readUInt8(),\n      b2 = this.readUInt8()\n\n    return (b0 << 16) + (b1 << 8) + b2\n}\n\nParser.prototype.readInt24 = function() {\n  var u = this.readUInt24()\n  if (u & 0x800000)\n    return u - 0x1000000\n  else\n    return u\n}\n\nParser.prototype.readUInt32 = function() {\n  var b0 = this.readUInt8(),\n      b1 = this.readUInt8(),\n      b2 = this.readUInt8(),\n      b3 = this.readUInt8()\n\n    return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3\n}\n\nParser.prototype.readBytes = function(len) {\n  var bytes = this.buffer.slice(this.pos, this.pos + len)\n  this.pos += len\n  return bytes\n}\n\nParser.prototype.readString = function(len) {\n  var bytes = this.readBytes(len)\n  return String.fromCharCode.apply(null, bytes)\n}\n\nParser.prototype.readVarInt = function() {\n  var result = 0\n  while (!this.eof()) {\n    var b = this.readUInt8()\n    if (b & 0x80) {\n      result += (b & 0x7f)\n      result <<= 7\n    } else {\n      // b is last byte\n      return result + b\n    }\n  }\n  // premature eof\n  return result\n}\n\nParser.prototype.readChunk = function() {\n  var id = this.readString(4)\n  var length = this.readUInt32()\n  var data = this.readBytes(length)\n  return {\n    id: id,\n    length: length,\n    data: data\n  }\n}\n\nmodule.exports = parseMidi\n","// data should be the same type of format returned by parseMidi\n// for maximum compatibililty, returns an array of byte values, suitable for conversion to Buffer, Uint8Array, etc.\n\n// opts:\n// - running              reuse previous eventTypeByte when possible, to compress file\n// - useByte9ForNoteOff   use 0x09 for noteOff when velocity is zero\n\nfunction writeMidi(data, opts) {\n  if (typeof data !== 'object')\n    throw 'Invalid MIDI data'\n\n  opts = opts || {}\n\n  var header = data.header || {}\n  var tracks = data.tracks || []\n  var i, len = tracks.length\n\n  var w = new Writer()\n  writeHeader(w, header, len)\n\n  for (i=0; i < len; i++) {\n    writeTrack(w, tracks[i], opts)\n  }\n\n  return w.buffer\n}\n\nfunction writeHeader(w, header, numTracks) {\n  var format = header.format == null ? 1 : header.format\n\n  var timeDivision = 128\n  if (header.timeDivision) {\n    timeDivision = header.timeDivision\n  } else if (header.ticksPerFrame && header.framesPerSecond) {\n    timeDivision = (-(header.framesPerSecond & 0xFF) << 8) | (header.ticksPerFrame & 0xFF)\n  } else if (header.ticksPerBeat) {\n    timeDivision = header.ticksPerBeat & 0x7FFF\n  }\n\n  var h = new Writer()\n  h.writeUInt16(format)\n  h.writeUInt16(numTracks)\n  h.writeUInt16(timeDivision)\n\n  w.writeChunk('MThd', h.buffer)\n}\n\nfunction writeTrack(w, track, opts) {\n  var t = new Writer()\n  var i, len = track.length\n  var eventTypeByte = null\n  for (i=0; i < len; i++) {\n    // Reuse last eventTypeByte when opts.running is set, or event.running is explicitly set on it.\n    // parseMidi will set event.running for each event, so that we can get an exact copy by default.\n    // Explicitly set opts.running to false, to override event.running and never reuse last eventTypeByte.\n    if (opts.running === false || !opts.running && !track[i].running) eventTypeByte = null\n\n    eventTypeByte = writeEvent(t, track[i], eventTypeByte, opts.useByte9ForNoteOff)\n  }\n  w.writeChunk('MTrk', t.buffer)\n}\n\nfunction writeEvent(w, event, lastEventTypeByte, useByte9ForNoteOff) {\n  var type = event.type\n  var deltaTime = event.deltaTime\n  var text = event.text || ''\n  var data = event.data || []\n  var eventTypeByte = null\n  w.writeVarInt(deltaTime)\n\n  switch (type) {\n    // meta events\n    case 'sequenceNumber':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x00)\n      w.writeVarInt(2)\n      w.writeUInt16(event.number)\n      break;\n\n    case 'text':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x01)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'copyrightNotice':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x02)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'trackName':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x03)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'instrumentName':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x04)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'lyrics':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x05)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'marker':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x06)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'cuePoint':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x07)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'channelPrefix':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x20)\n      w.writeVarInt(1)\n      w.writeUInt8(event.channel)\n      break;\n\n    case 'portPrefix':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x21)\n      w.writeVarInt(1)\n      w.writeUInt8(event.port)\n      break;\n\n    case 'endOfTrack':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x2F)\n      w.writeVarInt(0)\n      break;\n\n    case 'setTempo':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x51)\n      w.writeVarInt(3)\n      w.writeUInt24(event.microsecondsPerBeat)\n      break;\n\n    case 'smpteOffset':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x54)\n      w.writeVarInt(5)\n      var FRAME_RATES = { 24: 0x00, 25: 0x20, 29: 0x40, 30: 0x60 }\n      var hourByte = (event.hour & 0x1F) | FRAME_RATES[event.frameRate]\n      w.writeUInt8(hourByte)\n      w.writeUInt8(event.min)\n      w.writeUInt8(event.sec)\n      w.writeUInt8(event.frame)\n      w.writeUInt8(event.subFrame)\n      break;\n\n    case 'timeSignature':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x58)\n      w.writeVarInt(4)\n      w.writeUInt8(event.numerator)\n      var denominator = Math.floor((Math.log(event.denominator) / Math.LN2)) & 0xFF\n      w.writeUInt8(denominator)\n      w.writeUInt8(event.metronome)\n      w.writeUInt8(event.thirtyseconds || 8)\n      break;\n\n    case 'keySignature':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x59)\n      w.writeVarInt(2)\n      w.writeInt8(event.key)\n      w.writeUInt8(event.scale)\n      break;\n\n    case 'sequencerSpecific':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x7F)\n      w.writeVarInt(data.length)\n      w.writeBytes(data)\n      break;\n\n    case 'unknownMeta':\n      if (event.metatypeByte != null) {\n        w.writeUInt8(0xFF)\n        w.writeUInt8(event.metatypeByte)\n        w.writeVarInt(data.length)\n        w.writeBytes(data)\n      }\n      break;\n\n    // system-exclusive\n    case 'sysEx':\n      w.writeUInt8(0xF0)\n      w.writeVarInt(data.length)\n      w.writeBytes(data)\n      break;\n\n    case 'endSysEx':\n      w.writeUInt8(0xF7)\n      w.writeVarInt(data.length)\n      w.writeBytes(data)\n      break;\n\n    // channel events\n    case 'noteOff':\n      // Use 0x90 when opts.useByte9ForNoteOff is set and velocity is zero, or when event.byte9 is explicitly set on it.\n      // parseMidi will set event.byte9 for each event, so that we can get an exact copy by default.\n      // Explicitly set opts.useByte9ForNoteOff to false, to override event.byte9 and always use 0x80 for noteOff events.\n      var noteByte = ((useByte9ForNoteOff !== false && event.byte9) || (useByte9ForNoteOff && event.velocity == 0)) ? 0x90 : 0x80\n\n      eventTypeByte = noteByte | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.noteNumber)\n      w.writeUInt8(event.velocity)\n      break;\n\n    case 'noteOn':\n      eventTypeByte = 0x90 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.noteNumber)\n      w.writeUInt8(event.velocity)\n      break;\n\n    case 'noteAftertouch':\n      eventTypeByte = 0xA0 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.noteNumber)\n      w.writeUInt8(event.amount)\n      break;\n\n    case 'controller':\n      eventTypeByte = 0xB0 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.controllerType)\n      w.writeUInt8(event.value)\n      break;\n\n    case 'programChange':\n      eventTypeByte = 0xC0 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.programNumber)\n      break;\n\n    case 'channelAftertouch':\n      eventTypeByte = 0xD0 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.amount)\n      break;\n\n    case 'pitchBend':\n      eventTypeByte = 0xE0 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      var value14 = 0x2000 + event.value\n      var lsb14 = (value14 & 0x7F)\n      var msb14 = (value14 >> 7) & 0x7F\n      w.writeUInt8(lsb14)\n      w.writeUInt8(msb14)\n    break;\n\n    default:\n      throw 'Unrecognized event type: ' + type\n  }\n  return eventTypeByte\n}\n\n\nfunction Writer() {\n  this.buffer = []\n}\n\nWriter.prototype.writeUInt8 = function(v) {\n  this.buffer.push(v & 0xFF)\n}\nWriter.prototype.writeInt8 = Writer.prototype.writeUInt8\n\nWriter.prototype.writeUInt16 = function(v) {\n  var b0 = (v >> 8) & 0xFF,\n      b1 = v & 0xFF\n\n  this.writeUInt8(b0)\n  this.writeUInt8(b1)\n}\nWriter.prototype.writeInt16 = Writer.prototype.writeUInt16\n\nWriter.prototype.writeUInt24 = function(v) {\n  var b0 = (v >> 16) & 0xFF,\n      b1 = (v >> 8) & 0xFF,\n      b2 = v & 0xFF\n\n  this.writeUInt8(b0)\n  this.writeUInt8(b1)\n  this.writeUInt8(b2)\n}\nWriter.prototype.writeInt24 = Writer.prototype.writeUInt24\n\nWriter.prototype.writeUInt32 = function(v) {\n  var b0 = (v >> 24) & 0xFF,\n      b1 = (v >> 16) & 0xFF,\n      b2 = (v >> 8) & 0xFF,\n      b3 = v & 0xFF\n\n  this.writeUInt8(b0)\n  this.writeUInt8(b1)\n  this.writeUInt8(b2)\n  this.writeUInt8(b3)\n}\nWriter.prototype.writeInt32 = Writer.prototype.writeUInt32\n\n\nWriter.prototype.writeBytes = function(arr) {\n  this.buffer = this.buffer.concat(Array.prototype.slice.call(arr, 0))\n}\n\nWriter.prototype.writeString = function(str) {\n  var i, len = str.length, arr = []\n  for (i=0; i < len; i++) {\n    arr.push(str.codePointAt(i))\n  }\n  this.writeBytes(arr)\n}\n\nWriter.prototype.writeVarInt = function(v) {\n  if (v < 0) throw \"Cannot write negative variable-length integer\"\n\n  if (v <= 0x7F) {\n    this.writeUInt8(v)\n  } else {\n    var i = v\n    var bytes = []\n    bytes.push(i & 0x7F)\n    i >>= 7\n    while (i) {\n      var b = i & 0x7F | 0x80\n      bytes.push(b)\n      i >>= 7\n    }\n    this.writeBytes(bytes.reverse())\n  }\n}\n\nWriter.prototype.writeChunk = function(id, data) {\n  this.writeString(id)\n  this.writeUInt32(data.length)\n  this.writeBytes(data)\n}\n\nmodule.exports = writeMidi\n","/**\n * Return the index of the element at or before the given property\n * @hidden\n */\nexport function search(array: any[], value: any, prop = \"ticks\"): number {\n\tlet beginning = 0;\n\tconst len = array.length;\n\tlet end = len;\n\tif (len > 0 && array[len - 1][prop] <= value) {\n\t\treturn len - 1;\n\t}\n\twhile (beginning < end) {\n\t\t// calculate the midpoint for roughly equal partition\n\t\tlet midPoint = Math.floor(beginning + (end - beginning) / 2);\n\t\tconst event = array[midPoint];\n\t\tconst nextEvent = array[midPoint + 1];\n\t\tif (event[prop] === value) {\n\t\t\t// choose the last one that has the same value\n\t\t\tfor (let i = midPoint; i < array.length; i++) {\n\t\t\t\tconst testEvent = array[i];\n\t\t\t\tif (testEvent[prop] === value) {\n\t\t\t\t\tmidPoint = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn midPoint;\n\t\t} else if (event[prop] < value && nextEvent[prop] > value) {\n\t\t\treturn midPoint;\n\t\t} else if (event[prop] > value) {\n\t\t\t// search lower\n\t\t\tend = midPoint;\n\t\t} else if (event[prop] < value) {\n\t\t\t// search upper\n\t\t\tbeginning = midPoint + 1;\n\t\t}\n\t}\n\treturn -1;\n}\n\n/**\n * Does a binary search to insert the note\n * in the correct spot in the array\n * @hidden\n */\nexport function insert(array: any[], event: object, prop = \"ticks\"): void {\n\tif (array.length) {\n\t\tconst index = search(array, event[prop], prop);\n\t\tarray.splice(index + 1, 0, event);\n\t} else {\n\t\tarray.push(event);\n\t}\n}\n","import type { MidiControllerEvent } from \"midi-file\";\nimport { Header } from \"./Header\";\n\n/**\n * @hidden\n */\nexport type ControlChangeName =\n\t| \"modulationWheel\"\n\t| \"breath\"\n\t| \"footController\"\n\t| \"portamentoTime\"\n\t| \"volume\"\n\t| \"balance\"\n\t| \"pan\"\n\t| \"sustain\"\n\t| \"portamentoTime\"\n\t| \"sostenuto\"\n\t| \"softPedal\"\n\t| \"legatoFootswitch\"\n\t| \"portamentoControl\";\n\ninterface ControlChangeMap {\n\t[key: number]: ControlChangeName;\n}\n/**\n * A map of values to control change names\n * @hidden\n */\nexport const controlChangeNames: ControlChangeMap = {\n\t1: \"modulationWheel\",\n\t2: \"breath\",\n\t4: \"footController\",\n\t5: \"portamentoTime\",\n\t7: \"volume\",\n\t8: \"balance\",\n\t10: \"pan\",\n\t64: \"sustain\",\n\t65: \"portamentoTime\",\n\t66: \"sostenuto\",\n\t67: \"softPedal\",\n\t68: \"legatoFootswitch\",\n\t84: \"portamentoControl\",\n};\n\n/**\n * swap the keys and values\n * @hidden\n */\nexport const controlChangeIds = Object.keys(controlChangeNames).reduce((obj, key) => {\n\tobj[controlChangeNames[key]] = key;\n\treturn obj;\n}, {});\n\nconst privateHeaderMap = new WeakMap<ControlChange, Header>();\nconst privateCCNumberMap = new WeakMap<ControlChange, number>();\n\n/**\n * Represents a control change event\n */\nexport class ControlChange implements ControlChangeInterface {\n\n\t/**\n\t * The number value of the event\n\t */\n\tvalue: number;\n\n\t/**\n\t * The tick time of the event\n\t */\n\tticks: number;\n\n\t/**\n\t * @param event\n\t * @param header\n\t */\n\tconstructor(event: Partial<MidiControllerEvent & { absoluteTime: number }>, header: Header) {\n\t\tprivateHeaderMap.set(this, header);\n\t\tprivateCCNumberMap.set(this, event.controllerType);\n\n\t\tthis.ticks = event.absoluteTime;\n\t\tthis.value = event.value;\n\t}\n\n\t/**\n\t * The controller number\n\t */\n\tget number(): number {\n\t\treturn privateCCNumberMap.get(this);\n\t}\n\n\t/**\n\t * return the common name of the control number if it exists\n\t */\n\tget name(): ControlChangeName {\n\t\tif (controlChangeNames[this.number]) {\n\t\t\treturn controlChangeNames[this.number];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * The time of the event in seconds\n\t */\n\tget time(): number {\n\t\tconst header = privateHeaderMap.get(this);\n\t\treturn header.ticksToSeconds(this.ticks);\n\t}\n\n\tset time(t: number) {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tthis.ticks = header.secondsToTicks(t);\n\t}\n\n\ttoJSON(): ControlChangeJSON {\n\t\treturn {\n\t\t\tnumber: this.number,\n\t\t\tticks: this.ticks,\n\t\t\ttime: this.time,\n\t\t\tvalue: this.value,\n\t\t};\n\t}\n}\n\nexport interface ControlChangeJSON {\n\tnumber: number;\n\tticks: number;\n\ttime: number;\n\tvalue: number;\n}\n\nexport interface ControlChangeInterface {\n\tnumber: number;\n\tticks: number;\n\ttime: number;\n\tvalue: number;\n}\n","import { controlChangeIds } from \"./ControlChange\";\nimport { ControlChange, ControlChangeJSON } from \"./ControlChange\";\n\nexport interface ControlChanges {\n\t[key: string]: ControlChange[];\n\t[key: number]: ControlChange[];\n}\n\nexport interface ControlChangesJSON {\n\t[key: string]: ControlChangeJSON[];\n\t[key: number]: ControlChangeJSON[];\n}\n\n/**\n * Automatically creates an alias for named control values using Proxies\n * @hidden\n */\nexport function createControlChanges(): ControlChanges {\n\treturn new Proxy({}, {\n\t\t// tslint:disable-next-line: typedef\n\t\tget(target, handler) {\n\t\t\tif (target[handler]) {\n\t\t\t\treturn target[handler];\n\t\t\t} else if (controlChangeIds.hasOwnProperty(handler)) {\n\t\t\t\treturn target[controlChangeIds[handler]];\n\t\t\t}\n\t\t},\n\t\t// tslint:disable-next-line: typedef\n\t\tset(target, handler, value) {\n\t\t\tif (controlChangeIds.hasOwnProperty(handler)) {\n\t\t\t\ttarget[controlChangeIds[handler]] = value;\n\t\t\t} else {\n\t\t\t\ttarget[handler] = value;\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\t});\n}\n","import { writeMidi } from \"midi-file\";\n\nimport type {\n\tMidiControllerEvent, MidiData, MidiEndOfTrackEvent,\n\tMidiEvent, MidiKeySignatureEvent,\n\tMidiNoteOffEvent, MidiNoteOnEvent, MidiPitchBendEvent,\n\tMidiProgramChangeEvent, MidiSetTempoEvent, MidiTextEvent,\n\tMidiTimeSignatureEvent, MidiTrackNameEvent\n} from \"midi-file\";\n\nimport { KeySignatureEvent, keySignatureKeys, MetaEvent, TempoEvent, TimeSignatureEvent } from \"./Header\";\nimport { ControlChange } from \"./ControlChange\";\nimport { PitchBend } from \"./PitchBend\";\nimport { Midi } from \"./Midi\";\nimport { Note } from \"./Note\";\nimport { Track } from \"./Track\";\n\nimport { flatten } from \"array-flatten\";\n\n/** Used to add `absoluteTime` property. */\ntype WithAbsoluteTime = { absoluteTime: number };\n\nfunction encodeNote(note: Note, channel: number): [\n\t(MidiNoteOnEvent & WithAbsoluteTime),\n\t(MidiNoteOffEvent & WithAbsoluteTime)\n] {\n\treturn [{\n\t\tabsoluteTime: note.ticks,\n\t\tchannel,\n\t\tdeltaTime: 0,\n\t\tnoteNumber: note.midi,\n\t\ttype: \"noteOn\",\n\t\tvelocity: Math.floor(note.velocity * 127),\n\t},\n\t{\n\t\tabsoluteTime: note.ticks + note.durationTicks,\n\t\tchannel,\n\t\tdeltaTime: 0,\n\t\tnoteNumber: note.midi,\n\t\ttype: \"noteOff\",\n\t\tvelocity: Math.floor(note.noteOffVelocity * 127),\n\t}];\n}\n\nfunction encodeNotes(track: Track): Array<MidiNoteOnEvent | MidiNoteOffEvent> {\n\treturn flatten(track.notes.map(note => encodeNote(note, track.channel))) as unknown as Array<MidiNoteOnEvent | MidiNoteOffEvent>;\n}\n\nfunction encodeControlChange(\n\tcc: ControlChange,\n\tchannel: number\n): (MidiControllerEvent & WithAbsoluteTime) {\n\treturn {\n\t\tabsoluteTime: cc.ticks,\n\t\tchannel,\n\t\tcontrollerType: cc.number,\n\t\tdeltaTime: 0,\n\t\ttype: \"controller\",\n\t\tvalue: Math.floor(cc.value * 127),\n\t};\n}\n\nfunction encodeControlChanges(track: Track): MidiControllerEvent[] {\n\tconst controlChanges: MidiControllerEvent[] = [];\n\tfor (let i = 0; i < 127; i++) {\n\t\tif (track.controlChanges.hasOwnProperty(i)) {\n\t\t\ttrack.controlChanges[i].forEach((cc: ControlChange) => {\n\t\t\t\tcontrolChanges.push(encodeControlChange(cc, track.channel));\n\t\t\t});\n\t\t}\n\t}\n\treturn controlChanges;\n}\n\nfunction encodePitchBend(\n\tpb: PitchBend,\n\tchannel: number\n): (MidiPitchBendEvent & WithAbsoluteTime) {\n\treturn {\n\t\tabsoluteTime: pb.ticks,\n\t\tchannel,\n\t\tdeltaTime: 0,\n\t\ttype: \"pitchBend\",\n\t\tvalue: pb.value,\n\t};\n}\n\nfunction encodePitchBends(track: Track): MidiPitchBendEvent[] {\n\tconst pitchBends: MidiPitchBendEvent[] = [];\n\ttrack.pitchBends.forEach((pb: PitchBend) => {\n\t\tpitchBends.push(encodePitchBend(pb, track.channel));\n\t});\t\n\treturn pitchBends;\n}\n\nfunction encodeInstrument(track: Track): (MidiProgramChangeEvent & WithAbsoluteTime) {\n\treturn {\n\t\tabsoluteTime: 0,\n\t\tchannel: track.channel,\n\t\tdeltaTime: 0,\n\t\tprogramNumber: track.instrument.number,\n\t\ttype: \"programChange\",\n\t};\n}\n\nfunction encodeTrackName(name: string): (MidiTrackNameEvent & WithAbsoluteTime) {\n\treturn {\n\t\tabsoluteTime: 0,\n\t\tdeltaTime: 0,\n\t\tmeta: true,\n\t\ttext: name,\n\t\ttype: \"trackName\",\n\t};\n}\n\nfunction encodeTempo(tempo: TempoEvent): (MidiSetTempoEvent & WithAbsoluteTime) {\n\treturn {\n\t\tabsoluteTime: tempo.ticks,\n\t\tdeltaTime: 0,\n\t\tmeta: true,\n\t\tmicrosecondsPerBeat: Math.floor(60000000 / tempo.bpm),\n\t\ttype: \"setTempo\",\n\t};\n}\n\nfunction encodeTimeSignature(timeSig: TimeSignatureEvent): (MidiTimeSignatureEvent & WithAbsoluteTime) {\n\treturn {\n\t\tabsoluteTime: timeSig.ticks,\n\t\tdeltaTime: 0,\n\t\tdenominator: timeSig.timeSignature[1],\n\t\tmeta: true,\n\t\tmetronome: 24,\n\t\tnumerator: timeSig.timeSignature[0],\n\t\tthirtyseconds: 8,\n\t\ttype: \"timeSignature\",\n\t};\n}\n\n// function encodeMeta(event: )\n\nfunction encodeKeySignature(keySig: KeySignatureEvent): (MidiKeySignatureEvent & WithAbsoluteTime) {\n\tconst keyIndex = keySignatureKeys.indexOf(keySig.key);\n\treturn {\n\t\tabsoluteTime: keySig.ticks,\n\t\tdeltaTime: 0,\n\t\tkey: keyIndex + 7,\n\t\tmeta: true,\n\t\tscale: keySig.scale === \"major\" ? 0 : 1,\n\t\ttype: \"keySignature\",\n\t};\n}\n\nfunction encodeText(\n\ttextEvent: (MetaEvent & { ticks: number; })\n): (MidiTextEvent & WithAbsoluteTime) {\n\treturn {\n\t\tabsoluteTime: textEvent.ticks,\n\t\tdeltaTime: 0,\n\t\tmeta: true,\n\t\ttext: textEvent.text,\n\t\ttype: textEvent.type,\n\t} as (MidiTextEvent & WithAbsoluteTime);\n}\n\n/**\n * Convert the MIDI object to an array.\n */\nexport function encode(midi: Midi): Uint8Array {\n\tconst midiData: MidiData = {\n\t\theader: {\n\t\t\tformat: 1,\n\t\t\tnumTracks: midi.tracks.length + 1,\n\t\t\tticksPerBeat: midi.header.ppq,\n\t\t},\n\t\ttracks: [\n\t\t\t[\n\t\t\t\t// The name data.\n\t\t\t\t{\n\t\t\t\t\tabsoluteTime: 0,\n\t\t\t\t\tdeltaTime: 0,\n\t\t\t\t\tmeta: true,\n\t\t\t\t\ttext: midi.header.name,\n\t\t\t\t\ttype: \"trackName\",\n\t\t\t\t} as MidiTrackNameEvent,\n\t\t\t\t...midi.header.keySignatures.map(keySig => encodeKeySignature(keySig)),\n\t\t\t\t// and all the meta events (cloned for safety)\n\t\t\t\t...midi.header.meta.map(e => encodeText(e)),\n\t\t\t\t// the first track is all the tempo data\n\t\t\t\t...midi.header.tempos.map(tempo => encodeTempo(tempo)),\n\t\t\t\t// and the time signature data.\n\t\t\t\t...midi.header.timeSignatures.map(timeSig => encodeTimeSignature(timeSig)),\n\t\t\t],\n\t\t\t// The remaining tracks.\n\t\t\t...midi.tracks.map((track) => {\n\t\t\t\treturn [\n\t\t\t\t\t// Add the name\n\t\t\t\t\tencodeTrackName(track.name),\n\t\t\t\t\t// the instrument\n\t\t\t\t\tencodeInstrument(track),\n\t\t\t\t\t// add the notes\n\t\t\t\t\t...encodeNotes(track),\n\t\t\t\t\t// and the control changes\n\t\t\t\t\t...encodeControlChanges(track),\n\t\t\t\t\t// and the pitch bends.\n\t\t\t\t\t...encodePitchBends(track)\n\t\t\t\t];\n\t\t\t}),\n\t\t],\n\t};\n\n\t// Sort and set `deltaTime` of all of the tracks.\n\tmidiData.tracks = midiData.tracks.map((track: (MidiEvent & WithAbsoluteTime)[]) => {\n\t\ttrack = track.sort((a, b) => a.absoluteTime - b.absoluteTime);\n\t\t\n\t\tlet lastTime = 0;\n\t\ttrack.forEach(note => {\n\t\t\tnote.deltaTime = note.absoluteTime - lastTime;\n\t\t\tlastTime = note.absoluteTime;\n\t\t\tdelete note.absoluteTime;\n\t\t});\n\n\t\t// End of track.\n\t\ttrack.push({\n\t\t\tdeltaTime: 0,\n\t\t\tmeta: true,\n\t\t\ttype: \"endOfTrack\",\n\t\t} as (MidiEndOfTrackEvent & WithAbsoluteTime));\n\t\treturn track;\n\t});\n\n\t// Rreturn `midiData`.\n\treturn new Uint8Array(writeMidi(midiData));\n}\n","import type { MidiData, MidiEvent } from \"midi-file\";\nimport { search } from \"./BinarySearch\";\n\nconst privatePPQMap = new WeakMap<Header, number>();\n\nexport interface TempoEvent {\n\tticks: number;\n\tbpm: number;\n\ttime?: number;\n}\n\nexport interface TimeSignatureEvent {\n\tticks: number;\n\ttimeSignature: number[];\n\tmeasures?: number;\n}\n\nexport interface MetaEvent {\n\ttext: string;\n\ttype: string;\n\tticks: number;\n}\n\nexport interface KeySignatureEvent {\n\tticks: number;\n\tkey: string;\n\tscale: string;\n}\n\n/**\n * @hidden\n */\nexport const keySignatureKeys = [\n\t\"Cb\",\n\t\"Gb\",\n\t\"Db\",\n\t\"Ab\",\n\t\"Eb\",\n\t\"Bb\",\n\t\"F\",\n\t\"C\",\n\t\"G\",\n\t\"D\",\n\t\"A\",\n\t\"E\",\n\t\"B\",\n\t\"F#\",\n\t\"C#\",\n];\n\n/**\n * The parsed MIDI file header.\n */\nexport class Header {\n\t/**\n\t * The array of all the tempo events.\n\t */\n\ttempos: TempoEvent[] = [];\n\n\t/**\n\t * The time signatures.\n\t */\n\ttimeSignatures: TimeSignatureEvent[] = [];\n\n\t/**\n\t * The time signatures.\n\t */\n\tkeySignatures: KeySignatureEvent[] = [];\n\n\t/**\n\t * Additional meta events.\n\t */\n\tmeta: MetaEvent[] = [];\n\n\t/**\n\t * The name of the MIDI file;\n\t */\n\tname = \"\";\n\n\tconstructor(midiData?: MidiData) {\n\t\t// Look through all the tracks for tempo changes.\n\t\tprivatePPQMap.set(this, 480);\n\n\t\tif (midiData) {\n\t\t\tprivatePPQMap.set(this, midiData.header.ticksPerBeat);\n\t\t\t\n\t\t\t// Check time signature and tempo events from all of the tracks.\n\t\t\tmidiData.tracks.forEach(track => {\n\t\t\t\ttrack.forEach((event: MidiEvent & { absoluteTime: number; meta?: boolean; }) => {\n\t\t\t\t\tif (event.meta) {\n\t\t\t\t\t\tif (event.type === \"timeSignature\") {\n\t\t\t\t\t\t\tthis.timeSignatures.push({\n\t\t\t\t\t\t\t\tticks: event.absoluteTime,\n\t\t\t\t\t\t\t\ttimeSignature: [\n\t\t\t\t\t\t\t\t\tevent.numerator,\n\t\t\t\t\t\t\t\t\tevent.denominator,\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (event.type === \"setTempo\") {\n\t\t\t\t\t\t\tthis.tempos.push({\n\t\t\t\t\t\t\t\tbpm: 60000000 / event.microsecondsPerBeat,\n\t\t\t\t\t\t\t\tticks: event.absoluteTime,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (event.type === \"keySignature\") {\n\t\t\t\t\t\t\tthis.keySignatures.push({\n\t\t\t\t\t\t\t\tkey: keySignatureKeys[event.key + 7],\n\t\t\t\t\t\t\t\tscale: event.scale === 0 ? \"major\" : \"minor\",\n\t\t\t\t\t\t\t\tticks: event.absoluteTime,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// Check the first track for other relevant data.\n\t\t\tlet firstTrackCurrentTicks = 0; // Used for absolute times.\n\t\t\tmidiData.tracks[0].forEach((event: MidiEvent & { meta?: boolean; }) => {\n\t\t\t\tfirstTrackCurrentTicks += event.deltaTime;\n\n\t\t\t\tif (event.meta) {\n\t\t\t\t\tif (event.type === \"trackName\") {\n\t\t\t\t\t\tthis.name = event.text;\n\t\t\t\t\t} else if (\n\t\t\t\t\t\tevent.type === \"text\" ||\n\t\t\t\t\t\tevent.type === \"cuePoint\" ||\n\t\t\t\t\t\tevent.type === \"marker\" ||\n\t\t\t\t\t\tevent.type === \"lyrics\"\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.meta.push({\n\t\t\t\t\t\t\ttext: event.text,\n\t\t\t\t\t\t\tticks: firstTrackCurrentTicks,\n\t\t\t\t\t\t\ttype: event.type,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.update();\n\t\t}\n\t}\n\n\t/**\n\t * This must be invoked after any changes are made to the tempo array\n\t * or the timeSignature array for the updated values to be reflected.\n\t */\n\tupdate(): void {\n\t\tlet currentTime = 0;\n\t\tlet lastEventBeats = 0;\n\n\t\t// Make sure it's sorted;\n\t\tthis.tempos.sort((a, b) => a.ticks - b.ticks);\n\t\tthis.tempos.forEach((event, index) => {\n\t\t\tconst lastBPM =\n\t\t\t\tindex > 0 ? this.tempos[index - 1].bpm : this.tempos[0].bpm;\n\t\t\tconst beats = event.ticks / this.ppq - lastEventBeats;\n\t\t\tconst elapsedSeconds = (60 / lastBPM) * beats;\n\n\t\t\tevent.time = elapsedSeconds + currentTime;\n\t\t\tcurrentTime = event.time;\n\t\t\tlastEventBeats += beats;\n\t\t});\n\n\t\tthis.timeSignatures.sort((a, b) => a.ticks - b.ticks);\n\t\tthis.timeSignatures.forEach((event, index) => {\n\t\t\tconst lastEvent =\n\t\t\t\tindex > 0\n\t\t\t\t\t? this.timeSignatures[index - 1]\n\t\t\t\t\t: this.timeSignatures[0];\n\n\t\t\tconst elapsedBeats = (event.ticks - lastEvent.ticks) / this.ppq;\n\t\t\tconst elapsedMeasures =\n\t\t\t\telapsedBeats /\n\t\t\t\tlastEvent.timeSignature[0] /\n\t\t\t\t(lastEvent.timeSignature[1] / 4);\n\n\t\t\tlastEvent.measures = lastEvent.measures || 0;\n\t\t\tevent.measures = elapsedMeasures + lastEvent.measures;\n\t\t});\n\t}\n\n\t/**\n\t * Convert ticks into seconds based on the tempo changes.\n\t */\n\tticksToSeconds(ticks: number): number {\n\t\t// Find the relevant position.\n\t\tconst index = search(this.tempos, ticks);\n\n\t\tif (index !== -1) {\n\t\t\tconst tempo = this.tempos[index];\n\t\t\tconst tempoTime = tempo.time;\n\t\t\tconst elapsedBeats = (ticks - tempo.ticks) / this.ppq;\n\n\t\t\treturn tempoTime + (60 / tempo.bpm) * elapsedBeats;\n\t\t} else {\n\t\t\t// Assume 120.\n\t\t\tconst beats = ticks / this.ppq;\n\t\t\treturn (60 / 120) * beats;\n\t\t}\n\t}\n\n\t/**\n\t * Convert ticks into measures based off of the time signatures.\n\t */\n\tticksToMeasures(ticks: number): number {\n\t\tconst index = search(this.timeSignatures, ticks);\n\n\t\tif (index !== -1) {\n\t\t\tconst timeSigEvent = this.timeSignatures[index];\n\t\t\tconst elapsedBeats = (ticks - timeSigEvent.ticks) / this.ppq;\n\n\t\t\treturn (\n\t\t\t\ttimeSigEvent.measures +\n\t\t\t\telapsedBeats /\n\t\t\t\t\t(timeSigEvent.timeSignature[0] /\n\t\t\t\t\t\ttimeSigEvent.timeSignature[1]) /\n\t\t\t\t\t4\n\t\t\t);\n\t\t} else {\n\t\t\treturn ticks / this.ppq / 4;\n\t\t}\n\t}\n\n\t/**\n\t * The number of ticks per quarter note.\n\t */\n\tget ppq(): number {\n\t\treturn privatePPQMap.get(this);\n\t}\n\n\t/**\n\t * Convert seconds to ticks based on the tempo events.\n\t */\n\tsecondsToTicks(seconds: number): number {\n\t\t// Find the relevant position.\n\t\tconst index = search(this.tempos, seconds, \"time\");\n\n\t\tif (index !== -1) {\n\t\t\tconst tempo = this.tempos[index];\n\t\t\tconst tempoTime = tempo.time;\n\t\t\tconst elapsedTime = seconds - tempoTime;\n\t\t\tconst elapsedBeats = elapsedTime / (60 / tempo.bpm);\n\n\t\t\treturn Math.round(tempo.ticks + elapsedBeats * this.ppq);\n\t\t} else {\n\t\t\t// Assume 120.\n\t\t\tconst beats = seconds / (60 / 120);\n\t\t\treturn Math.round(beats * this.ppq);\n\t\t}\n\t}\n\n\t/**\n\t * Convert the header into an object.\n\t */\n\ttoJSON(): HeaderJSON {\n\t\treturn {\n\t\t\tkeySignatures: this.keySignatures,\n\t\t\tmeta: this.meta,\n\t\t\tname: this.name,\n\t\t\tppq: this.ppq,\n\t\t\ttempos: this.tempos.map((t) => {\n\t\t\t\treturn {\n\t\t\t\t\tbpm: t.bpm,\n\t\t\t\t\tticks: t.ticks,\n\t\t\t\t};\n\t\t\t}),\n\t\t\ttimeSignatures: this.timeSignatures,\n\t\t};\n\t}\n\n\t/**\n\t * Parse a header json object.\n\t */\n\tfromJSON(json: HeaderJSON): void {\n\t\tthis.name = json.name;\n\t\t\n\t\t// Clone all the attributes.\n\t\tthis.tempos = json.tempos.map((t) => Object.assign({}, t));\n\t\tthis.timeSignatures = json.timeSignatures.map((t) =>\n\t\t\tObject.assign({}, t)\n\t\t);\n\t\tthis.keySignatures = json.keySignatures.map((t) =>\n\t\t\tObject.assign({}, t)\n\t\t);\n\t\tthis.meta = json.meta.map((t) => Object.assign({}, t));\n\n\t\tprivatePPQMap.set(this, json.ppq);\n\t\tthis.update();\n\t}\n\n\t/**\n\t * Update the tempo of the midi to a single tempo. Will remove and replace\n\t * any other tempos currently set and update all of the event timing.\n\t * @param bpm The tempo in beats per second.\n\t */\n\tsetTempo(bpm: number): void {\n\t\tthis.tempos = [\n\t\t\t{\n\t\t\t\tbpm,\n\t\t\t\tticks: 0,\n\t\t\t},\n\t\t];\n\t\tthis.update();\n\t}\n}\n\nexport interface HeaderJSON {\n\tname: string;\n\tppq: number;\n\tmeta: MetaEvent[];\n\ttempos: TempoEvent[];\n\ttimeSignatures: TimeSignatureEvent[];\n\tkeySignatures: KeySignatureEvent[];\n}\n","import type {\n\tMidiEvent,\n\tMidiProgramChangeEvent\n} from \"midi-file\";\n\nimport { DrumKitByPatchID, instrumentByPatchID, InstrumentFamilyByID } from \"./InstrumentMaps\";\nimport { Track } from \"./Track\";\n\n/**\n * @hidden\n */\nconst privateTrackMap = new WeakMap<Instrument, Track>();\n\n/**\n * Describes the MIDI instrument of a track.\n */\nexport class Instrument {\n\n\t/**\n\t * The instrument number. Defaults to 0.\n\t */\n\tnumber = 0;\n\n\t/**\n\t * @param trackData\n\t * @param track \n\t */\n\tconstructor(trackData: MidiEvent[], track: Track) {\n\t\tprivateTrackMap.set(this, track);\n\t\tthis.number = 0;\n\n\t\tif (trackData) {\n\t\t\tconst programChange = trackData.find(\n\t\t\t\te => e.type === \"programChange\"\n\t\t\t) as MidiProgramChangeEvent;\n\n\t\t\t// Set 'number' from 'programNumber' if exists.\n\t\t\tif (programChange) {\n\t\t\t\tthis.number = programChange.programNumber;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The common name of the instrument.\n\t */\n\tget name(): string {\n\t\tif (this.percussion) {\n\t\t\treturn DrumKitByPatchID[this.number];\n\t\t} else {\n\t\t\treturn instrumentByPatchID[this.number];\n\t\t}\n\t}\n\n\tset name(n: string) {\n\t\tconst patchNumber = instrumentByPatchID.indexOf(n);\n\t\tif (patchNumber !== -1) {\n\t\t\tthis.number = patchNumber;\n\t\t}\n\t}\n\n\t/**\n\t * The instrument family, e.g. \"piano\".\n\t */\n\tget family(): string {\n\t\tif (this.percussion) {\n\t\t\treturn \"drums\";\n\t\t} else {\n\t\t\treturn InstrumentFamilyByID[Math.floor(this.number / 8)];\n\t\t}\n\t}\n\n\t/**\n\t * If the instrument is a percussion instrument.\n\t */\n\tget percussion(): boolean {\n\t\tconst track = privateTrackMap.get(this);\n\t\treturn track.channel === 9;\n\t}\n\n\t/**\n\t * Convert it to JSON form.\n\t */\n\ttoJSON(): InstrumentJSON {\n\t\treturn {\n\t\t\tfamily: this.family,\n\t\t\tnumber: this.number,\n\t\t\tname: this.name\n\t\t};\n\t}\n\n\t/**\n\t * Convert from JSON form.\n\t */\n\tfromJSON(json: InstrumentJSON): void {\n\t\tthis.number = json.number;\n\t}\n}\n\nexport interface InstrumentJSON {\n\tfamily: string;\n\tnumber: number;\n\tname: string;\n}\n","export const instrumentByPatchID = [\n\t\"acoustic grand piano\",\n\t\"bright acoustic piano\",\n\t\"electric grand piano\",\n\t\"honky-tonk piano\",\n\t\"electric piano 1\",\n\t\"electric piano 2\",\n\t\"harpsichord\",\n\t\"clavi\",\n\t\"celesta\",\n\t\"glockenspiel\",\n\t\"music box\",\n\t\"vibraphone\",\n\t\"marimba\",\n\t\"xylophone\",\n\t\"tubular bells\",\n\t\"dulcimer\",\n\t\"drawbar organ\",\n\t\"percussive organ\",\n\t\"rock organ\",\n\t\"church organ\",\n\t\"reed organ\",\n\t\"accordion\",\n\t\"harmonica\",\n\t\"tango accordion\",\n\t\"acoustic guitar (nylon)\",\n\t\"acoustic guitar (steel)\",\n\t\"electric guitar (jazz)\",\n\t\"electric guitar (clean)\",\n\t\"electric guitar (muted)\",\n\t\"overdriven guitar\",\n\t\"distortion guitar\",\n\t\"guitar harmonics\",\n\t\"acoustic bass\",\n\t\"electric bass (finger)\",\n\t\"electric bass (pick)\",\n\t\"fretless bass\",\n\t\"slap bass 1\",\n\t\"slap bass 2\",\n\t\"synth bass 1\",\n\t\"synth bass 2\",\n\t\"violin\",\n\t\"viola\",\n\t\"cello\",\n\t\"contrabass\",\n\t\"tremolo strings\",\n\t\"pizzicato strings\",\n\t\"orchestral harp\",\n\t\"timpani\",\n\t\"string ensemble 1\",\n\t\"string ensemble 2\",\n\t\"synthstrings 1\",\n\t\"synthstrings 2\",\n\t\"choir aahs\",\n\t\"voice oohs\",\n\t\"synth voice\",\n\t\"orchestra hit\",\n\t\"trumpet\",\n\t\"trombone\",\n\t\"tuba\",\n\t\"muted trumpet\",\n\t\"french horn\",\n\t\"brass section\",\n\t\"synthbrass 1\",\n\t\"synthbrass 2\",\n\t\"soprano sax\",\n\t\"alto sax\",\n\t\"tenor sax\",\n\t\"baritone sax\",\n\t\"oboe\",\n\t\"english horn\",\n\t\"bassoon\",\n\t\"clarinet\",\n\t\"piccolo\",\n\t\"flute\",\n\t\"recorder\",\n\t\"pan flute\",\n\t\"blown bottle\",\n\t\"shakuhachi\",\n\t\"whistle\",\n\t\"ocarina\",\n\t\"lead 1 (square)\",\n\t\"lead 2 (sawtooth)\",\n\t\"lead 3 (calliope)\",\n\t\"lead 4 (chiff)\",\n\t\"lead 5 (charang)\",\n\t\"lead 6 (voice)\",\n\t\"lead 7 (fifths)\",\n\t\"lead 8 (bass + lead)\",\n\t\"pad 1 (new age)\",\n\t\"pad 2 (warm)\",\n\t\"pad 3 (polysynth)\",\n\t\"pad 4 (choir)\",\n\t\"pad 5 (bowed)\",\n\t\"pad 6 (metallic)\",\n\t\"pad 7 (halo)\",\n\t\"pad 8 (sweep)\",\n\t\"fx 1 (rain)\",\n\t\"fx 2 (soundtrack)\",\n\t\"fx 3 (crystal)\",\n\t\"fx 4 (atmosphere)\",\n\t\"fx 5 (brightness)\",\n\t\"fx 6 (goblins)\",\n\t\"fx 7 (echoes)\",\n\t\"fx 8 (sci-fi)\",\n\t\"sitar\",\n\t\"banjo\",\n\t\"shamisen\",\n\t\"koto\",\n\t\"kalimba\",\n\t\"bag pipe\",\n\t\"fiddle\",\n\t\"shanai\",\n\t\"tinkle bell\",\n\t\"agogo\",\n\t\"steel drums\",\n\t\"woodblock\",\n\t\"taiko drum\",\n\t\"melodic tom\",\n\t\"synth drum\",\n\t\"reverse cymbal\",\n\t\"guitar fret noise\",\n\t\"breath noise\",\n\t\"seashore\",\n\t\"bird tweet\",\n\t\"telephone ring\",\n\t\"helicopter\",\n\t\"applause\",\n\t\"gunshot\",\n];\n\nexport const InstrumentFamilyByID = [\n\t\"piano\",\n\t\"chromatic percussion\",\n\t\"organ\",\n\t\"guitar\",\n\t\"bass\",\n\t\"strings\",\n\t\"ensemble\",\n\t\"brass\",\n\t\"reed\",\n\t\"pipe\",\n\t\"synth lead\",\n\t\"synth pad\",\n\t\"synth effects\",\n\t\"world\",\n\t\"percussive\",\n\t\"sound effects\",\n];\n\nexport const DrumKitByPatchID = {\n\t0: \"standard kit\",\n\t8: \"room kit\",\n\t16: \"power kit\",\n\t24: \"electronic kit\",\n\t25: \"tr-808 kit\",\n\t32: \"jazz kit\",\n\t40: \"brush kit\",\n\t48: \"orchestra kit\",\n\t56: \"sound fx kit\",\n};\n","import type {\n\tMidiData,\n\tMidiEvent\n} from \"midi-file\";\n\nimport { parseMidi } from \"midi-file\";\n\nimport { Header, HeaderJSON } from \"./Header\";\nimport { Track, TrackJSON } from \"./Track\";\nimport { encode } from \"./Encode\";\n\n/**\n * The main midi parsing class.\n */\nexport class Midi {\n\n\t/**\n\t * Download and parse the MIDI file. Returns a promise\n\t * which resolves to the generated MIDI file.\n\t * @param url The URL to fetch.\n\t */\n\tstatic async fromUrl(url: string): Promise<Midi> {\n\t\tconst response = await fetch(url);\n\t\tif (response.ok) {\n\t\t\tconst arrayBuffer = await response.arrayBuffer();\n\t\t\treturn new Midi(arrayBuffer);\n\t\t} else {\n\t\t\tthrow new Error(`Could not load '${url}'`);\n\t\t}\n\t}\n\n\t/**\n\t * The header information, includes things like tempo and meta events.\n\t */\n\theader: Header;\n\n\t/**\n\t * The midi tracks.\n\t */\n\ttracks: Track[];\n\n\t/**\n\t * Parse the midi data\n\t */\n\tconstructor(midiArray?: (ArrayLike<number> | ArrayBuffer)) {\n\t\t// Parse the MIDI data if there is any.\n\t\tlet midiData: (MidiData | null) = null;\n\t\tif (midiArray) {\n\t\t\t// Transform midiArray to ArrayLike<number>\n\t\t\t// only if it's an ArrayBuffer.\n\t\t\tconst midiArrayLike: ArrayLike<number> = midiArray instanceof ArrayBuffer\n\t\t\t\t? new Uint8Array(midiArray)\n\t\t\t\t: midiArray;\n\n\t\t\t// Parse MIDI data.\n\t\t\tmidiData = parseMidi(midiArrayLike);\n\n\t\t\t// Add the absolute times to each of the tracks.\n\t\t\tmidiData.tracks.forEach(track => {\n\t\t\t\tlet currentTicks = 0;\n\n\t\t\t\ttrack.forEach((event: MidiEvent & { absoluteTime: number; }) => {\n\t\t\t\t\tcurrentTicks += event.deltaTime;\n\t\t\t\t\tevent.absoluteTime = currentTicks;\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// Ensure at most one instrument per track.\n\t\t\tmidiData.tracks = splitTracks(midiData.tracks);\n\t\t}\n\n\t\tthis.header = new Header(midiData);\n\t\tthis.tracks = [];\n\n\t\t// Parse MIDI data.\n\t\tif (midiArray) {\n\t\t\t// Format 0, everything is on the same track.\n\t\t\tthis.tracks = midiData.tracks.map(trackData => new Track(trackData, this.header));\n\n\t\t\t// If it's format 1 and there are no notes on the first track, remove it.\n\t\t\tif (midiData.header.format === 1 && this.tracks[0].duration === 0) {\n\t\t\t\tthis.tracks.shift();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The name of the midi file, taken from the first track.\n\t */\n\tget name(): string {\n\t\treturn this.header.name;\n\t}\n\n\tset name(n) {\n\t\tthis.header.name = n;\n\t}\n\n\t/**\n\t * The total length of the file in seconds.\n\t */\n\tget duration(): number {\n\t\t// Get the max of the last note of all the tracks.\n\t\tconst durations = this.tracks.map(t => t.duration);\n\t\treturn Math.max(...durations);\n\t}\n\n\t/**\n\t * The total length of the file in ticks.\n\t */\n\tget durationTicks(): number {\n\t\t// Get the max of the last note of all the tracks.\n\t\tconst durationTicks = this.tracks.map(t => t.durationTicks);\n\t\treturn Math.max(...durationTicks);\n\t}\n\n\t/**\n\t * Add a track to the MIDI file.\n\t */\n\taddTrack(): Track {\n\t\tconst track = new Track(undefined, this.header);\n\t\tthis.tracks.push(track);\n\n\t\treturn track;\n\t}\n\n\t/**\n\t * Encode the MIDI as a Uint8Array.\n\t */\n\ttoArray(): Uint8Array {\n\t\treturn encode(this);\n\t}\n\n\t/**\n\t * Convert the MIDI object to JSON.\n\t */\n\ttoJSON(): MidiJSON {\n\t\treturn {\n\t\t\theader: this.header.toJSON(),\n\t\t\ttracks: this.tracks.map(track => track.toJSON()),\n\t\t};\n\t}\n\n\t/**\n\t * Parse a JSON representation of the object. Will overwrite the current\n\t * tracks and header.\n\t */\n\tfromJSON(json: MidiJSON): void {\n\t\tthis.header = new Header();\n\t\tthis.header.fromJSON(json.header);\n\t\tthis.tracks = json.tracks.map(trackJSON => {\n\t\t\tconst track = new Track(undefined, this.header);\n\t\t\ttrack.fromJSON(trackJSON);\n\n\t\t\treturn track;\n\t\t});\n\t}\n\n\t/**\n\t * Clone the entire object MIDI object.\n\t */\n\tclone(): Midi {\n\t\tconst midi = new Midi();\n\t\tmidi.fromJSON(this.toJSON());\n\n\t\treturn midi;\n\t}\n}\n\n/**\n * The MIDI data in JSON format.\n */\nexport interface MidiJSON {\n\theader: HeaderJSON;\n\ttracks: TrackJSON[];\n}\n\nexport { TrackJSON, Track } from \"./Track\";\nexport { HeaderJSON, Header } from \"./Header\";\n\n/**\n * Given a list of MIDI tracks, make sure that each channel corresponds to at\n * most one channel and at most one instrument. This means splitting up tracks\n * that contain more than one channel or instrument.\n */\nfunction splitTracks(tracks: Array<MidiEvent[]>): Array<MidiEvent[]> {\n\tconst newTracks = [];\n\n\tfor (let i = 0; i < tracks.length; i++) {\n\t\tconst defaultTrack = newTracks.length;\n\t\t// a map from [program, channel] tuples to new track numbers\n\t\tconst trackMap = new Map<string, number>();\n\t\t// a map from channel numbers to current program numbers\n\t\tconst currentProgram = Array(16).fill(0) as Array<number>;\n\n\t\tfor (const event of tracks[i]) {\n\t\t\tlet targetTrack = defaultTrack;\n\n\t\t\t// If the event has a channel, we need to find that channel's current\n\t\t\t// program number and the appropriate track for this [program, channel]\n\t\t\t// pair.\n\t\t\tconst channel = (event as (MidiEvent & { channel?: number })).channel;\n\t\t\tif (channel !== undefined) {\n\t\t\t\tif (event.type === \"programChange\") {\n\t\t\t\t\tcurrentProgram[channel] = event.programNumber;\n\t\t\t\t}\n\n\t\t\t\tconst program = currentProgram[channel];\n\t\t\t\tconst trackKey = `${program} ${channel}`;\n\t\t\t\t\n\t\t\t\tif (trackMap.has(trackKey)) {\n\t\t\t\t\ttargetTrack = trackMap.get(trackKey);\n\t\t\t\t} else {\n\t\t\t\t\ttargetTrack = defaultTrack + trackMap.size;\n\t\t\t\t\ttrackMap.set(trackKey, targetTrack);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!newTracks[targetTrack]) {\n\t\t\t\tnewTracks.push([]);\n\t\t\t}\n\n\t\t\tnewTracks[targetTrack].push(event);\n\t\t}\n\t}\n\n\treturn newTracks;\n}\n","import { Header } from \"./Header\";\n\n/**\n * Convert a MIDI note into a pitch.\n */\nfunction midiToPitch(midi: number): string {\n\tconst octave = Math.floor(midi / 12) - 1;\n\treturn midiToPitchClass(midi) + octave.toString();\n}\n\n/**\n * Convert a MIDI note to a pitch class (just the pitch no octave).\n */\nfunction midiToPitchClass(midi: number): string {\n\tconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\tconst note = midi % 12;\n\treturn scaleIndexToNote[note];\n}\n\n/**\n * Convert a pitch class to a MIDI note.\n */\nfunction pitchClassToMidi(pitch: string): number {\n\tconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\treturn scaleIndexToNote.indexOf(pitch);\n}\n\n/**\n * Convert a pitch to a MIDI number.\n */\n// tslint:disable-next-line: only-arrow-functions typedef\nconst pitchToMidi: (note: string) => number = (function() {\n\tconst regexp = /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i;\n\tconst noteToScaleIndex = {\n\t\t// tslint:disable-next-line: object-literal-sort-keys\n\t\tcbb: -2, cb: -1, c: 0, \"c#\": 1, cx: 2,\n\t\tdbb: 0, db: 1, d: 2, \"d#\": 3, dx: 4,\n\t\tebb: 2, eb: 3, e: 4, \"e#\": 5, ex: 6,\n\t\tfbb: 3, fb: 4, f: 5, \"f#\": 6, fx: 7,\n\t\tgbb: 5, gb: 6, g: 7, \"g#\": 8, gx: 9,\n\t\tabb: 7, ab: 8, a: 9, \"a#\": 10, ax: 11,\n\t\tbbb: 9, bb: 10, b: 11, \"b#\": 12, bx: 13,\n\t};\n\n\treturn (note) => {\n\t\tconst split = regexp.exec(note);\n\t\tconst pitch = split[1];\n\t\tconst octave = split[2];\n\t\tconst index = noteToScaleIndex[pitch.toLowerCase()];\n\t\treturn index + (parseInt(octave, 10) + 1) * 12;\n\t};\n}());\n\nconst privateHeaderMap = new WeakMap<Note, Header>();\n\n/**\n * A Note consists of a `noteOn` and `noteOff` event.\n */\nexport class Note implements NoteInterface {\n\n\t/**\n\t * The notes MIDI value.\n\t */\n\tmidi: number;\n\n\t/**\n\t * The normalized velocity (0-1).\n\t */\n\tvelocity: number;\n\n\t/**\n\t * The velocity of the note off.\n\t */\n\tnoteOffVelocity: number;\n\n\t/**\n\t * The start time in ticks.\n\t */\n\tticks: number;\n\n\t/**\n\t * The duration in ticks.\n\t */\n\tdurationTicks: number;\n\n\tconstructor(noteOn: NoteOnEvent, noteOff: NoteOffEvent, header: Header) {\n\t\tprivateHeaderMap.set(this, header);\n\n\t\tthis.midi = noteOn.midi;\n\n\t\tthis.velocity = noteOn.velocity;\n\n\t\tthis.noteOffVelocity = noteOff.velocity;\n\n\t\tthis.ticks = noteOn.ticks;\n\n\t\tthis.durationTicks = noteOff.ticks - noteOn.ticks;\n\t}\n\n\t/**\n\t * The note name and octave in scientific pitch notation, e.g. \"C4\".\n\t */\n\tget name(): string {\n\t\treturn midiToPitch(this.midi);\n\t}\n\n\tset name(n: string) {\n\t\tthis.midi = pitchToMidi(n);\n\t}\n\n\t/**\n\t * The notes octave number.\n\t */\n\tget octave(): number {\n\t\treturn Math.floor(this.midi / 12) - 1;\n\t}\n\n\tset octave(o: number) {\n\t\tconst diff = o - this.octave;\n\t\tthis.midi += diff * 12;\n\t}\n\n\t/**\n\t * The pitch class name. e.g. \"A\".\n\t */\n\tget pitch(): string {\n\t\treturn midiToPitchClass(this.midi);\n\t}\n\n\tset pitch(p: string) {\n\t\tthis.midi = 12 * (this.octave + 1) + pitchClassToMidi(p);\n\t}\n\n\t/**\n\t * The duration of the segment in seconds.\n\t */\n\tget duration(): number {\n\t\tconst header = privateHeaderMap.get(this);\n\t\treturn header.ticksToSeconds(this.ticks + this.durationTicks) - header.ticksToSeconds(this.ticks);\n\t}\n\n\tset duration(d: number) {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tconst noteEndTicks = header.secondsToTicks(this.time + d);\n\t\tthis.durationTicks = noteEndTicks - this.ticks;\n\t}\n\n\t/**\n\t * The time of the event in seconds.\n\t */\n\tget time(): number {\n\t\tconst header = privateHeaderMap.get(this);\n\t\treturn header.ticksToSeconds(this.ticks);\n\t}\n\n\tset time(t: number) {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tthis.ticks = header.secondsToTicks(t);\n\t}\n\n\t/**\n\t * The number of measures (and partial measures) to this beat.\n\t * Takes into account time signature changes.\n\t * @readonly\n\t */\n\tget bars(): number {\n\t\tconst header = privateHeaderMap.get(this);\n\t\treturn header.ticksToMeasures(this.ticks);\n\t}\n\n\ttoJSON(): NoteJSON {\n\t\treturn {\n\t\t\tduration: this.duration,\n\t\t\tdurationTicks: this.durationTicks,\n\t\t\tmidi: this.midi,\n\t\t\tname: this.name,\n\t\t\tticks: this.ticks,\n\t\t\ttime: this.time,\n\t\t\tvelocity: this.velocity,\n\t\t};\n\t}\n}\n\nexport interface NoteJSON {\n\ttime: number;\n\tmidi: number;\n\tname: string;\n\tvelocity: number;\n\tduration: number;\n\tticks: number;\n\tdurationTicks: number;\n}\n\nexport interface NoteOnEvent {\n\tticks: number;\n\tvelocity: number;\n\tmidi: number;\n}\n\nexport interface NoteOffEvent {\n\tticks: number;\n\tvelocity: number;\n}\n\nexport interface NoteInterface {\n\ttime: number;\n\tticks: number;\n\tduration: number;\n\tdurationTicks: number;\n\tmidi: number;\n\tpitch: string;\n\toctave: number;\n\tname: string;\n\tnoteOffVelocity: number;\n\tvelocity: number;\n}\n\ntype PitchDescription = {\n\tname: string;\n} | {\n\tpitch: string;\n\toctave: number;\n} | {\n\tmidi: number;\n}\n\ntype VelocityDescription = {\n\tvelocity?: number;\n\tnoteOffVelocity?: number;\n}\n\ntype TimeDescription = {\n\ttime: number;\n\tduration?: number;\n} | {\n\tticks: number;\n\tdurationTicks?: number;\n}\n\n/**\n * @hidden\n */\nexport type NoteConstructorInterface = PitchDescription & VelocityDescription & TimeDescription\n","import { Header } from \"./Header\";\nimport { MidiPitchBendEvent } from \"midi-file\";\n\nconst privateHeaderMap = new WeakMap<PitchBend, Header>();\n\n/**\n * Represents a pitch bend event.\n */\nexport class PitchBend implements PitchBendInterface {\n\n\t/**\n\t * The pitch value from...\n\t */\n\tvalue: number;\n\n\t/**\n\t * The tick time of the event.\n\t */\n\tticks: number;\n\n\t/**\n\t * @param event\n\t * @param header\n\t */\n\tconstructor(event: Partial<MidiPitchBendEvent & { absoluteTime: number; }>, header: Header) {\n\t\tprivateHeaderMap.set(this, header);\n\n\t\tthis.ticks = event.absoluteTime;\n\t\tthis.value = event.value;\n\t}\n\n\t/**\n\t * The time of the event in seconds\n\t */\n\tget time(): number {\n\t\tconst header = privateHeaderMap.get(this);\n\t\treturn header.ticksToSeconds(this.ticks);\n\t}\n\n\tset time(t: number) {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tthis.ticks = header.secondsToTicks(t);\n\t}\n\n\ttoJSON(): PitchBendJSON {\n\t\treturn {\n\t\t\tticks: this.ticks,\n\t\t\ttime: this.time,\n\t\t\tvalue: this.value,\n\t\t};\n\t}\n}\n\nexport interface PitchBendJSON {\n\tticks: number;\n\ttime: number;\n\tvalue: number;\n}\n\nexport interface PitchBendInterface {\n\tticks: number;\n\ttime: number;\n\tvalue: number;\n}\n","import type {\n\tMidiControllerEvent,\n\tMidiEndOfTrackEvent,\n\tMidiEvent,\n\tMidiNoteOffEvent, MidiNoteOnEvent,\n\tMidiPitchBendEvent, MidiTrackNameEvent\n} from \"midi-file\";\n\n// Used to add `absoluteTime` property to 'MidiEvent's.\ntype WithAbsoluteTime = { absoluteTime: number; };\n\nimport { insert } from \"./BinarySearch\";\nimport { ControlChange, ControlChangeInterface } from \"./ControlChange\";\nimport { ControlChangesJSON, createControlChanges } from \"./ControlChanges\";\nimport { PitchBend, PitchBendInterface, PitchBendJSON } from \"./PitchBend\";\n\nimport { Header } from \"./Header\";\nimport { Instrument, InstrumentJSON } from \"./Instrument\";\nimport { Note, NoteConstructorInterface, NoteJSON } from \"./Note\";\n\nconst privateHeaderMap = new WeakMap<Track, Header>();\n\n/**\n * A Track is a collection of 'notes' and 'controlChanges'.\n */\nexport class Track {\n\t/**\n\t * The name of the track.\n\t */\n\tname = \"\";\n\n\t/**\n\t * The instrument associated with the track.\n\t */\n\tinstrument: Instrument;\n\n\t/**\n\t * The track's note events.\n\t */\n\tnotes: Note[] = [];\n\n\t/**\n\t * The channel number of the track. Applies this channel\n\t * to all events associated with the channel.\n\t */\n\tchannel: number;\n\n\t/**\n\t * The control change events.\n\t */\n\tcontrolChanges = createControlChanges();\n\n\t/**\n\t * The end of track event (if it exists) in ticks.\n\t */\n\tendOfTrackTicks?: number;\n\n\t/**\n\t * The pitch bend events.\n\t */\n\tpitchBends: PitchBend[] = [];\n\n\tconstructor(trackData: MidiEvent[], header: Header) {\n\t\tprivateHeaderMap.set(this, header);\n\n\t\tif (trackData) {\n\t\t\t// Get the name of the track.\n\t\t\tconst nameEvent = trackData.find(\n\t\t\t\t(e) => e.type === \"trackName\"\n\t\t\t) as MidiTrackNameEvent;\n\n\t\t\t// Set empty name if 'trackName' event isn't found.\n\t\t\tthis.name = nameEvent ? nameEvent.text : \"\";\n\t\t}\n\n\t\tthis.instrument = new Instrument(trackData, this);\n\n\t\t// Defaults to 0.\n\t\tthis.channel = 0;\n\n\t\tif (trackData) {\n\t\t\tconst noteOns = trackData.filter(\n\t\t\t\t(event) => event.type === \"noteOn\"\n\t\t\t) as (MidiNoteOnEvent & WithAbsoluteTime)[];\n\n\t\t\tconst noteOffs = trackData.filter(\n\t\t\t\t(event) => event.type === \"noteOff\"\n\t\t\t) as (MidiNoteOffEvent & WithAbsoluteTime)[];\n\n\t\t\twhile (noteOns.length) {\n\t\t\t\tconst currentNote = noteOns.shift();\n\n\t\t\t\t// Set the channel based on the note.\n\t\t\t\tthis.channel = currentNote.channel;\n\n\t\t\t\t// Find the corresponding note off.\n\t\t\t\tconst offIndex = noteOffs.findIndex(\n\t\t\t\t\t(note) =>\n\t\t\t\t\t\tnote.noteNumber === currentNote.noteNumber &&\n\t\t\t\t\t\tnote.absoluteTime >= currentNote.absoluteTime\n\t\t\t\t);\n\n\t\t\t\tif (offIndex !== -1) {\n\t\t\t\t\t// Once it's got the note off, add it.\n\t\t\t\t\tconst noteOff = noteOffs.splice(offIndex, 1)[0];\n\n\t\t\t\t\tthis.addNote({\n\t\t\t\t\t\tdurationTicks:\n\t\t\t\t\t\t\tnoteOff.absoluteTime - currentNote.absoluteTime,\n\t\t\t\t\t\tmidi: currentNote.noteNumber,\n\t\t\t\t\t\tnoteOffVelocity: noteOff.velocity / 127,\n\t\t\t\t\t\tticks: currentNote.absoluteTime,\n\t\t\t\t\t\tvelocity: currentNote.velocity / 127,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst controlChanges = trackData.filter(\n\t\t\t\t(event) => event.type === \"controller\"\n\t\t\t) as (MidiControllerEvent & WithAbsoluteTime)[];\n\t\t\tcontrolChanges.forEach((event) => {\n\t\t\t\tthis.addCC({\n\t\t\t\t\tnumber: event.controllerType,\n\t\t\t\t\tticks: event.absoluteTime,\n\t\t\t\t\tvalue: event.value / 127,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst pitchBends = trackData.filter(\n\t\t\t\t(event) => event.type === \"pitchBend\"\n\t\t\t) as (MidiPitchBendEvent & WithAbsoluteTime)[];\n\t\t\tpitchBends.forEach((event) => {\n\t\t\t\tthis.addPitchBend({\n\t\t\t\t\tticks: event.absoluteTime,\n\t\t\t\t\t// Scale the value between -2^13 to 2^13 to -2 to 2.\n\t\t\t\t\tvalue: event.value / Math.pow(2, 13),\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst endOfTrackEvent:\n\t\t\t| (MidiEndOfTrackEvent & WithAbsoluteTime)\n\t\t\t| undefined = trackData.find(\n\t\t\t\t(event): event is (MidiEndOfTrackEvent & WithAbsoluteTime) =>\n\t\t\t\t\tevent.type === \"endOfTrack\"\n\t\t\t);\n\n\t\t\tthis.endOfTrackTicks =\n\t\t\t\tendOfTrackEvent !== undefined\n\t\t\t\t\t? endOfTrackEvent.absoluteTime\n\t\t\t\t\t: undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Add a note to the notes array.\n\t * @param props The note properties to add.\n\t */\n\taddNote(props: NoteConstructorInterface): this {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tconst note = new Note(\n\t\t\t{\n\t\t\t\tmidi: 0,\n\t\t\t\tticks: 0,\n\t\t\t\tvelocity: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tticks: 0,\n\t\t\t\tvelocity: 0,\n\t\t\t},\n\t\t\theader\n\t\t);\n\n\t\tObject.assign(note, props);\n\t\tinsert(this.notes, note, \"ticks\");\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a control change to the track.\n\t * @param props\n\t */\n\taddCC(\n\t\tprops:\n\t\t| Omit<ControlChangeInterface, \"ticks\">\n\t\t| Omit<ControlChangeInterface, \"time\">\n\t): this {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tconst cc = new ControlChange(\n\t\t\t{\n\t\t\t\tcontrollerType: props.number,\n\t\t\t},\n\t\t\theader\n\t\t);\n\t\tdelete props.number;\n\t\tObject.assign(cc, props);\n\t\tif (!Array.isArray(this.controlChanges[cc.number])) {\n\t\t\tthis.controlChanges[cc.number] = [];\n\t\t}\n\t\tinsert(this.controlChanges[cc.number], cc, \"ticks\");\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a control change to the track.\n\t */\n\taddPitchBend(\n\t\tprops:\n\t\t| Omit<PitchBendInterface, \"ticks\">\n\t\t| Omit<PitchBendInterface, \"time\">\n\t): this {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tconst pb = new PitchBend({}, header);\n\t\tObject.assign(pb, props);\n\t\tinsert(this.pitchBends, pb, \"ticks\");\n\t\treturn this;\n\t}\n\n\t/**\n\t * The end time of the last event in the track.\n\t */\n\tget duration(): number {\n\t\tif (!this.notes.length) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet maxDuration =\n\t\t\tthis.notes[this.notes.length - 1].time +\n\t\t\tthis.notes[this.notes.length - 1].duration;\n\n\t\tfor (let i = 0; i < this.notes.length - 1; i++) {\n\t\t\tconst duration = this.notes[i].time + this.notes[i].duration;\n\t\t\tif (maxDuration < duration) {\n\t\t\t\tmaxDuration = duration;\n\t\t\t}\n\t\t}\n\n\t\treturn maxDuration;\n\t}\n\n\t/**\n\t * The end time of the last event in the track in ticks.\n\t */\n\tget durationTicks(): number {\n\t\tif (!this.notes.length) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet maxDuration =\n\t\t\tthis.notes[this.notes.length - 1].ticks +\n\t\t\tthis.notes[this.notes.length - 1].durationTicks;\n\t\tfor (let i = 0; i < this.notes.length - 1; i++) {\n\t\t\tconst duration = this.notes[i].ticks + this.notes[i].durationTicks;\n\t\t\tif (maxDuration < duration) {\n\t\t\t\tmaxDuration = duration;\n\t\t\t}\n\t\t}\n\n\t\treturn maxDuration;\n\t}\n\n\t/**\n\t * Assign the JSON values to this track.\n\t */\n\tfromJSON(json: TrackJSON): void {\n\t\tthis.name = json.name;\n\t\tthis.channel = json.channel;\n\t\tthis.instrument = new Instrument(undefined, this);\n\t\tthis.instrument.fromJSON(json.instrument);\n\n\t\tif (json.endOfTrackTicks !== undefined) {\n\t\t\tthis.endOfTrackTicks = json.endOfTrackTicks;\n\t\t}\n\n\t\tfor (const number in json.controlChanges) {\n\t\t\tif (json.controlChanges[number]) {\n\t\t\t\tjson.controlChanges[number].forEach((cc) => {\n\t\t\t\t\tthis.addCC({\n\t\t\t\t\t\tnumber: cc.number,\n\t\t\t\t\t\tticks: cc.ticks,\n\t\t\t\t\t\tvalue: cc.value,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tjson.notes.forEach((n) => {\n\t\t\tthis.addNote({\n\t\t\t\tdurationTicks: n.durationTicks,\n\t\t\t\tmidi: n.midi,\n\t\t\t\tticks: n.ticks,\n\t\t\t\tvelocity: n.velocity,\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Convert the track into a JSON format.\n\t */\n\ttoJSON(): TrackJSON {\n\t\t// Convert all the CCs to JSON.\n\t\tconst controlChanges = {};\n\t\tfor (let i = 0; i < 127; i++) {\n\t\t\tif (this.controlChanges.hasOwnProperty(i)) {\n\t\t\t\tcontrolChanges[i] = this.controlChanges[i].map((c) =>\n\t\t\t\t\tc.toJSON()\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst json: TrackJSON = {\n\t\t\tchannel: this.channel,\n\t\t\tcontrolChanges,\n\t\t\tpitchBends: this.pitchBends.map((pb) => pb.toJSON()),\n\t\t\tinstrument: this.instrument.toJSON(),\n\t\t\tname: this.name,\n\t\t\tnotes: this.notes.map((n) => n.toJSON()),\n\t\t};\n\n\t\tif (this.endOfTrackTicks !== undefined) {\n\t\t\tjson.endOfTrackTicks = this.endOfTrackTicks;\n\t\t}\n\n\t\treturn json;\n\t}\n}\n\nexport interface TrackJSON {\n\tname: string;\n\tnotes: NoteJSON[];\n\tchannel: number;\n\tinstrument: InstrumentJSON;\n\tcontrolChanges: ControlChangesJSON;\n\tpitchBends: PitchBendJSON[];\n\tendOfTrackTicks?: number;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(233);\n"],"names":["root","factory","exports","module","define","amd","a","i","self","this","flatten","array","result","$flatten","length","value","Array","isArray","push","parseMidi","writeMidi","parseTrack","data","lastEventTypeByte","p","Parser","events","eof","event","readEvent","deltaTime","readVarInt","eventTypeByte","readUInt8","type","readBytes","meta","metatypeByte","number","readUInt16","text","readString","channel","port","microsecondsPerBeat","readUInt24","hourByte","frameRate","hour","min","sec","frame","subFrame","numerator","denominator","metronome","thirtyseconds","key","readInt8","scale","param1","running","eventType","noteNumber","velocity","byte9","amount","controllerType","programNumber","buffer","bufferLen","pos","prototype","u","readInt16","readInt24","readUInt32","len","bytes","slice","String","fromCharCode","apply","b","readChunk","id","headerChunk","header","format","numTracks","timeDivision","framesPerSecond","ticksPerFrame","ticksPerBeat","parseHeader","tracks","trackChunk","track","writeTrack","w","opts","t","Writer","writeEvent","useByte9ForNoteOff","writeChunk","writeVarInt","writeUInt8","writeUInt16","writeString","writeUInt24","Math","floor","log","LN2","writeInt8","writeBytes","value14","lsb14","msb14","v","b0","b1","writeInt16","b2","writeInt24","writeUInt32","b3","writeInt32","arr","concat","call","str","codePointAt","reverse","h","writeHeader","search","prop","beginning","end","midPoint","nextEvent","index","splice","controlChangeNames","controlChangeIds","Object","keys","reduce","obj","privateHeaderMap","WeakMap","privateCCNumberMap","set","ticks","absoluteTime","get","ticksToSeconds","secondsToTicks","toJSON","time","ControlChange","Proxy","target","handler","hasOwnProperty","encodeControlChange","cc","encodeInstrument","instrument","midi","midiData","ppq","name","keySignatures","map","keySig","keyIndex","keySignatureKeys","indexOf","encodeKeySignature","e","textEvent","tempos","tempo","bpm","encodeTempo","timeSignatures","timeSig","timeSignature","encodeTimeSignature","notes","note","durationTicks","noteOffVelocity","encodeNote","encodeNotes","controlChanges","forEach","encodeControlChanges","pitchBends","pb","encodePitchBend","encodePitchBends","sort","lastTime","Uint8Array","privatePPQMap","update","currentTime","lastEventBeats","lastBPM","beats","elapsedSeconds","lastEvent","elapsedMeasures","measures","tempoTime","elapsedBeats","ticksToMeasures","timeSigEvent","seconds","round","fromJSON","json","assign","setTempo","Header","privateTrackMap","trackData","programChange","find","percussion","DrumKitByPatchID","instrumentByPatchID","n","patchNumber","InstrumentFamilyByID","family","Instrument","midiArray","midiArrayLike","ArrayBuffer","currentTicks","newTracks","defaultTrack","trackMap","Map","currentProgram","fill","targetTrack","undefined","program","trackKey","has","size","splitTracks","Track","duration","shift","fromUrl","url","fetch","response","ok","arrayBuffer","Midi","Error","durations","max","addTrack","toArray","encode","trackJSON","clone","midiToPitchClass","regexp","noteToScaleIndex","pitchToMidi","cbb","cb","c","cx","dbb","db","d","dx","ebb","eb","ex","fbb","fb","f","fx","gbb","gb","g","gx","abb","ab","ax","bbb","bb","bx","split","exec","pitch","octave","toLowerCase","parseInt","noteOn","noteOff","toString","o","diff","noteEndTicks","Note","PitchBend","createControlChanges","nameEvent","noteOns","filter","noteOffs","currentNote","offIndex","findIndex","addNote","addCC","addPitchBend","pow","endOfTrackEvent","endOfTrackTicks","props","insert","maxDuration","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","definition","defineProperty","enumerable","r","Symbol","toStringTag"],"version":3,"file":"index.c1eef004.js.map","sourceRoot":"/__parcel_source_root/"}